{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * DoubleClick Search API\n *\n * Reports and modifies your advertising data in DoubleClick Search (for\n * example, campaigns, ad groups, keywords, and conversions).\n *\n * @example\n * const google = require('googleapis');\n * const doubleclicksearch = google.doubleclicksearch('v2');\n *\n * @namespace doubleclicksearch\n * @type {Function}\n * @version v2\n * @variation v2\n * @param {object=} options Options for Doubleclicksearch\n */\n\n\nfunction Doubleclicksearch(options) {\n  var self = this;\n  self._options = options || {};\n  self.conversion = {\n    /**\n     * doubleclicksearch.conversion.get\n     * @desc Retrieves a list of conversions from a DoubleClick Search engine\n     * account.\n     * @alias doubleclicksearch.conversion.get\n     * @memberOf! doubleclicksearch(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.adGroupId Numeric ID of the ad group.\n     * @param {string=} params.adId Numeric ID of the ad.\n     * @param {string} params.advertiserId Numeric ID of the advertiser.\n     * @param {string} params.agencyId Numeric ID of the agency.\n     * @param {string=} params.campaignId Numeric ID of the campaign.\n     * @param {string=} params.criterionId Numeric ID of the criterion.\n     * @param {integer} params.endDate Last date (inclusive) on which to retrieve conversions. Format is yyyymmdd.\n     * @param {string} params.engineAccountId Numeric ID of the engine account.\n     * @param {integer} params.rowCount The number of conversions to return per call.\n     * @param {integer} params.startDate First date (inclusive) on which to retrieve conversions. Format is yyyymmdd.\n     * @param {integer} params.startRow The 0-based starting index for retrieving conversions results.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/engine/{engineAccountId}/conversion').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['agencyId', 'advertiserId', 'engineAccountId', 'endDate', 'rowCount', 'startDate', 'startRow'],\n        pathParams: ['advertiserId', 'agencyId', 'engineAccountId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    insert: function insert(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/doubleclicksearch/v2/conversion').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    patch: function patch(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/doubleclicksearch/v2/conversion').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['advertiserId', 'agencyId', 'endDate', 'engineAccountId', 'rowCount', 'startDate', 'startRow'],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    update: function update(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/doubleclicksearch/v2/conversion').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    updateAvailability: function updateAvailability(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/doubleclicksearch/v2/conversion/updateAvailability').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.reports = {\n    /**\n     * doubleclicksearch.reports.generate\n     * @desc Generates and returns a report immediately.\n     * @alias doubleclicksearch.reports.generate\n     * @memberOf! doubleclicksearch(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {doubleclicksearch(v2).ReportRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    generate: function generate(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/doubleclicksearch/v2/reports/generate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/doubleclicksearch/v2/reports/{reportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['reportId'],\n        pathParams: ['reportId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    getFile: function getFile(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/doubleclicksearch/v2/reports/{reportId}/files/{reportFragment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['reportId', 'reportFragment'],\n        pathParams: ['reportFragment', 'reportId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    request: function request(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/doubleclicksearch/v2/reports').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.savedColumns = {\n    /**\n     * doubleclicksearch.savedColumns.list\n     * @desc Retrieve the list of saved columns for a specified advertiser.\n     * @alias doubleclicksearch.savedColumns.list\n     * @memberOf! doubleclicksearch(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.advertiserId DS ID of the advertiser.\n     * @param {string} params.agencyId DS ID of the agency.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/savedcolumns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['agencyId', 'advertiserId'],\n        pathParams: ['advertiserId', 'agencyId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Doubleclicksearch;","map":null,"metadata":{},"sourceType":"script"}