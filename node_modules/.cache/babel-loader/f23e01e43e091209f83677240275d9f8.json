{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Stackdriver Debugger API\n *\n * Examines the call stack and variables of a running application without\n * stopping or slowing it down.\n *\n * @example\n * const google = require('googleapis');\n * const clouddebugger = google.clouddebugger('v2');\n *\n * @namespace clouddebugger\n * @type {Function}\n * @version v2\n * @variation v2\n * @param {object=} options Options for Clouddebugger\n */\n\n\nfunction Clouddebugger(options) {\n  var self = this;\n  self._options = options || {};\n  self.controller = {\n    debuggees: {\n      /**\n       * clouddebugger.controller.debuggees.register\n       * @desc Registers the debuggee with the controller service.  All agents\n       * attached to the same application must call this method with exactly the\n       * same request content to get back the same stable `debuggee_id`. Agents\n       * should call this method again whenever `google.rpc.Code.NOT_FOUND` is\n       * returned from any controller method.  This protocol allows the\n       * controller service to disable debuggees, recover from data loss, or\n       * change the `debuggee_id` format. Agents must handle `debuggee_id` value\n       * changing upon re-registration.\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the Stackdriver Debugger API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/clouddebugger\n       * // 2. This sample uses Application Default Credentials for\n       * authentication.\n       * //    If not already done, install the gcloud CLI from\n       * //    https://cloud.google.com/sdk and run\n       * //    `gcloud beta auth application-default login`.\n       * //    For more information, see\n       * //\n       * https://developers.google.com/identity/protocols/application-default-credentials\n       * // 3. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var cloudDebugger = google.clouddebugger('v2');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     resource: {\n       *       // TODO: Add desired properties to the request body.\n       *     },\n       *\n       *     auth: authClient,\n       *   };\n       *\n       *   cloudDebugger.controller.debuggees.register(request, function(err,\n       * response) { if (err) { console.error(err); return;\n       *     }\n       *\n       *     // TODO: Change code below to process the `response` object:\n       *     console.log(JSON.stringify(response, null, 2));\n       *   });\n       * });\n       *\n       * function authorize(callback) {\n       *   google.auth.getApplicationDefault(function(err, authClient) {\n       *     if (err) {\n       *       console.error('authentication failed: ', err);\n       *       return;\n       *     }\n       *     if (authClient.createScopedRequired &&\n       * authClient.createScopedRequired()) { var scopes =\n       * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n       * authClient.createScoped(scopes);\n       *     }\n       *     callback(authClient);\n       *   });\n       * }\n       * @alias clouddebugger.controller.debuggees.register\n       * @memberOf! clouddebugger(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {clouddebugger(v2).RegisterDebuggeeRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      register: function register(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/controller/debuggees/register').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      breakpoints: {\n        /**\n         * clouddebugger.controller.debuggees.breakpoints.list\n         * @desc Returns the list of all active breakpoints for the debuggee.\n         * The breakpoint specification (`location`, `condition`, and\n         * `expressions` fields) is semantically immutable, although the field\n         * values may change. For example, an agent may update the location line\n         * number to reflect the actual line where the breakpoint was set, but\n         * this doesn't change the breakpoint semantics.  This means that an\n         * agent does not need to check if a breakpoint has changed when it\n         * encounters the same breakpoint on a successive call. Moreover, an\n         * agent should remember the breakpoints that are completed until the\n         * controller removes them from the active list to avoid setting those\n         * breakpoints again.\n         * @example\n         * // BEFORE RUNNING:\n         * // ---------------\n         * // 1. If not already done, enable the Stackdriver Debugger API\n         * //    and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/clouddebugger\n         * // 2. This sample uses Application Default Credentials for\n         * authentication.\n         * //    If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk and run\n         * //    `gcloud beta auth application-default login`.\n         * //    For more information, see\n         * //\n         * https://developers.google.com/identity/protocols/application-default-credentials\n         * // 3. Install the Node.js client library by running\n         * //    `npm install googleapis --save`\n         *\n         * var google = require('googleapis');\n         * var cloudDebugger = google.clouddebugger('v2');\n         *\n         * authorize(function(authClient) {\n         *   var request = {\n         *     // Identifies the debuggee.\n         *     debuggeeId: 'my-debuggee-id',  // TODO: Update placeholder value.\n         *\n         *     auth: authClient,\n         *   };\n         *\n         *   cloudDebugger.controller.debuggees.breakpoints.list(request,\n         * function(err, response) { if (err) { console.error(err); return;\n         *     }\n         *\n         *     // TODO: Change code below to process the `response` object:\n         *     console.log(JSON.stringify(response, null, 2));\n         *   });\n         * });\n         *\n         * function authorize(callback) {\n         *   google.auth.getApplicationDefault(function(err, authClient) {\n         *     if (err) {\n         *       console.error('authentication failed: ', err);\n         *       return;\n         *     }\n         *     if (authClient.createScopedRequired &&\n         * authClient.createScopedRequired()) { var scopes =\n         * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n         * authClient.createScoped(scopes);\n         *     }\n         *     callback(authClient);\n         *   });\n         * }\n         * @alias clouddebugger.controller.debuggees.breakpoints.list\n         * @memberOf! clouddebugger(v2)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.debuggeeId Identifies the debuggee.\n         * @param {boolean=} params.successOnTimeout If set to `true` (recommended), returns `google.rpc.Code.OK` status and sets the `wait_expired` response field to `true` when the server-selected timeout has expired.  If set to `false` (deprecated), returns `google.rpc.Code.ABORTED` status when the server-selected timeout has expired.\n         * @param {string=} params.waitToken A token that, if specified, blocks the method call until the list of active breakpoints has changed, or a server-selected timeout has expired. The value should be set from the `next_wait_token` field in the last response. The initial value should be set to `\"init\"`.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2/controller/debuggees/{debuggeeId}/breakpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['debuggeeId'],\n            pathParams: ['debuggeeId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2/controller/debuggees/{debuggeeId}/breakpoints/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['debuggeeId', 'id'],\n            pathParams: ['debuggeeId', 'id'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    }\n  };\n  self.debugger = {\n    debuggees: {\n      /**\n       * clouddebugger.debugger.debuggees.list\n       * @desc Lists all the debuggees that the user has access to.\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the Stackdriver Debugger API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/clouddebugger\n       * // 2. This sample uses Application Default Credentials for\n       * authentication.\n       * //    If not already done, install the gcloud CLI from\n       * //    https://cloud.google.com/sdk and run\n       * //    `gcloud beta auth application-default login`.\n       * //    For more information, see\n       * //\n       * https://developers.google.com/identity/protocols/application-default-credentials\n       * // 3. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var cloudDebugger = google.clouddebugger('v2');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     auth: authClient,\n       *   };\n       *\n       *   cloudDebugger.debugger.debuggees.list(request, function(err,\n       * response) { if (err) { console.error(err); return;\n       *     }\n       *\n       *     // TODO: Change code below to process the `response` object:\n       *     console.log(JSON.stringify(response, null, 2));\n       *   });\n       * });\n       *\n       * function authorize(callback) {\n       *   google.auth.getApplicationDefault(function(err, authClient) {\n       *     if (err) {\n       *       console.error('authentication failed: ', err);\n       *       return;\n       *     }\n       *     if (authClient.createScopedRequired &&\n       * authClient.createScopedRequired()) { var scopes =\n       * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n       * authClient.createScoped(scopes);\n       *     }\n       *     callback(authClient);\n       *   });\n       * }\n       * @alias clouddebugger.debugger.debuggees.list\n       * @memberOf! clouddebugger(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.clientVersion The client version making the call. Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).\n       * @param {boolean=} params.includeInactive When set to `true`, the result includes all debuggees. Otherwise, the result includes only debuggees that are active.\n       * @param {string=} params.project Project number of a Google Cloud project whose debuggees to list.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/debugger/debuggees').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      breakpoints: {\n        /**\n         * clouddebugger.debugger.debuggees.breakpoints.delete\n         * @desc Deletes the breakpoint from the debuggee.\n         * @example\n         * // BEFORE RUNNING:\n         * // ---------------\n         * // 1. If not already done, enable the Stackdriver Debugger API\n         * //    and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/clouddebugger\n         * // 2. This sample uses Application Default Credentials for\n         * authentication.\n         * //    If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk and run\n         * //    `gcloud beta auth application-default login`.\n         * //    For more information, see\n         * //\n         * https://developers.google.com/identity/protocols/application-default-credentials\n         * // 3. Install the Node.js client library by running\n         * //    `npm install googleapis --save`\n         *\n         * var google = require('googleapis');\n         * var cloudDebugger = google.clouddebugger('v2');\n         *\n         * authorize(function(authClient) {\n         *   var request = {\n         *     // ID of the debuggee whose breakpoint to delete.\n         *     debuggeeId: 'my-debuggee-id',  // TODO: Update placeholder value.\n         *\n         *     // ID of the breakpoint to delete.\n         *     breakpointId: 'my-breakpoint-id',  // TODO: Update placeholder\n         * value.\n         *\n         *     auth: authClient,\n         *   };\n         *\n         *   cloudDebugger.debugger.debuggees.breakpoints.delete(request,\n         * function(err) { if (err) { console.error(err); return;\n         *     }\n         *   });\n         * });\n         *\n         * function authorize(callback) {\n         *   google.auth.getApplicationDefault(function(err, authClient) {\n         *     if (err) {\n         *       console.error('authentication failed: ', err);\n         *       return;\n         *     }\n         *     if (authClient.createScopedRequired &&\n         * authClient.createScopedRequired()) { var scopes =\n         * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n         * authClient.createScoped(scopes);\n         *     }\n         *     callback(authClient);\n         *   });\n         * }\n         * @alias clouddebugger.debugger.debuggees.breakpoints.delete\n         * @memberOf! clouddebugger(v2)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.breakpointId ID of the breakpoint to delete.\n         * @param {string=} params.clientVersion The client version making the call. Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).\n         * @param {string} params.debuggeeId ID of the debuggee whose breakpoint to delete.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['debuggeeId', 'breakpointId'],\n            pathParams: ['breakpointId', 'debuggeeId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['debuggeeId', 'breakpointId'],\n            pathParams: ['breakpointId', 'debuggeeId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['debuggeeId'],\n            pathParams: ['debuggeeId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        set: function set(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints/set').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['debuggeeId'],\n            pathParams: ['debuggeeId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = Clouddebugger;","map":null,"metadata":{},"sourceType":"script"}