{"ast":null,"code":"var GoogleSpreadsheet = require('google-spreadsheet');\n\nvar async = require('async'); // spreadsheet key is the long id in the sheets URL\n\n\nvar doc = new GoogleSpreadsheet('1JbLq-KRysRSD6Xptw24p3I79takWfFwCTSY7nYbakPI');\nvar sheet;\nasync.series([function setAuth(step) {\n  // see notes below for authentication instructions!\n  var creds = require('./ReactChart-a540fe85ca33.json'); // OR, if you cannot save the file locally (like on heroku)\n\n\n  doc.useServiceAccountAuth(creds, step);\n}, function getInfoAndWorksheets(step) {\n  doc.getInfo(function (err, info) {\n    console.log('Loaded doc: ' + info.title + ' by ' + info.author.email);\n    sheet = info.worksheets[0];\n    console.log('sheet 1: ' + sheet.title + ' ' + sheet.rowCount + 'x' + sheet.colCount);\n    step();\n  });\n}, function workingWithCells(step) {\n  sheet.getCells({\n    'min-row': 1,\n    'max-row': 5,\n    'return-empty': true\n  }, function (err, cells) {\n    var cell = cells[0];\n    console.log('Cell R' + cell.row + 'C' + cell.col + ' = ' + cell.value); // cells have a value, numericValue, and formula\n\n    cell.value == '1';\n    cell.numericValue == 1;\n    cell.formula == '=ROW()';\n    sheet.bulkUpdateCells(cells); //async\n\n    step();\n  });\n}, function managingSheets(step) {\n  doc.addWorksheet({\n    title: 'my new sheet'\n  }, function (err, sheet) {\n    // change a sheet's title\n    sheet.setTitle('new title'); //async\n    //resize a sheet\n\n    sheet.resize({\n      rowCount: 50,\n      colCount: 20\n    }); //async\n\n    sheet.setHeaderRow(['name', 'age', 'phone']); //async\n    // removing a worksheet\n\n    sheet.del(); //async\n\n    step();\n  });\n}], function (err) {\n  if (err) {\n    console.log('Error: ' + err);\n  }\n});","map":{"version":3,"sources":["C:\\Users\\shilan\\Desktop\\chartTest\\reactcharts\\src\\App.js"],"names":["GoogleSpreadsheet","require","async","doc","sheet","series","setAuth","step","creds","useServiceAccountAuth","getInfoAndWorksheets","getInfo","err","info","console","log","title","author","email","worksheets","rowCount","colCount","workingWithCells","getCells","cells","cell","row","col","value","numericValue","formula","bulkUpdateCells","managingSheets","addWorksheet","setTitle","resize","setHeaderRow","del"],"mappings":"AAAA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,oBAAD,CAA/B;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAnB,C,CAEA;;;AACA,IAAIE,GAAG,GAAG,IAAIH,iBAAJ,CAAsB,8CAAtB,CAAV;AACA,IAAII,KAAJ;AAEAF,KAAK,CAACG,MAAN,CAAa,CACX,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACrB;AACA,MAAIC,KAAK,GAAGP,OAAO,CAAC,gCAAD,CAAnB,CAFqB,CAGrB;;;AAEAE,EAAAA,GAAG,CAACM,qBAAJ,CAA0BD,KAA1B,EAAiCD,IAAjC;AACD,CAPU,EAQX,SAASG,oBAAT,CAA8BH,IAA9B,EAAoC;AAClCJ,EAAAA,GAAG,CAACQ,OAAJ,CAAY,UAASC,GAAT,EAAcC,IAAd,EAAoB;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAeF,IAAI,CAACG,KAApB,GAA0B,MAA1B,GAAiCH,IAAI,CAACI,MAAL,CAAYC,KAAzD;AACAd,IAAAA,KAAK,GAAGS,IAAI,CAACM,UAAL,CAAgB,CAAhB,CAAR;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAYX,KAAK,CAACY,KAAlB,GAAwB,GAAxB,GAA4BZ,KAAK,CAACgB,QAAlC,GAA2C,GAA3C,GAA+ChB,KAAK,CAACiB,QAAjE;AACAd,IAAAA,IAAI;AACL,GALD;AAMD,CAfU,EAgBX,SAASe,gBAAT,CAA0Bf,IAA1B,EAAgC;AAC9BH,EAAAA,KAAK,CAACmB,QAAN,CAAe;AACb,eAAW,CADE;AAEb,eAAW,CAFE;AAGb,oBAAgB;AAHH,GAAf,EAIG,UAASX,GAAT,EAAcY,KAAd,EAAqB;AACtB,QAAIC,IAAI,GAAGD,KAAK,CAAC,CAAD,CAAhB;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,WAASU,IAAI,CAACC,GAAd,GAAkB,GAAlB,GAAsBD,IAAI,CAACE,GAA3B,GAA+B,KAA/B,GAAqCF,IAAI,CAACG,KAAtD,EAFsB,CAItB;;AACAH,IAAAA,IAAI,CAACG,KAAL,IAAc,GAAd;AACAH,IAAAA,IAAI,CAACI,YAAL,IAAqB,CAArB;AACAJ,IAAAA,IAAI,CAACK,OAAL,IAAgB,QAAhB;AACA1B,IAAAA,KAAK,CAAC2B,eAAN,CAAsBP,KAAtB,EARsB,CAQQ;;AAE9BjB,IAAAA,IAAI;AACL,GAfD;AAgBD,CAjCU,EAkCX,SAASyB,cAAT,CAAwBzB,IAAxB,EAA8B;AAC5BJ,EAAAA,GAAG,CAAC8B,YAAJ,CAAiB;AACfjB,IAAAA,KAAK,EAAE;AADQ,GAAjB,EAEG,UAASJ,GAAT,EAAcR,KAAd,EAAqB;AAEtB;AACAA,IAAAA,KAAK,CAAC8B,QAAN,CAAe,WAAf,EAHsB,CAGO;AAE7B;;AACA9B,IAAAA,KAAK,CAAC+B,MAAN,CAAa;AAACf,MAAAA,QAAQ,EAAE,EAAX;AAAeC,MAAAA,QAAQ,EAAE;AAAzB,KAAb,EANsB,CAMsB;;AAE5CjB,IAAAA,KAAK,CAACgC,YAAN,CAAmB,CAAC,MAAD,EAAS,KAAT,EAAgB,OAAhB,CAAnB,EARsB,CAQwB;AAE9C;;AACAhC,IAAAA,KAAK,CAACiC,GAAN,GAXsB,CAWT;;AAEb9B,IAAAA,IAAI;AACL,GAhBD;AAiBD,CApDU,CAAb,EAqDG,UAASK,GAAT,EAAa;AACZ,MAAIA,GAAJ,EAAU;AACRE,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAUH,GAAtB;AACD;AACJ,CAzDD","sourcesContent":["var GoogleSpreadsheet = require('google-spreadsheet');\r\nvar async = require('async');\r\n \r\n// spreadsheet key is the long id in the sheets URL\r\nvar doc = new GoogleSpreadsheet('1JbLq-KRysRSD6Xptw24p3I79takWfFwCTSY7nYbakPI');\r\nvar sheet;\r\n \r\nasync.series([\r\n  function setAuth(step) {\r\n    // see notes below for authentication instructions!\r\n    var creds = require('./ReactChart-a540fe85ca33.json');\r\n    // OR, if you cannot save the file locally (like on heroku)\r\n \r\n    doc.useServiceAccountAuth(creds, step);\r\n  },\r\n  function getInfoAndWorksheets(step) {\r\n    doc.getInfo(function(err, info) {\r\n      console.log('Loaded doc: '+info.title+' by '+info.author.email);\r\n      sheet = info.worksheets[0];\r\n      console.log('sheet 1: '+sheet.title+' '+sheet.rowCount+'x'+sheet.colCount);\r\n      step();\r\n    });\r\n  },\r\n  function workingWithCells(step) {\r\n    sheet.getCells({\r\n      'min-row': 1,\r\n      'max-row': 5,\r\n      'return-empty': true\r\n    }, function(err, cells) {\r\n      var cell = cells[0];\r\n      console.log('Cell R'+cell.row+'C'+cell.col+' = '+cell.value);\r\n \r\n      // cells have a value, numericValue, and formula\r\n      cell.value == '1'\r\n      cell.numericValue == 1;\r\n      cell.formula == '=ROW()';\r\n      sheet.bulkUpdateCells(cells); //async\r\n \r\n      step();\r\n    });\r\n  },\r\n  function managingSheets(step) {\r\n    doc.addWorksheet({\r\n      title: 'my new sheet'\r\n    }, function(err, sheet) {\r\n \r\n      // change a sheet's title\r\n      sheet.setTitle('new title'); //async\r\n \r\n      //resize a sheet\r\n      sheet.resize({rowCount: 50, colCount: 20}); //async\r\n \r\n      sheet.setHeaderRow(['name', 'age', 'phone']); //async\r\n \r\n      // removing a worksheet\r\n      sheet.del(); //async\r\n \r\n      step();\r\n    });\r\n  }\r\n], function(err){\r\n    if( err ) {\r\n      console.log('Error: '+err);\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}