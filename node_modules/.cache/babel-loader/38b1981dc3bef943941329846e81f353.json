{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Firebase Rules API\n *\n * Creates and manages rules that determine when a Firebase Rules-enabled\n * service should permit a request.\n *\n * @example\n * const google = require('googleapis');\n * const firebaserules = google.firebaserules('v1');\n *\n * @namespace firebaserules\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Firebaserules\n */\n\n\nfunction Firebaserules(options) {\n  var self = this;\n  self._options = options || {};\n  self.projects = {\n    /**\n     * firebaserules.projects.test\n     * @desc Test `Source` for syntactic and semantic correctness. Issues\n     * present, if any, will be returned to the caller with a description,\n     * severity, and source location.  The test method may be executed with\n     * `Source` or a `Ruleset` name. Passing `Source` is useful for unit testing\n     * new rules. Passing a `Ruleset` name is useful for regression testing an\n     * existing rule.  The following is an example of `Source` that permits\n     * users to upload images to a bucket bearing their user id and matching the\n     * correct metadata:  _*Example*_      // Users are allowed to subscribe and\n     * unsubscribe to the blog.     service firebase.storage {       match\n     * /users/{userId}/images/{imageName} {           allow write: if userId ==\n     * request.auth.uid               && (imageName.matches('*.png$')\n     * || imageName.matches('*.jpg$'))               &&\n     * resource.mimeType.matches('^image/')       }     }\n     * @alias firebaserules.projects.test\n     * @memberOf! firebaserules(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.name Tests may either provide `source` or a `Ruleset` resource name.  For tests against `source`, the resource name must refer to the project: Format: `projects/{project_id}`  For tests against a `Ruleset`, this must be the `Ruleset` resource name: Format: `projects/{project_id}/rulesets/{ruleset_id}`\n     * @param {firebaserules(v1).TestRulesetRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    test: function test(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://firebaserules.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{name}:test').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    releases: {\n      /**\n       * firebaserules.projects.releases.create\n       * @desc Create a `Release`.  Release names should reflect the developer's\n       * deployment practices. For example, the release name may include the\n       * environment name, application name, application version, or any other\n       * name meaningful to the developer. Once a `Release` refers to a\n       * `Ruleset`, the rules can be enforced by Firebase Rules-enabled\n       * services.  More than one `Release` may be 'live' concurrently. Consider\n       * the following three `Release` names for `projects/foo` and the\n       * `Ruleset` to which they refer.  Release Name                    |\n       * Ruleset Name --------------------------------|-------------\n       * projects/foo/releases/prod      | projects/foo/rulesets/uuid123\n       * projects/foo/releases/prod/beta | projects/foo/rulesets/uuid123\n       * projects/foo/releases/prod/v23  | projects/foo/rulesets/uuid456  The\n       * table reflects the `Ruleset` rollout in progress. The `prod` and\n       * `prod/beta` releases refer to the same `Ruleset`. However, `prod/v23`\n       * refers to a new `Ruleset`. The `Ruleset` reference for a `Release` may\n       * be updated using the UpdateRelease method.\n       * @alias firebaserules.projects.releases.create\n       * @memberOf! firebaserules(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.name Resource name for the project which owns this `Release`.  Format: `projects/{project_id}`\n       * @param {firebaserules(v1).Release} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://firebaserules.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}/releases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://firebaserules.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://firebaserules.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      getExecutable: function getExecutable(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://firebaserules.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}:getExecutable').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://firebaserules.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}/releases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      patch: function patch(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://firebaserules.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    rulesets: {\n      /**\n       * firebaserules.projects.rulesets.create\n       * @desc Create a `Ruleset` from `Source`.  The `Ruleset` is given a\n       * unique generated name which is returned to the caller. `Source`\n       * containing syntactic or semantics errors will result in an error\n       * response indicating the first error encountered. For a detailed view of\n       * `Source` issues, use TestRuleset.\n       * @alias firebaserules.projects.rulesets.create\n       * @memberOf! firebaserules(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.name Resource name for Project which owns this `Ruleset`.  Format: `projects/{project_id}`\n       * @param {firebaserules(v1).Ruleset} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://firebaserules.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}/rulesets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://firebaserules.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://firebaserules.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://firebaserules.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}/rulesets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\nmodule.exports = Firebaserules;","map":null,"metadata":{},"sourceType":"script"}