{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Cloud Resource Manager API\n *\n * The Google Cloud Resource Manager API provides methods for creating, reading,\n * and updating project metadata.\n *\n * @example\n * const google = require('googleapis');\n * const cloudresourcemanager = google.cloudresourcemanager('v2beta1');\n *\n * @namespace cloudresourcemanager\n * @type {Function}\n * @version v2beta1\n * @variation v2beta1\n * @param {object=} options Options for Cloudresourcemanager\n */\n\n\nfunction Cloudresourcemanager(options) {\n  var self = this;\n  self._options = options || {};\n  self.folders = {\n    /**\n     * cloudresourcemanager.folders.create\n     * @desc Creates a Folder in the resource hierarchy. Returns an Operation\n     * which can be used to track the progress of the folder creation workflow.\n     * Upon success the Operation.response field will be populated with the\n     * created Folder.  In order to succeed, the addition of this new Folder\n     * must not violate the Folder naming, height or fanout constraints.  + The\n     * Folder's display_name must be distinct from all other Folder's that share\n     * its parent. + The addition of the Folder must not cause the active Folder\n     * hierarchy to exceed a height of 4. Note, the full active + deleted Folder\n     * hierarchy is allowed to reach a height of 8; this provides additional\n     * headroom when moving folders that contain deleted folders. + The addition\n     * of the Folder must not cause the total number of Folders under its parent\n     * to exceed 100.  If the operation fails due to a folder constraint\n     * violation, a PreconditionFailure explaining the violation will be\n     * returned. If the failure occurs synchronously then the\n     * PreconditionFailure will be returned via the Status.details field and if\n     * it occurs asynchronously then the PreconditionFailure will be returned\n     * via the the Operation.error field.  The caller must have\n     * `resourcemanager.folders.create` permission on the identified parent.\n     * @alias cloudresourcemanager.folders.create\n     * @memberOf! cloudresourcemanager(v2beta1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.parent The resource name of the new Folder's parent. Must be of the form `folders/{folder_id}` or `organizations/{org_id}`.\n     * @param {cloudresourcemanager(v2beta1).Folder} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudresourcemanager.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/folders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudresourcemanager.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudresourcemanager.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    getIamPolicy: function getIamPolicy(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudresourcemanager.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudresourcemanager.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/folders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    move: function move(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudresourcemanager.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{name}:move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    patch: function patch(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudresourcemanager.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    search: function search(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudresourcemanager.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/folders:search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    setIamPolicy: function setIamPolicy(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudresourcemanager.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    testIamPermissions: function testIamPermissions(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudresourcemanager.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    undelete: function undelete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudresourcemanager.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{name}:undelete').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Cloudresourcemanager;","map":null,"metadata":{},"sourceType":"script"}