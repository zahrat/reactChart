{"ast":null,"code":"\"use strict\"; // Copyright 2014-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar google_auth_library_1 = require(\"google-auth-library\");\n\nvar qs = require(\"qs\");\n\nvar stream = require(\"stream\");\n\nvar parseString = require(\"string-template\");\n\nvar uuid = require(\"uuid\");\n\nvar maxContentLength = Math.pow(2, 31);\n\nfunction isReadableStream(obj) {\n  return obj instanceof stream.Readable && typeof obj._read === 'function';\n}\n\nfunction createCallback(callback) {\n  return typeof callback === 'function' ? callback : function (err) {\n    if (err) {\n      console.error(err);\n    }\n  };\n}\n\nfunction getMissingParams(params, required) {\n  var missing = new Array();\n  required.forEach(function (param) {\n    // Is the required param in the params object?\n    if (params[param] === undefined) {\n      missing.push(param);\n    }\n  }); // If there are any required params missing, return their names in array,\n  // otherwise return null\n\n  return missing.length > 0 ? missing : null;\n}\n/**\n * Create and send request to Google API\n * @param parameters Parameters used to form request\n * @param callback   Callback when request finished or error found\n */\n\n\nfunction createAPIRequest(parameters, callback) {\n  var params = parameters.params;\n  var options = Object.assign({}, parameters.options); // If the params are not present, and callback was passed instead,\n  // use params as the callback and create empty params.\n\n  if (typeof params === 'function') {\n    callback = params;\n    params = {};\n  } // Create a new params object so it can no longer be modified from outside\n  // code Also support global and per-client params, but allow them to be\n  // overriden per-request\n\n\n  params = Object.assign({}, // New base object\n  parameters.context.google._options.params, // Global params\n  parameters.context._options.params, // Per-client params\n  params // API call params\n  );\n  var media = params.media || {};\n  var resource = params.resource;\n  var authClient = params.auth || parameters.context._options.auth || parameters.context.google._options.auth;\n  var defaultMime = typeof media.body === 'string' ? 'text/plain' : 'application/octet-stream';\n  delete params.media;\n  delete params.resource;\n  delete params.auth; // Grab headers from user provided options\n\n  var headers = params.headers || {};\n  delete params.headers; // Un-alias parameters that were modified due to conflicts with reserved names\n\n  Object.keys(params).forEach(function (key) {\n    if (key.slice(-1) === '_') {\n      var newKey = key.slice(0, -1);\n      params[newKey] = params[key];\n      delete params[key];\n    }\n  }); // Normalize callback\n\n  callback = createCallback(callback); // Check for missing required parameters in the API request\n\n  var missingParams = getMissingParams(params, parameters.requiredParams);\n\n  if (missingParams) {\n    // Some params are missing - stop further operations and inform the\n    // developer which required params are not included in the request\n    return callback(new Error('Missing required parameters: ' + missingParams.join(', ')));\n  } // Parse urls\n\n\n  if (options.url) {\n    options.url = parseString(options.url, params);\n  }\n\n  if (parameters.mediaUrl) {\n    parameters.mediaUrl = parseString(parameters.mediaUrl, params);\n  } // When forming the querystring, override the serializer so that array\n  // values are serialized like this:\n  // myParams: ['one', 'two'] ---> 'myParams=one&myParams=two'\n  // This serializer also encodes spaces in the querystring as `%20`,\n  // whereas the default serializer in axios encodes to a `+`.\n\n\n  options.paramsSerializer = function (params) {\n    return qs.stringify(params, {\n      arrayFormat: 'repeat'\n    });\n  }; // delete path parameters from the params object so they do not end up in\n  // query\n\n\n  parameters.pathParams.forEach(function (param) {\n    delete params[param];\n  }); // if authClient is actually a string, use it as an API KEY\n\n  if (typeof authClient === 'string') {\n    params.key = params.key || authClient;\n    authClient = undefined;\n  }\n\n  if (parameters.mediaUrl && media.body) {\n    options.url = parameters.mediaUrl;\n\n    if (resource) {\n      // Axios doesn't support multipart/related uploads, so it has to\n      // be implemented here.\n      params.uploadType = 'multipart';\n      var multipart = [{\n        'Content-Type': 'application/json',\n        body: JSON.stringify(resource)\n      }, {\n        'Content-Type': media.mimeType || resource && resource.mimeType || defaultMime,\n        body: media.body // can be a readable stream or raw string!\n\n      }];\n      var boundary = uuid.v4();\n      var finale_1 = \"--\" + boundary + \"--\";\n      var rStream_1 = new stream.PassThrough();\n      var isStream = isReadableStream(multipart[1].body);\n      headers['Content-Type'] = \"multipart/related; boundary=\" + boundary;\n\n      for (var _i = 0, multipart_1 = multipart; _i < multipart_1.length; _i++) {\n        var part = multipart_1[_i];\n        var preamble = \"--\" + boundary + \"\\r\\nContent-Type: \" + part['Content-Type'] + \"\\r\\n\\r\\n\";\n        rStream_1.push(preamble);\n\n        if (typeof part.body === 'string') {\n          rStream_1.push(part.body);\n          rStream_1.push('\\r\\n');\n        } else {\n          part.body.pipe(rStream_1, {\n            end: false\n          });\n          part.body.on('end', function () {\n            rStream_1.push('\\r\\n');\n            rStream_1.push(finale_1);\n            rStream_1.push(null);\n          });\n        }\n      }\n\n      if (!isStream) {\n        rStream_1.push(finale_1);\n        rStream_1.push(null);\n      }\n\n      options.data = rStream_1;\n    } else {\n      params.uploadType = 'media';\n      Object.assign(headers, {\n        'Content-Type': media.mimeType || defaultMime\n      });\n      options.data = media.body;\n    }\n  } else {\n    options.data = resource || undefined;\n  }\n\n  options.headers = headers;\n  options.params = params; // We need to set a default content size, or the max defaults\n  // to 10MB.  Setting to 2GB by default.\n  // https://github.com/google/google-api-nodejs-client/issues/991\n\n  options.maxContentLength = options.maxContentLength || maxContentLength; // By default Axios treats any 2xx as valid, and all non 2xx status\n  // codes as errors.  This is a problem for HTTP 304s when used along\n  // with an eTag.\n\n  if (!options.validateStatus) {\n    options.validateStatus = function (status) {\n      return status >= 200 && status < 300 || status === 304;\n    };\n  } // Combine the AxiosRequestConfig options passed with this specific\n  // API call witht the global options configured at the API Context\n  // level, or at the global level.\n\n\n  var mergedOptions = Object.assign({}, parameters.context.google._options, parameters.context._options, options);\n  delete mergedOptions.auth; // is overridden by our auth code\n  // Perform the HTTP request.  NOTE: this function used to return a\n  // mikeal/request object. Since the transition to Axios, the method is\n  // now void.  This may be a source of confusion for users upgrading from\n  // version 24.0 -> 25.0 or up.\n\n  if (authClient && typeof authClient === 'object') {\n    authClient.request(mergedOptions, callback);\n  } else {\n    new google_auth_library_1.DefaultTransporter().request(mergedOptions, callback);\n  }\n}\n\nexports.createAPIRequest = createAPIRequest;","map":null,"metadata":{},"sourceType":"script"}