{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Stackdriver Trace API\n *\n * Sends application trace data to Stackdriver Trace for viewing. Trace data is\n * collected for all App Engine applications by default. Trace data from other\n * applications can be provided using this API.\n *\n * @example\n * const google = require('googleapis');\n * const cloudtrace = google.cloudtrace('v2');\n *\n * @namespace cloudtrace\n * @type {Function}\n * @version v2\n * @variation v2\n * @param {object=} options Options for Cloudtrace\n */\n\n\nfunction Cloudtrace(options) {\n  var self = this;\n  self._options = options || {};\n  self.projects = {\n    traces: {\n      /**\n       * cloudtrace.projects.traces.batchWrite\n       * @desc Sends new spans to new or existing traces. You cannot update\n       * existing spans.\n       * @alias cloudtrace.projects.traces.batchWrite\n       * @memberOf! cloudtrace(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.name Required. The name of the project where the spans belong. The format is `projects/[PROJECT_ID]`.\n       * @param {cloudtrace(v2).BatchWriteSpansRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      batchWrite: function batchWrite(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://cloudtrace.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{name}/traces:batchWrite').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      spans: {\n        /**\n         * cloudtrace.projects.traces.spans.createSpan\n         * @desc Creates a new span.\n         * @alias cloudtrace.projects.traces.spans.createSpan\n         * @memberOf! cloudtrace(v2)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.name The resource name of the span in the following format:      projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array.  [SPAN_ID] is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array.\n         * @param {cloudtrace(v2).Span} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        createSpan: function createSpan(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudtrace.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = Cloudtrace;","map":null,"metadata":{},"sourceType":"script"}