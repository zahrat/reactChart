{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google Cloud Functions API\n *\n * API for managing lightweight user-provided functions executed in response to\n * events.\n *\n * @example\n * const google = require('googleapis');\n * const cloudfunctions = google.cloudfunctions('v1');\n *\n * @namespace cloudfunctions\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Cloudfunctions\n */\n\n\nfunction Cloudfunctions(options) {\n  var self = this;\n  self._options = options || {};\n  self.operations = {\n    /**\n     * cloudfunctions.operations.get\n     * @desc Gets the latest state of a long-running operation.  Clients can use\n     * this method to poll the operation result at intervals as recommended by\n     * the API service.\n     * @alias cloudfunctions.operations.get\n     * @memberOf! cloudfunctions(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.name The name of the operation resource.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudfunctions.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudfunctions.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.projects = {\n    locations: {\n      /**\n       * cloudfunctions.projects.locations.list\n       * @desc Lists information about the supported locations for this service.\n       * @alias cloudfunctions.projects.locations.list\n       * @memberOf! cloudfunctions(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.filter The standard list filter.\n       * @param {string} params.name The resource that owns the locations collection, if applicable.\n       * @param {integer=} params.pageSize The standard list page size.\n       * @param {string=} params.pageToken The standard list page token.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://cloudfunctions.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      functions: {\n        /**\n         * cloudfunctions.projects.locations.functions.call\n         * @desc Invokes synchronously deployed function. To be used for\n         * testing, very limited traffic allowed.\n         * @alias cloudfunctions.projects.locations.functions.call\n         * @memberOf! cloudfunctions(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.name The name of the function to be called.\n         * @param {cloudfunctions(v1).CallFunctionRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        call: function call(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudfunctions.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{name}:call').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudfunctions.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{location}/functions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['location'],\n            pathParams: ['location'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudfunctions.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        generateDownloadUrl: function generateDownloadUrl(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudfunctions.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{name}:generateDownloadUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        generateUploadUrl: function generateUploadUrl(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudfunctions.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{parent}/functions:generateUploadUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudfunctions.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudfunctions.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{parent}/functions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        patch: function patch(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudfunctions.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = Cloudfunctions;","map":null,"metadata":{},"sourceType":"script"}