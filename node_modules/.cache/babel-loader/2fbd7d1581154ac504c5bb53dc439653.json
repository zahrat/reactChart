{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * AdSense Host API\n *\n * Generates performance reports, generates ad codes, and provides publisher\n * management capabilities for AdSense Hosts.\n *\n * @example\n * const google = require('googleapis');\n * const adsensehost = google.adsensehost('v4.1');\n *\n * @namespace adsensehost\n * @type {Function}\n * @version v4.1\n * @variation v4.1\n * @param {object=} options Options for Adsensehost\n */\n\n\nfunction Adsensehost(options) {\n  var self = this;\n  self._options = options || {};\n  self.accounts = {\n    /**\n     * adsensehost.accounts.get\n     * @desc Get information about the selected associated AdSense account.\n     * @alias adsensehost.accounts.get\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId Account to get information about.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsensehost/v4.1/accounts/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsensehost/v4.1/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['filterAdClientId'],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    adclients: {\n      /**\n       * adsensehost.accounts.adclients.get\n       * @desc Get information about one of the ad clients in the specified\n       * publisher's AdSense account.\n       * @alias adsensehost.accounts.adclients.get\n       * @memberOf! adsensehost(v4.1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account which contains the ad client.\n       * @param {string} params.adClientId Ad client to get.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId'],\n          pathParams: ['accountId', 'adClientId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsensehost/v4.1/accounts/{accountId}/adclients').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    adunits: {\n      /**\n       * adsensehost.accounts.adunits.delete\n       * @desc Delete the specified ad unit from the specified publisher AdSense\n       * account.\n       * @alias adsensehost.accounts.adunits.delete\n       * @memberOf! adsensehost(v4.1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account which contains the ad unit.\n       * @param {string} params.adClientId Ad client for which to get ad unit.\n       * @param {string} params.adUnitId Ad unit to delete.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n          pathParams: ['accountId', 'adClientId', 'adUnitId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n          pathParams: ['accountId', 'adClientId', 'adUnitId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      getAdCode: function getAdCode(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n          pathParams: ['accountId', 'adClientId', 'adUnitId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      insert: function insert(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId'],\n          pathParams: ['accountId', 'adClientId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId'],\n          pathParams: ['accountId', 'adClientId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      patch: function patch(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n          pathParams: ['accountId', 'adClientId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      update: function update(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId'],\n          pathParams: ['accountId', 'adClientId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    reports: {\n      /**\n       * adsensehost.accounts.reports.generate\n       * @desc Generate an AdSense report based on the report request sent in\n       * the query parameters. Returns the result as JSON; to retrieve output in\n       * CSV format specify \"alt=csv\" as a query parameter.\n       * @alias adsensehost.accounts.reports.generate\n       * @memberOf! adsensehost(v4.1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Hosted account upon which to report.\n       * @param {string=} params.dimension Dimensions to base the report on.\n       * @param {string} params.endDate End of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n       * @param {string=} params.filter Filters to be run on the report.\n       * @param {string=} params.locale Optional locale to use for translating report output to a local language. Defaults to \"en_US\" if not specified.\n       * @param {integer=} params.maxResults The maximum number of rows of report data to return.\n       * @param {string=} params.metric Numeric columns to include in the report.\n       * @param {string=} params.sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \"+\" to sort ascending or \"-\" to sort descending. If no prefix is specified, the column is sorted ascending.\n       * @param {string} params.startDate Start of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n       * @param {integer=} params.startIndex Index of the first row of report data to return.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      generate: function generate(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsensehost/v4.1/accounts/{accountId}/reports').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'startDate', 'endDate'],\n          pathParams: ['accountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.adclients = {\n    /**\n     * adsensehost.adclients.get\n     * @desc Get information about one of the ad clients in the Host AdSense\n     * account.\n     * @alias adsensehost.adclients.get\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client to get.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsensehost/v4.1/adclients/{adClientId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsensehost/v4.1/adclients').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.associationsessions = {\n    /**\n     * adsensehost.associationsessions.start\n     * @desc Create an association session for initiating an association with an\n     * AdSense user.\n     * @alias adsensehost.associationsessions.start\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.productCode Products to associate with the user.\n     * @param {string=} params.userLocale The preferred locale of the user.\n     * @param {string=} params.websiteLocale The locale of the user's hosted website.\n     * @param {string} params.websiteUrl The URL of the user's hosted website.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    start: function start(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsensehost/v4.1/associationsessions/start').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['productCode', 'websiteUrl'],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    verify: function verify(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsensehost/v4.1/associationsessions/verify').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['token'],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.customchannels = {\n    /**\n     * adsensehost.customchannels.delete\n     * @desc Delete a specific custom channel from the host AdSense account.\n     * @alias adsensehost.customchannels.delete\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client from which to delete the custom channel.\n     * @param {string} params.customChannelId Custom channel to delete.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsensehost/v4.1/adclients/{adClientId}/customchannels/{customChannelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId', 'customChannelId'],\n        pathParams: ['adClientId', 'customChannelId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsensehost/v4.1/adclients/{adClientId}/customchannels/{customChannelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId', 'customChannelId'],\n        pathParams: ['adClientId', 'customChannelId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    insert: function insert(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsensehost/v4.1/adclients/{adClientId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsensehost/v4.1/adclients/{adClientId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    patch: function patch(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsensehost/v4.1/adclients/{adClientId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId', 'customChannelId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    update: function update(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsensehost/v4.1/adclients/{adClientId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.reports = {\n    /**\n     * adsensehost.reports.generate\n     * @desc Generate an AdSense report based on the report request sent in the\n     * query parameters. Returns the result as JSON; to retrieve output in CSV\n     * format specify \"alt=csv\" as a query parameter.\n     * @alias adsensehost.reports.generate\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.dimension Dimensions to base the report on.\n     * @param {string} params.endDate End of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n     * @param {string=} params.filter Filters to be run on the report.\n     * @param {string=} params.locale Optional locale to use for translating report output to a local language. Defaults to \"en_US\" if not specified.\n     * @param {integer=} params.maxResults The maximum number of rows of report data to return.\n     * @param {string=} params.metric Numeric columns to include in the report.\n     * @param {string=} params.sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \"+\" to sort ascending or \"-\" to sort descending. If no prefix is specified, the column is sorted ascending.\n     * @param {string} params.startDate Start of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n     * @param {integer=} params.startIndex Index of the first row of report data to return.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    generate: function generate(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsensehost/v4.1/reports').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['startDate', 'endDate'],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.urlchannels = {\n    /**\n     * adsensehost.urlchannels.delete\n     * @desc Delete a URL channel from the host AdSense account.\n     * @alias adsensehost.urlchannels.delete\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client from which to delete the URL channel.\n     * @param {string} params.urlChannelId URL channel to delete.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsensehost/v4.1/adclients/{adClientId}/urlchannels/{urlChannelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId', 'urlChannelId'],\n        pathParams: ['adClientId', 'urlChannelId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    insert: function insert(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsensehost/v4.1/adclients/{adClientId}/urlchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsensehost/v4.1/adclients/{adClientId}/urlchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Adsensehost;","map":null,"metadata":{},"sourceType":"script"}