{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\shilan\\\\Desktop\\\\chartTest\\\\reactcharts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shilan\\\\Desktop\\\\chartTest\\\\reactcharts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shilan\\\\Desktop\\\\chartTest\\\\reactcharts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shilan\\\\Desktop\\\\chartTest\\\\reactcharts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\shilan\\\\Desktop\\\\chartTest\\\\reactcharts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\shilan\\\\Desktop\\\\chartTest\\\\reactcharts\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this)); //create an array variable state for the data\n\n    _this.state = {\n      isLoading: true,\n      animals: [],\n      cities: []\n    };\n    return _this;\n  } //This will be called automatically when your page loads for the first time after the constructor\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //Publish the Google Spreadsheet to Web.\n      //You can find this id in the url when you share it.  \n      //It is between the ../spreadsheets/d/ + id + /edit?...\n      //https://docs.google.com/spreadsheets/d/1tLsrRTmQ0-D2aCYvYd6ZUQkhrh-XkIVKVb5ARYyxvM0/edit?usp=sharing\n      //https://docs.google.com/a/mvla.net/spreadsheets/d/1Hke5wPTdUFQ1R2GZod_Th7i1yY4_im2uwpuPf44gzQ0/edit?usp=sharing\n      var sheedID = '1tLsrRTmQ0-D2aCYvYd6ZUQkhrh-XkIVKVb5ARYyxvM0';\n      var url = 'https://spreadsheets.google.com/feeds/list/' + sheedID + '/od6/public/values?alt=json'; //Use fetch to get the spreadsheet data\n\n      fetch(url, {\n        mode: 'cors'\n      }).then(function (response) {\n        return response.json();\n      }).then(function (jsonData) {\n        //add the jsonData to the arrays of animals and cities\n        if (jsonData != null) {\n          for (var i = 0; i < jsonData.feed.entry.length; i++) {\n            //go through each row at a time\n            //You will need to know the name of the column\n            //Add data for animals column if it is not blank\n            //note! make sure to have the title be all lowered case gsx$animals \n            if (jsonData.feed.entry[i]['gsx$baseinvestments']['$t'] != '') {\n              _this2.state.animals.push(jsonData.feed.entry[i]['gsx$baseinvestments']['$t']);\n            } //Add data for cities column if it is not blank\n\n\n            if (jsonData.feed.entry[i]['gsx$1year']['$t'] != '') {\n              _this2.state.cities.push(jsonData.feed.entry[i]['gsx$1year']['$t']);\n            }\n          }\n        }\n\n        _this2.setState({\n          isLoading: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.isLoading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, \"//display loading if when the json data is processing loading\");\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"animals\", this.state.animals.map(function (item) {\n        return React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, item);\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), \"cities\", this.state.cities.map(function (item) {\n        return React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, item);\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\shilan\\Desktop\\chartTest\\reactcharts\\src\\App.js"],"names":["React","Component","render","App","state","isLoading","animals","cities","sheedID","url","fetch","mode","then","response","json","jsonData","i","feed","entry","length","push","setState","map","item"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,WAAvB;;IACMC,G;;;;;AACJ,iBAAc;AAAA;;AAAA;;AACZ,8EADY,CAGZ;;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,IADA;AAEXC,MAAAA,OAAO,EAAE,EAFE;AAGXC,MAAAA,MAAM,EAAE;AAHG,KAAb;AAJY;AASb,G,CAED;;;;;wCACoB;AAAA;;AAElB;AACA;AACA;AACH;AACG;AAEA,UAAIC,OAAO,GAAG,8CAAd;AACA,UAAIC,GAAG,GAAG,gDAA8CD,OAA9C,GAAsD,6BAAhE,CATkB,CAWlB;;AACAE,MAAAA,KAAK,CAACD,GAAD,EAAK;AAACE,QAAAA,IAAI,EAAE;AAAP,OAAL,CAAL,CACGC,IADH,CACQ,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OADhB,EAEGF,IAFH,CAEQ,UAAAG,QAAQ,EAAI;AAEhB;AACA,YAAIA,QAAQ,IAAI,IAAhB,EAAqB;AACnB,eAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGD,QAAQ,CAACE,IAAT,CAAcC,KAAd,CAAoBC,MAArC,EAA6CH,CAAC,EAA9C,EAAiD;AAC/C;AACA;AAEA;AACA;AACA,gBAAID,QAAQ,CAACE,IAAT,CAAcC,KAAd,CAAoBF,CAApB,EAAuB,qBAAvB,EAA8C,IAA9C,KAAuD,EAA3D,EAA+D;AAC7D,cAAA,MAAI,CAACZ,KAAL,CAAWE,OAAX,CAAmBc,IAAnB,CAAwBL,QAAQ,CAACE,IAAT,CAAcC,KAAd,CAAoBF,CAApB,EAAuB,qBAAvB,EAA8C,IAA9C,CAAxB;AACD,aAR8C,CAU/C;;;AACA,gBAAID,QAAQ,CAACE,IAAT,CAAcC,KAAd,CAAoBF,CAApB,EAAuB,WAAvB,EAAoC,IAApC,KAA6C,EAAjD,EAAqD;AACnD,cAAA,MAAI,CAACZ,KAAL,CAAWG,MAAX,CAAkBa,IAAlB,CAAuBL,QAAQ,CAACE,IAAT,CAAcC,KAAd,CAAoBF,CAApB,EAAuB,WAAvB,EAAoC,IAApC,CAAvB;AACD;AACF;AACF;;AAED,QAAA,MAAI,CAACK,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAE;AAAb,SAAd;AAED,OAzBH;AA2BD;;;6BAGQ;AAEP,UAAI,KAAKD,KAAL,CAAWC,SAAf,EAA0B;AACxB,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EADF;AAMD;;AACD,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGI,KAAKD,KAAL,CAAWE,OAAX,CAAmBgB,GAAnB,CAAwB,UAACC,IAAD;AAAA,eAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,IAAL,CAAV;AAAA,OAAxB,CAHJ,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,YAMI,KAAKnB,KAAL,CAAWG,MAAX,CAAkBe,GAAlB,CAAuB,UAACC,IAAD;AAAA,eAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,IAAL,CAAV;AAAA,OAAvB,CANJ,CADF;AAWD;;;;EA5EetB,S;;AA8ElB,eAAeE,GAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { render } from 'react-dom';\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    //create an array variable state for the data\r\n    this.state = {\r\n      isLoading: true,\r\n      animals: [],\r\n      cities: [],\r\n    };\r\n  }\r\n\r\n  //This will be called automatically when your page loads for the first time after the constructor\r\n  componentDidMount() {\r\n    \r\n    //Publish the Google Spreadsheet to Web.\r\n    //You can find this id in the url when you share it.  \r\n    //It is between the ../spreadsheets/d/ + id + /edit?...\r\n\t//https://docs.google.com/spreadsheets/d/1tLsrRTmQ0-D2aCYvYd6ZUQkhrh-XkIVKVb5ARYyxvM0/edit?usp=sharing\r\n    //https://docs.google.com/a/mvla.net/spreadsheets/d/1Hke5wPTdUFQ1R2GZod_Th7i1yY4_im2uwpuPf44gzQ0/edit?usp=sharing\r\n\r\n    var sheedID = '1tLsrRTmQ0-D2aCYvYd6ZUQkhrh-XkIVKVb5ARYyxvM0';\r\n    var url = 'https://spreadsheets.google.com/feeds/list/'+sheedID+'/od6/public/values?alt=json';\r\n\r\n    //Use fetch to get the spreadsheet data\r\n    fetch(url,{mode: 'cors'})\r\n      .then(response => response.json())\r\n      .then(jsonData => {\r\n        \r\n        //add the jsonData to the arrays of animals and cities\r\n        if( jsonData != null){\r\n          for(let i=0; i < jsonData.feed.entry.length; i++){\r\n            //go through each row at a time\r\n            //You will need to know the name of the column\r\n            \r\n            //Add data for animals column if it is not blank\r\n            //note! make sure to have the title be all lowered case gsx$animals \r\n            if( jsonData.feed.entry[i]['gsx$baseinvestments']['$t'] != '' ){\r\n              this.state.animals.push(jsonData.feed.entry[i]['gsx$baseinvestments']['$t'] );\r\n            }\r\n              \r\n            //Add data for cities column if it is not blank\r\n            if( jsonData.feed.entry[i]['gsx$1year']['$t'] != '' ){\r\n              this.state.cities.push(jsonData.feed.entry[i]['gsx$1year']['$t'] );\r\n            }\r\n          }\r\n        }\r\n\r\n        this.setState({ isLoading: false }) \r\n        \r\n      });\r\n  \r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <div>\r\n          //display loading if when the json data is processing\r\n          loading\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        \r\n        animals\r\n        { this.state.animals.map( (item) => <li>{item}</li> ) }\r\n        <br />\r\n        cities\r\n        { this.state.cities.map( (item) => <li>{item}</li> ) }\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}