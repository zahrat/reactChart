{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google Cloud Speech API\n *\n * Converts audio to text by applying powerful neural network models.\n *\n * @example\n * const google = require('googleapis');\n * const speech = google.speech('v1');\n *\n * @namespace speech\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Speech\n */\n\n\nfunction Speech(options) {\n  var self = this;\n  self._options = options || {};\n  self.operations = {\n    /**\n     * speech.operations.get\n     * @desc Gets the latest state of a long-running operation.  Clients can use\n     * this method to poll the operation result at intervals as recommended by\n     * the API service.\n     * @alias speech.operations.get\n     * @memberOf! speech(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.name The name of the operation resource.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://speech.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/operations/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.speech = {\n    /**\n     * speech.speech.longrunningrecognize\n     * @desc Performs asynchronous speech recognition: receive results via the\n     * google.longrunning.Operations interface. Returns either an\n     * `Operation.error` or an `Operation.response` which contains a\n     * `LongRunningRecognizeResponse` message.\n     * @alias speech.speech.longrunningrecognize\n     * @memberOf! speech(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {speech(v1).LongRunningRecognizeRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    longrunningrecognize: function longrunningrecognize(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://speech.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/speech:longrunningrecognize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    recognize: function recognize(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://speech.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/speech:recognize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Speech;","map":null,"metadata":{},"sourceType":"script"}