{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Ad Exchange Buyer API II\n *\n * Accesses the latest features for managing Ad Exchange accounts, Real-Time\n * Bidding configurations and auction metrics, and Marketplace programmatic\n * deals.\n *\n * @example\n * const google = require('googleapis');\n * const adexchangebuyer2 = google.adexchangebuyer2('v2beta1');\n *\n * @namespace adexchangebuyer2\n * @type {Function}\n * @version v2beta1\n * @variation v2beta1\n * @param {object=} options Options for Adexchangebuyer2\n */\n\n\nfunction Adexchangebuyer2(options) {\n  var self = this;\n  self._options = options || {};\n  self.accounts = {\n    clients: {\n      /**\n       * adexchangebuyer2.accounts.clients.create\n       * @desc Creates a new client buyer.\n       * @alias adexchangebuyer2.accounts.clients.create\n       * @memberOf! adexchangebuyer2(v2beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to create a client for. (required)\n       * @param {adexchangebuyer2(v2beta1).Client} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/accounts/{accountId}/clients').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'clientAccountId'],\n          pathParams: ['accountId', 'clientAccountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/accounts/{accountId}/clients').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      update: function update(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'clientAccountId'],\n          pathParams: ['accountId', 'clientAccountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      invitations: {\n        /**\n         * adexchangebuyer2.accounts.clients.invitations.create\n         * @desc Creates and sends out an email invitation to access an Ad\n         * Exchange client buyer account.\n         * @alias adexchangebuyer2.accounts.clients.invitations.create\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId Numerical account ID of the client's sponsor buyer. (required)\n         * @param {string} params.clientAccountId Numerical account ID of the client buyer that the user should be associated with. (required)\n         * @param {adexchangebuyer2(v2beta1).ClientUserInvitation} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'clientAccountId'],\n            pathParams: ['accountId', 'clientAccountId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations/{invitationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'clientAccountId', 'invitationId'],\n            pathParams: ['accountId', 'clientAccountId', 'invitationId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'clientAccountId'],\n            pathParams: ['accountId', 'clientAccountId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      users: {\n        /**\n         * adexchangebuyer2.accounts.clients.users.get\n         * @desc Retrieves an existing client user.\n         * @alias adexchangebuyer2.accounts.clients.users.get\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId Numerical account ID of the client's sponsor buyer. (required)\n         * @param {string} params.clientAccountId Numerical account ID of the client buyer that the user to be retrieved is associated with. (required)\n         * @param {string} params.userId Numerical identifier of the user to retrieve. (required)\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'clientAccountId', 'userId'],\n            pathParams: ['accountId', 'clientAccountId', 'userId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'clientAccountId'],\n            pathParams: ['accountId', 'clientAccountId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'clientAccountId', 'userId'],\n            pathParams: ['accountId', 'clientAccountId', 'userId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    },\n    creatives: {\n      /**\n       * adexchangebuyer2.accounts.creatives.create\n       * @desc Creates a creative.\n       * @alias adexchangebuyer2.accounts.creatives.create\n       * @memberOf! adexchangebuyer2(v2beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId The account that this creative belongs to. Can be used to filter the response of the creatives.list method.\n       * @param {string=} params.accountId1 The account the creative belongs to.\n       * @param {string=} params.duplicateIdMode Indicates if multiple creatives can share an ID or not. Default is NO_DUPLICATES (one ID per creative).\n       * @param {adexchangebuyer2(v2beta1).Creative} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'creativeId'],\n          pathParams: ['accountId', 'creativeId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      stopWatching: function stopWatching(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}:stopWatching').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'creativeId'],\n          pathParams: ['accountId', 'creativeId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      update: function update(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'creativeId'],\n          pathParams: ['accountId', 'creativeId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      watch: function watch(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}:watch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'creativeId'],\n          pathParams: ['accountId', 'creativeId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      dealAssociations: {\n        /**\n         * adexchangebuyer2.accounts.creatives.dealAssociations.add\n         * @desc Associate an existing deal with a creative.\n         * @alias adexchangebuyer2.accounts.creatives.dealAssociations.add\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId The account the creative belongs to.\n         * @param {string} params.creativeId The ID of the creative associated with the deal.\n         * @param {adexchangebuyer2(v2beta1).AddDealAssociationRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        add: function add(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:add').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'creativeId'],\n            pathParams: ['accountId', 'creativeId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'creativeId'],\n            pathParams: ['accountId', 'creativeId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        remove: function remove(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:remove').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'creativeId'],\n            pathParams: ['accountId', 'creativeId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    }\n  };\n  self.bidders = {\n    accounts: {\n      filterSets: {\n        /**\n         * adexchangebuyer2.bidders.accounts.filterSets.create\n         * @desc Creates the specified filter set for the account with\n         * the given account ID.\n         * @alias adexchangebuyer2.bidders.accounts.filterSets.create\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {boolean=} params.isTransient Whether the filter set is transient, or should be persisted indefinitely. By default, filter sets are not transient. If transient, it will be available for at least 1 hour after creation.\n         * @param {string} params.ownerName Name of the owner (bidder or account) of the filter set to be created. For example:  - For a bidder-level filter set for bidder 123: `bidders/123`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456`\n         * @param {adexchangebuyer2(v2beta1).FilterSet} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{ownerName}/filterSets').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['ownerName'],\n            pathParams: ['ownerName'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{ownerName}/filterSets').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['ownerName'],\n            pathParams: ['ownerName'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        bidMetrics: {\n          /**\n           * adexchangebuyer2.bidders.accounts.filterSets.bidMetrics.list\n           * @desc Lists all metrics that are measured in terms of\n           * number of bids.\n           * @alias\n           * adexchangebuyer2.bidders.accounts.filterSets.bidMetrics.list\n           * @memberOf! adexchangebuyer2(v2beta1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n           * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n           * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListBidMetricsResponse.nextPageToken returned from the previous call to the bidMetrics.list method.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{filterSetName}/bidMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['filterSetName'],\n              pathParams: ['filterSetName'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        },\n        bidResponseErrors: {\n          /**\n           * adexchangebuyer2.bidders.accounts.filterSets.bidResponseErrors.list\n           * @desc List all errors that occurred in bid responses, with\n           * the number of bid responses affected for each reason.\n           * @alias\n           * adexchangebuyer2.bidders.accounts.filterSets.bidResponseErrors.list\n           * @memberOf! adexchangebuyer2(v2beta1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n           * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n           * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListBidResponseErrorsResponse.nextPageToken returned from the previous call to the bidResponseErrors.list method.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{filterSetName}/bidResponseErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['filterSetName'],\n              pathParams: ['filterSetName'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        },\n        bidResponsesWithoutBids: {\n          /**\n           * adexchangebuyer2.bidders.accounts.filterSets.bidResponsesWithoutBids.list\n           * @desc List all reasons for which bid responses were\n           * considered to have no applicable bids, with the number of\n           * bid responses affected for each reason.\n           * @alias\n           * adexchangebuyer2.bidders.accounts.filterSets.bidResponsesWithoutBids.list\n           * @memberOf! adexchangebuyer2(v2beta1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n           * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n           * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListBidResponsesWithoutBidsResponse.nextPageToken returned from the previous call to the bidResponsesWithoutBids.list method.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{filterSetName}/bidResponsesWithoutBids').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['filterSetName'],\n              pathParams: ['filterSetName'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        },\n        filteredBidRequests: {\n          /**\n           * adexchangebuyer2.bidders.accounts.filterSets.filteredBidRequests.list\n           * @desc List all reasons that caused a bid request not to be\n           * sent for an impression, with the number of bid requests not\n           * sent for each reason.\n           * @alias\n           * adexchangebuyer2.bidders.accounts.filterSets.filteredBidRequests.list\n           * @memberOf! adexchangebuyer2(v2beta1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n           * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n           * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListFilteredBidRequestsResponse.nextPageToken returned from the previous call to the filteredBidRequests.list method.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{filterSetName}/filteredBidRequests').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['filterSetName'],\n              pathParams: ['filterSetName'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        },\n        filteredBids: {\n          /**\n           * adexchangebuyer2.bidders.accounts.filterSets.filteredBids.list\n           * @desc List all reasons for which bids were filtered, with\n           * the number of bids filtered for each reason.\n           * @alias\n           * adexchangebuyer2.bidders.accounts.filterSets.filteredBids.list\n           * @memberOf! adexchangebuyer2(v2beta1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n           * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n           * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListFilteredBidsResponse.nextPageToken returned from the previous call to the filteredBids.list method.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{filterSetName}/filteredBids').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['filterSetName'],\n              pathParams: ['filterSetName'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          creatives: {\n            /**\n             * adexchangebuyer2.bidders.accounts.filterSets.filteredBids.creatives.list\n             * @desc List all creatives associated with a specific\n             * reason for which bids were filtered, with the number of\n             * bids filtered for each creative.\n             * @alias\n             * adexchangebuyer2.bidders.accounts.filterSets.filteredBids.creatives.list\n             * @memberOf! adexchangebuyer2(v2beta1)\n             *\n             * @param {object} params Parameters for request\n             * @param {integer} params.creativeStatusId The ID of the creative status for which to retrieve a breakdown by creative. See [creative-status-codes](https://developers.google.com/ad-exchange/rtb/downloads/creative-status-codes).\n             * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n             * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n             * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListCreativeStatusBreakdownByCreativeResponse.nextPageToken returned from the previous call to the filteredBids.creatives.list method.\n             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n             * @param {callback} callback The callback that handles the response.\n             * @return {object} Request object\n             */\n            list: function list(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'GET'\n                }, options),\n                params: params,\n                requiredParams: ['filterSetName', 'creativeStatusId'],\n                pathParams: ['creativeStatusId', 'filterSetName'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            }\n          },\n          details: {\n            /**\n             * adexchangebuyer2.bidders.accounts.filterSets.filteredBids.details.list\n             * @desc List all details associated with a specific reason\n             * for which bids were filtered, with the number of bids\n             * filtered for each detail.\n             * @alias\n             * adexchangebuyer2.bidders.accounts.filterSets.filteredBids.details.list\n             * @memberOf! adexchangebuyer2(v2beta1)\n             *\n             * @param {object} params Parameters for request\n             * @param {integer} params.creativeStatusId The ID of the creative status for which to retrieve a breakdown by detail. See [creative-status-codes](https://developers.google.com/ad-exchange/rtb/downloads/creative-status-codes). Details are only available for statuses 10, 14, 15, 17, 18, 19, 86, and 87.\n             * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n             * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n             * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListCreativeStatusBreakdownByDetailResponse.nextPageToken returned from the previous call to the filteredBids.details.list method.\n             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n             * @param {callback} callback The callback that handles the response.\n             * @return {object} Request object\n             */\n            list: function list(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'GET'\n                }, options),\n                params: params,\n                requiredParams: ['filterSetName', 'creativeStatusId'],\n                pathParams: ['creativeStatusId', 'filterSetName'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            }\n          }\n        },\n        impressionMetrics: {\n          /**\n           * adexchangebuyer2.bidders.accounts.filterSets.impressionMetrics.list\n           * @desc Lists all metrics that are measured in terms of\n           * number of impressions.\n           * @alias\n           * adexchangebuyer2.bidders.accounts.filterSets.impressionMetrics.list\n           * @memberOf! adexchangebuyer2(v2beta1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n           * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n           * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListImpressionMetricsResponse.nextPageToken returned from the previous call to the impressionMetrics.list method.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{filterSetName}/impressionMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['filterSetName'],\n              pathParams: ['filterSetName'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        },\n        losingBids: {\n          /**\n           * adexchangebuyer2.bidders.accounts.filterSets.losingBids.list\n           * @desc List all reasons for which bids lost in the auction,\n           * with the number of bids that lost for each reason.\n           * @alias\n           * adexchangebuyer2.bidders.accounts.filterSets.losingBids.list\n           * @memberOf! adexchangebuyer2(v2beta1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n           * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n           * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListLosingBidsResponse.nextPageToken returned from the previous call to the losingBids.list method.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{filterSetName}/losingBids').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['filterSetName'],\n              pathParams: ['filterSetName'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        },\n        nonBillableWinningBids: {\n          /**\n           * adexchangebuyer2.bidders.accounts.filterSets.nonBillableWinningBids.list\n           * @desc List all reasons for which winning bids were not\n           * billable, with the number of bids not billed for each\n           * reason.\n           * @alias\n           * adexchangebuyer2.bidders.accounts.filterSets.nonBillableWinningBids.list\n           * @memberOf! adexchangebuyer2(v2beta1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n           * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n           * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListNonBillableWinningBidsResponse.nextPageToken returned from the previous call to the nonBillableWinningBids.list method.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{filterSetName}/nonBillableWinningBids').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['filterSetName'],\n              pathParams: ['filterSetName'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        }\n      }\n    },\n    filterSets: {\n      /**\n       * adexchangebuyer2.bidders.filterSets.create\n       * @desc Creates the specified filter set for the account with the given\n       * account ID.\n       * @alias adexchangebuyer2.bidders.filterSets.create\n       * @memberOf! adexchangebuyer2(v2beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {boolean=} params.isTransient Whether the filter set is transient, or should be persisted indefinitely. By default, filter sets are not transient. If transient, it will be available for at least 1 hour after creation.\n       * @param {string} params.ownerName Name of the owner (bidder or account) of the filter set to be created. For example:  - For a bidder-level filter set for bidder 123: `bidders/123`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456`\n       * @param {adexchangebuyer2(v2beta1).FilterSet} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/{ownerName}/filterSets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['ownerName'],\n          pathParams: ['ownerName'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/{ownerName}/filterSets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['ownerName'],\n          pathParams: ['ownerName'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      bidMetrics: {\n        /**\n         * adexchangebuyer2.bidders.filterSets.bidMetrics.list\n         * @desc Lists all metrics that are measured in terms of number of bids.\n         * @alias adexchangebuyer2.bidders.filterSets.bidMetrics.list\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n         * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n         * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListBidMetricsResponse.nextPageToken returned from the previous call to the bidMetrics.list method.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{filterSetName}/bidMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['filterSetName'],\n            pathParams: ['filterSetName'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      bidResponseErrors: {\n        /**\n         * adexchangebuyer2.bidders.filterSets.bidResponseErrors.list\n         * @desc List all errors that occurred in bid responses, with the number\n         * of bid responses affected for each reason.\n         * @alias adexchangebuyer2.bidders.filterSets.bidResponseErrors.list\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n         * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n         * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListBidResponseErrorsResponse.nextPageToken returned from the previous call to the bidResponseErrors.list method.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{filterSetName}/bidResponseErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['filterSetName'],\n            pathParams: ['filterSetName'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      bidResponsesWithoutBids: {\n        /**\n         * adexchangebuyer2.bidders.filterSets.bidResponsesWithoutBids.list\n         * @desc List all reasons for which bid responses were considered to\n         * have no applicable bids, with the number of bid responses affected\n         * for each reason.\n         * @alias\n         * adexchangebuyer2.bidders.filterSets.bidResponsesWithoutBids.list\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n         * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n         * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListBidResponsesWithoutBidsResponse.nextPageToken returned from the previous call to the bidResponsesWithoutBids.list method.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{filterSetName}/bidResponsesWithoutBids').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['filterSetName'],\n            pathParams: ['filterSetName'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      filteredBidRequests: {\n        /**\n         * adexchangebuyer2.bidders.filterSets.filteredBidRequests.list\n         * @desc List all reasons that caused a bid request not to be sent for\n         * an impression, with the number of bid requests not sent for each\n         * reason.\n         * @alias adexchangebuyer2.bidders.filterSets.filteredBidRequests.list\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n         * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n         * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListFilteredBidRequestsResponse.nextPageToken returned from the previous call to the filteredBidRequests.list method.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{filterSetName}/filteredBidRequests').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['filterSetName'],\n            pathParams: ['filterSetName'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      filteredBids: {\n        /**\n         * adexchangebuyer2.bidders.filterSets.filteredBids.list\n         * @desc List all reasons for which bids were filtered, with the number\n         * of bids filtered for each reason.\n         * @alias adexchangebuyer2.bidders.filterSets.filteredBids.list\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n         * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n         * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListFilteredBidsResponse.nextPageToken returned from the previous call to the filteredBids.list method.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{filterSetName}/filteredBids').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['filterSetName'],\n            pathParams: ['filterSetName'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        creatives: {\n          /**\n           * adexchangebuyer2.bidders.filterSets.filteredBids.creatives.list\n           * @desc List all creatives associated with a specific reason for\n           * which bids were filtered, with the number of bids filtered for each\n           * creative.\n           * @alias\n           * adexchangebuyer2.bidders.filterSets.filteredBids.creatives.list\n           * @memberOf! adexchangebuyer2(v2beta1)\n           *\n           * @param {object} params Parameters for request\n           * @param {integer} params.creativeStatusId The ID of the creative status for which to retrieve a breakdown by creative. See [creative-status-codes](https://developers.google.com/ad-exchange/rtb/downloads/creative-status-codes).\n           * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n           * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n           * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListCreativeStatusBreakdownByCreativeResponse.nextPageToken returned from the previous call to the filteredBids.creatives.list method.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['filterSetName', 'creativeStatusId'],\n              pathParams: ['creativeStatusId', 'filterSetName'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        },\n        details: {\n          /**\n           * adexchangebuyer2.bidders.filterSets.filteredBids.details.list\n           * @desc List all details associated with a specific reason for which\n           * bids were filtered, with the number of bids filtered for each\n           * detail.\n           * @alias\n           * adexchangebuyer2.bidders.filterSets.filteredBids.details.list\n           * @memberOf! adexchangebuyer2(v2beta1)\n           *\n           * @param {object} params Parameters for request\n           * @param {integer} params.creativeStatusId The ID of the creative status for which to retrieve a breakdown by detail. See [creative-status-codes](https://developers.google.com/ad-exchange/rtb/downloads/creative-status-codes). Details are only available for statuses 10, 14, 15, 17, 18, 19, 86, and 87.\n           * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n           * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n           * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListCreativeStatusBreakdownByDetailResponse.nextPageToken returned from the previous call to the filteredBids.details.list method.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['filterSetName', 'creativeStatusId'],\n              pathParams: ['creativeStatusId', 'filterSetName'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        }\n      },\n      impressionMetrics: {\n        /**\n         * adexchangebuyer2.bidders.filterSets.impressionMetrics.list\n         * @desc Lists all metrics that are measured in terms of number of\n         * impressions.\n         * @alias adexchangebuyer2.bidders.filterSets.impressionMetrics.list\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n         * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n         * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListImpressionMetricsResponse.nextPageToken returned from the previous call to the impressionMetrics.list method.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{filterSetName}/impressionMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['filterSetName'],\n            pathParams: ['filterSetName'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      losingBids: {\n        /**\n         * adexchangebuyer2.bidders.filterSets.losingBids.list\n         * @desc List all reasons for which bids lost in the auction, with the\n         * number of bids that lost for each reason.\n         * @alias adexchangebuyer2.bidders.filterSets.losingBids.list\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n         * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n         * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListLosingBidsResponse.nextPageToken returned from the previous call to the losingBids.list method.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{filterSetName}/losingBids').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['filterSetName'],\n            pathParams: ['filterSetName'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      nonBillableWinningBids: {\n        /**\n         * adexchangebuyer2.bidders.filterSets.nonBillableWinningBids.list\n         * @desc List all reasons for which winning bids were not billable, with\n         * the number of bids not billed for each reason.\n         * @alias\n         * adexchangebuyer2.bidders.filterSets.nonBillableWinningBids.list\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.filterSetName Name of the filter set that should be applied to the requested metrics. For example:  - For a bidder-level filter set for bidder 123:   `bidders/123/filterSets/abc`  - For an account-level filter set for the buyer account representing bidder   123: `bidders/123/accounts/123/filterSets/abc`  - For an account-level filter set for the child seat buyer account 456   whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`\n         * @param {integer=} params.pageSize Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.\n         * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListNonBillableWinningBidsResponse.nextPageToken returned from the previous call to the nonBillableWinningBids.list method.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{filterSetName}/nonBillableWinningBids').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['filterSetName'],\n            pathParams: ['filterSetName'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = Adexchangebuyer2;","map":null,"metadata":{},"sourceType":"script"}