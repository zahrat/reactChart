{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Street View Publish API\n *\n * Publishes 360 photos to Google Maps, along with position, orientation, and\n * connectivity metadata. Apps can offer an interface for positioning,\n * connecting, and uploading user-generated Street View images.\n *\n * @example\n * const google = require('googleapis');\n * const streetviewpublish = google.streetviewpublish('v1');\n *\n * @namespace streetviewpublish\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Streetviewpublish\n */\n\n\nfunction Streetviewpublish(options) {\n  var self = this;\n  self._options = options || {};\n  self.photo = {\n    /**\n     * streetviewpublish.photo.create\n     * @desc After the client finishes uploading the photo with the returned\n     * UploadRef, CreatePhoto publishes the uploaded Photo to Street View on\n     * Google Maps.  Currently, the only way to set heading, pitch, and roll in\n     * CreatePhoto is through the [Photo Sphere XMP\n     * metadata](https://developers.google.com/streetview/spherical-metadata) in\n     * the photo bytes. The `pose.heading`, `pose.pitch`, `pose.roll`,\n     * `pose.altitude`, and `pose.level` fields in Pose are ignored for\n     * CreatePhoto.  This method returns the following error codes:  *\n     * google.rpc.Code.INVALID_ARGUMENT if the request is malformed or if the\n     * uploaded photo is not a 360 photo. * google.rpc.Code.NOT_FOUND if the\n     * upload reference does not exist. * google.rpc.Code.RESOURCE_EXHAUSTED if\n     * the account has reached the storage limit.\n     * @alias streetviewpublish.photo.create\n     * @memberOf! streetviewpublish(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {streetviewpublish(v1).Photo} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://streetviewpublish.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/photo').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://streetviewpublish.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/photo/{photoId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['photoId'],\n        pathParams: ['photoId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://streetviewpublish.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/photo/{photoId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['photoId'],\n        pathParams: ['photoId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    startUpload: function startUpload(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://streetviewpublish.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/photo:startUpload').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    update: function update(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://streetviewpublish.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/photo/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.photos = {\n    /**\n     * streetviewpublish.photos.batchDelete\n     * @desc Deletes a list of Photos and their metadata.  Note that if\n     * BatchDeletePhotos fails, either critical fields are missing or there was\n     * an authentication error. Even if BatchDeletePhotos succeeds, there may\n     * have been failures for single photos in the batch. These failures will be\n     * specified in each PhotoResponse.status in\n     * BatchDeletePhotosResponse.results. See DeletePhoto for specific failures\n     * that can occur per photo.\n     * @alias streetviewpublish.photos.batchDelete\n     * @memberOf! streetviewpublish(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {streetviewpublish(v1).BatchDeletePhotosRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    batchDelete: function batchDelete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://streetviewpublish.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/photos:batchDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    batchGet: function batchGet(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://streetviewpublish.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/photos:batchGet').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    batchUpdate: function batchUpdate(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://streetviewpublish.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/photos:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://streetviewpublish.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/photos').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Streetviewpublish;","map":null,"metadata":{},"sourceType":"script"}