{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Storage Transfer API\n *\n * Transfers data from external data sources to a Google Cloud Storage bucket or\n * between Google Cloud Storage buckets.\n *\n * @example\n * const google = require('googleapis');\n * const storagetransfer = google.storagetransfer('v1');\n *\n * @namespace storagetransfer\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Storagetransfer\n */\n\n\nfunction Storagetransfer(options) {\n  var self = this;\n  self._options = options || {};\n  self.googleServiceAccounts = {\n    /**\n     * storagetransfer.googleServiceAccounts.get\n     * @desc Returns the Google service account that is used by Storage Transfer\n     * Service to access buckets in the project where transfers run or in other\n     * projects. Each Google service account is associated with one Google Cloud\n     * Platform Console project. Users should add this service account to the\n     * Google Cloud Storage bucket ACLs to grant access to Storage Transfer\n     * Service. This service account is created and owned by Storage Transfer\n     * Service and can only be used by Storage Transfer Service.\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Google Storage Transfer API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/storagetransfer\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var storagetransfer = google.storagetransfer('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The ID of the Google Cloud Platform Console project that the\n     * Google service\n     *     // account is associated with.\n     *     // Required.\n     *     projectId: 'my-project-id',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   storagetransfer.googleServiceAccounts.get(request, function(err,\n     * response) { if (err) { console.error(err); return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias storagetransfer.googleServiceAccounts.get\n     * @memberOf! storagetransfer(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.projectId The ID of the Google Cloud Platform Console project that the Google service account is associated with. Required.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://storagetransfer.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/googleServiceAccounts/{projectId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.transferJobs = {\n    /**\n     * storagetransfer.transferJobs.create\n     * @desc Creates a transfer job that runs periodically.\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Google Storage Transfer API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/storagetransfer\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var storagetransfer = google.storagetransfer('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   storagetransfer.transferJobs.create(request, function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias storagetransfer.transferJobs.create\n     * @memberOf! storagetransfer(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {storagetransfer(v1).TransferJob} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://storagetransfer.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/transferJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://storagetransfer.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{jobName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['jobName'],\n        pathParams: ['jobName'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://storagetransfer.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/transferJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    patch: function patch(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://storagetransfer.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{jobName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['jobName'],\n        pathParams: ['jobName'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.transferOperations = {\n    /**\n     * storagetransfer.transferOperations.cancel\n     * @desc Cancels a transfer. Use the get method to check whether the\n     * cancellation succeeded or whether the operation completed despite\n     * cancellation.\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Google Storage Transfer API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/storagetransfer\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var storagetransfer = google.storagetransfer('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The name of the operation resource to be cancelled.\n     *     name: 'transferOperations/my-transfer-operation',  // TODO: Update\n     * placeholder value.\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   storagetransfer.transferOperations.cancel(request, function(err) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias storagetransfer.transferOperations.cancel\n     * @memberOf! storagetransfer(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.name The name of the operation resource to be cancelled.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    cancel: function cancel(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://storagetransfer.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://storagetransfer.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://storagetransfer.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://storagetransfer.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    pause: function pause(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://storagetransfer.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{name}:pause').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    resume: function resume(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://storagetransfer.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{name}:resume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Storagetransfer;","map":null,"metadata":{},"sourceType":"script"}