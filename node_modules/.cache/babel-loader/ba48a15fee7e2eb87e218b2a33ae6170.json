{"ast":null,"code":"var GoogleSpreadsheet = require('google-spreadsheet');\n\nvar async = require('async'); // spreadsheet key is the long id in the sheets URL\n\n\nvar doc = new GoogleSpreadsheet('<spreadsheet key>');\nvar sheet;\nasync.series([function setAuth(step) {\n  // see notes below for authentication instructions!\n  var creds = require('./google-generated-creds.json'); // OR, if you cannot save the file locally (like on heroku)\n\n\n  var creds_json = {\n    client_email: 'yourserviceaccountemailhere@google.com',\n    private_key: 'your long private key stuff here'\n  };\n  doc.useServiceAccountAuth(creds, step);\n}, function getInfoAndWorksheets(step) {\n  doc.getInfo(function (err, info) {\n    console.log('Loaded doc: ' + info.title + ' by ' + info.author.email);\n    sheet = info.worksheets[0];\n    console.log('sheet 1: ' + sheet.title + ' ' + sheet.rowCount + 'x' + sheet.colCount);\n    step();\n  });\n}, function workingWithRows(step) {\n  // google provides some query options\n  sheet.getRows({\n    offset: 1,\n    limit: 20,\n    orderby: 'col2'\n  }, function (err, rows) {\n    console.log('Read ' + rows.length + ' rows'); // the row is an object with keys set by the column headers\n\n    rows[0].colname = 'new val';\n    rows[0].save(); // this is async\n    // deleting a row\n\n    rows[0].del(); // this is async\n\n    step();\n  });\n}, function workingWithCells(step) {\n  sheet.getCells({\n    'min-row': 1,\n    'max-row': 5,\n    'return-empty': true\n  }, function (err, cells) {\n    var cell = cells[0];\n    console.log('Cell R' + cell.row + 'C' + cell.col + ' = ' + cell.value); // cells have a value, numericValue, and formula\n\n    cell.value == '1';\n    cell.numericValue == 1;\n    cell.formula == '=ROW()'; // updating `value` is \"smart\" and generally handles things for you\n\n    cell.value = 123;\n    cell.value = '=A1+B2';\n    cell.save(); //async\n    // bulk updates make it easy to update many cells at once\n\n    cells[0].value = 1;\n    cells[1].value = 2;\n    cells[2].formula = '=A1+B1';\n    sheet.bulkUpdateCells(cells); //async\n\n    step();\n  });\n}, function managingSheets(step) {\n  doc.addWorksheet({\n    title: 'my new sheet'\n  }, function (err, sheet) {\n    // change a sheet's title\n    sheet.setTitle('new title'); //async\n    //resize a sheet\n\n    sheet.resize({\n      rowCount: 50,\n      colCount: 20\n    }); //async\n\n    sheet.setHeaderRow(['name', 'age', 'phone']); //async\n    // removing a worksheet\n\n    sheet.del(); //async\n\n    step();\n  });\n}], function (err) {\n  if (err) {\n    console.log('Error: ' + err);\n  }\n});","map":{"version":3,"sources":["C:\\Users\\shilan\\Desktop\\chartTest\\reactcharts\\src\\App.js"],"names":["GoogleSpreadsheet","require","async","doc","sheet","series","setAuth","step","creds","creds_json","client_email","private_key","useServiceAccountAuth","getInfoAndWorksheets","getInfo","err","info","console","log","title","author","email","worksheets","rowCount","colCount","workingWithRows","getRows","offset","limit","orderby","rows","length","colname","save","del","workingWithCells","getCells","cells","cell","row","col","value","numericValue","formula","bulkUpdateCells","managingSheets","addWorksheet","setTitle","resize","setHeaderRow"],"mappings":"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","sourcesContent":["var GoogleSpreadsheet = require('google-spreadsheet');\r\nvar async = require('async');\r\n \r\n// spreadsheet key is the long id in the sheets URL\r\nvar doc = new GoogleSpreadsheet('<spreadsheet key>');\r\nvar sheet;\r\n \r\nasync.series([\r\n  function setAuth(step) {\r\n    // see notes below for authentication instructions!\r\n    var creds = require('./google-generated-creds.json');\r\n    // OR, if you cannot save the file locally (like on heroku)\r\n    var creds_json = {\r\n      client_email: 'yourserviceaccountemailhere@google.com',\r\n      private_key: 'your long private key stuff here'\r\n    }\r\n \r\n    doc.useServiceAccountAuth(creds, step);\r\n  },\r\n  function getInfoAndWorksheets(step) {\r\n    doc.getInfo(function(err, info) {\r\n      console.log('Loaded doc: '+info.title+' by '+info.author.email);\r\n      sheet = info.worksheets[0];\r\n      console.log('sheet 1: '+sheet.title+' '+sheet.rowCount+'x'+sheet.colCount);\r\n      step();\r\n    });\r\n  },\r\n  function workingWithRows(step) {\r\n    // google provides some query options\r\n    sheet.getRows({\r\n      offset: 1,\r\n      limit: 20,\r\n      orderby: 'col2'\r\n    }, function( err, rows ){\r\n      console.log('Read '+rows.length+' rows');\r\n \r\n      // the row is an object with keys set by the column headers\r\n      rows[0].colname = 'new val';\r\n      rows[0].save(); // this is async\r\n \r\n      // deleting a row\r\n      rows[0].del();  // this is async\r\n \r\n      step();\r\n    });\r\n  },\r\n  function workingWithCells(step) {\r\n    sheet.getCells({\r\n      'min-row': 1,\r\n      'max-row': 5,\r\n      'return-empty': true\r\n    }, function(err, cells) {\r\n      var cell = cells[0];\r\n      console.log('Cell R'+cell.row+'C'+cell.col+' = '+cell.value);\r\n \r\n      // cells have a value, numericValue, and formula\r\n      cell.value == '1'\r\n      cell.numericValue == 1;\r\n      cell.formula == '=ROW()';\r\n \r\n      // updating `value` is \"smart\" and generally handles things for you\r\n      cell.value = 123;\r\n      cell.value = '=A1+B2'\r\n      cell.save(); //async\r\n \r\n      // bulk updates make it easy to update many cells at once\r\n      cells[0].value = 1;\r\n      cells[1].value = 2;\r\n      cells[2].formula = '=A1+B1';\r\n      sheet.bulkUpdateCells(cells); //async\r\n \r\n      step();\r\n    });\r\n  },\r\n  function managingSheets(step) {\r\n    doc.addWorksheet({\r\n      title: 'my new sheet'\r\n    }, function(err, sheet) {\r\n \r\n      // change a sheet's title\r\n      sheet.setTitle('new title'); //async\r\n \r\n      //resize a sheet\r\n      sheet.resize({rowCount: 50, colCount: 20}); //async\r\n \r\n      sheet.setHeaderRow(['name', 'age', 'phone']); //async\r\n \r\n      // removing a worksheet\r\n      sheet.del(); //async\r\n \r\n      step();\r\n    });\r\n  }\r\n], function(err){\r\n    if( err ) {\r\n      console.log('Error: '+err);\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}