{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Stackdriver Error Reporting API\n *\n * Groups and counts similar errors from cloud services and applications,\n * reports new errors, and provides access to error groups and their associated\n * errors.\n *\n * @example\n * const google = require('googleapis');\n * const clouderrorreporting = google.clouderrorreporting('v1beta1');\n *\n * @namespace clouderrorreporting\n * @type {Function}\n * @version v1beta1\n * @variation v1beta1\n * @param {object=} options Options for Clouderrorreporting\n */\n\n\nfunction Clouderrorreporting(options) {\n  var self = this;\n  self._options = options || {};\n  self.projects = {\n    /**\n     * clouderrorreporting.projects.deleteEvents\n     * @desc Deletes all error events of a given project.\n     * @alias clouderrorreporting.projects.deleteEvents\n     * @memberOf! clouderrorreporting(v1beta1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.projectName [Required] The resource name of the Google Cloud Platform project. Written as `projects/` plus the [Google Cloud Platform project ID](https://support.google.com/cloud/answer/6158840). Example: `projects/my-project-123`.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    deleteEvents: function deleteEvents(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://clouderrorreporting.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta1/{projectName}/events').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['projectName'],\n        pathParams: ['projectName'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    events: {\n      /**\n       * clouderrorreporting.projects.events.list\n       * @desc Lists the specified events.\n       * @alias clouderrorreporting.projects.events.list\n       * @memberOf! clouderrorreporting(v1beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.groupId [Required] The group for which events shall be returned.\n       * @param {integer=} params.pageSize [Optional] The maximum number of results to return per response.\n       * @param {string=} params.pageToken [Optional] A `next_page_token` provided by a previous response.\n       * @param {string} params.projectName [Required] The resource name of the Google Cloud Platform project. Written as `projects/` plus the [Google Cloud Platform project ID](https://support.google.com/cloud/answer/6158840). Example: `projects/my-project-123`.\n       * @param {string=} params.serviceFilter.resourceType [Optional] The exact value to match against [`ServiceContext.resource_type`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.resource_type).\n       * @param {string=} params.serviceFilter.service [Optional] The exact value to match against [`ServiceContext.service`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.service).\n       * @param {string=} params.serviceFilter.version [Optional] The exact value to match against [`ServiceContext.version`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.version).\n       * @param {string=} params.timeRange.period Restricts the query to the specified time range.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://clouderrorreporting.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{projectName}/events').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectName'],\n          pathParams: ['projectName'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      report: function report(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://clouderrorreporting.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{projectName}/events:report').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectName'],\n          pathParams: ['projectName'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    groups: {\n      /**\n       * clouderrorreporting.projects.groups.get\n       * @desc Get the specified group.\n       * @alias clouderrorreporting.projects.groups.get\n       * @memberOf! clouderrorreporting(v1beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.groupName [Required] The group resource name. Written as <code>projects/<var>projectID</var>/groups/<var>group_name</var></code>. Call <a href=\"/error-reporting/reference/rest/v1beta1/projects.groupStats/list\"> <code>groupStats.list</code></a> to return a list of groups belonging to this project.  Example: <code>projects/my-project-123/groups/my-group</code>\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://clouderrorreporting.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{groupName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['groupName'],\n          pathParams: ['groupName'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      update: function update(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://clouderrorreporting.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    groupStats: {\n      /**\n       * clouderrorreporting.projects.groupStats.list\n       * @desc Lists the specified groups.\n       * @alias clouderrorreporting.projects.groupStats.list\n       * @memberOf! clouderrorreporting(v1beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.alignment [Optional] The alignment of the timed counts to be returned. Default is `ALIGNMENT_EQUAL_AT_END`.\n       * @param {string=} params.alignmentTime [Optional] Time where the timed counts shall be aligned if rounded alignment is chosen. Default is 00:00 UTC.\n       * @param {string=} params.groupId [Optional] List all <code>ErrorGroupStats</code> with these IDs.\n       * @param {string=} params.order [Optional] The sort order in which the results are returned. Default is `COUNT_DESC`.\n       * @param {integer=} params.pageSize [Optional] The maximum number of results to return per response. Default is 20.\n       * @param {string=} params.pageToken [Optional] A `next_page_token` provided by a previous response. To view additional results, pass this token along with the identical query parameters as the first request.\n       * @param {string} params.projectName [Required] The resource name of the Google Cloud Platform project. Written as <code>projects/</code> plus the <a href=\"https://support.google.com/cloud/answer/6158840\">Google Cloud Platform project ID</a>.  Example: <code>projects/my-project-123</code>.\n       * @param {string=} params.serviceFilter.resourceType [Optional] The exact value to match against [`ServiceContext.resource_type`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.resource_type).\n       * @param {string=} params.serviceFilter.service [Optional] The exact value to match against [`ServiceContext.service`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.service).\n       * @param {string=} params.serviceFilter.version [Optional] The exact value to match against [`ServiceContext.version`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.version).\n       * @param {string=} params.timedCountDuration [Optional] The preferred duration for a single returned `TimedCount`. If not set, no timed counts are returned.\n       * @param {string=} params.timeRange.period Restricts the query to the specified time range.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://clouderrorreporting.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{projectName}/groupStats').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectName'],\n          pathParams: ['projectName'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\nmodule.exports = Clouderrorreporting;","map":null,"metadata":{},"sourceType":"script"}