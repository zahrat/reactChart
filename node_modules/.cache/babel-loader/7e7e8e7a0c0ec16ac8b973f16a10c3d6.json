{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google Safe Browsing API\n *\n * Enables client applications to check web resources (most commonly URLs)\n * against Google-generated lists of unsafe web resources.\n *\n * @example\n * const google = require('googleapis');\n * const safebrowsing = google.safebrowsing('v4');\n *\n * @namespace safebrowsing\n * @type {Function}\n * @version v4\n * @variation v4\n * @param {object=} options Options for Safebrowsing\n */\n\n\nfunction Safebrowsing(options) {\n  var self = this;\n  self._options = options || {};\n  self.encodedFullHashes = {\n    /**\n     * safebrowsing.encodedFullHashes.get\n     * @alias safebrowsing.encodedFullHashes.get\n     * @memberOf! safebrowsing(v4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.clientId A client ID that (hopefully) uniquely identifies the client implementation of the Safe Browsing API.\n     * @param {string=} params.clientVersion The version of the client implementation.\n     * @param {string} params.encodedRequest A serialized FindFullHashesRequest proto.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://safebrowsing.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/encodedFullHashes/{encodedRequest}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['encodedRequest'],\n        pathParams: ['encodedRequest'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.encodedUpdates = {\n    /**\n     * safebrowsing.encodedUpdates.get\n     * @alias safebrowsing.encodedUpdates.get\n     * @memberOf! safebrowsing(v4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.clientId A client ID that uniquely identifies the client implementation of the Safe Browsing API.\n     * @param {string=} params.clientVersion The version of the client implementation.\n     * @param {string} params.encodedRequest A serialized FetchThreatListUpdatesRequest proto.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://safebrowsing.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/encodedUpdates/{encodedRequest}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['encodedRequest'],\n        pathParams: ['encodedRequest'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.fullHashes = {\n    /**\n     * safebrowsing.fullHashes.find\n     * @desc Finds the full hashes that match the requested hash prefixes.\n     * @alias safebrowsing.fullHashes.find\n     * @memberOf! safebrowsing(v4)\n     *\n     * @param {object} params Parameters for request\n     * @param {safebrowsing(v4).FindFullHashesRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    find: function find(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://safebrowsing.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/fullHashes:find').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.threatHits = {\n    /**\n     * safebrowsing.threatHits.create\n     * @desc Reports a Safe Browsing threat list hit to Google. Only projects\n     * with TRUSTED_REPORTER visibility can use this method.\n     * @alias safebrowsing.threatHits.create\n     * @memberOf! safebrowsing(v4)\n     *\n     * @param {object} params Parameters for request\n     * @param {safebrowsing(v4).ThreatHit} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://safebrowsing.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/threatHits').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.threatLists = {\n    /**\n     * safebrowsing.threatLists.list\n     * @desc Lists the Safe Browsing threat lists available for download.\n     * @alias safebrowsing.threatLists.list\n     * @memberOf! safebrowsing(v4)\n     *\n     * @param {object} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://safebrowsing.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/threatLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.threatListUpdates = {\n    /**\n     * safebrowsing.threatListUpdates.fetch\n     * @desc Fetches the most recent threat list updates. A client can request\n     * updates for multiple lists at once.\n     * @alias safebrowsing.threatListUpdates.fetch\n     * @memberOf! safebrowsing(v4)\n     *\n     * @param {object} params Parameters for request\n     * @param {safebrowsing(v4).FetchThreatListUpdatesRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    fetch: function fetch(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://safebrowsing.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/threatListUpdates:fetch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.threatMatches = {\n    /**\n     * safebrowsing.threatMatches.find\n     * @desc Finds the threat entries that match the Safe Browsing lists.\n     * @alias safebrowsing.threatMatches.find\n     * @memberOf! safebrowsing(v4)\n     *\n     * @param {object} params Parameters for request\n     * @param {safebrowsing(v4).FindThreatMatchesRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    find: function find(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://safebrowsing.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/threatMatches:find').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Safebrowsing;","map":null,"metadata":{},"sourceType":"script"}