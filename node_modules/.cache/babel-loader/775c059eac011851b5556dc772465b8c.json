{"ast":null,"code":"/**\n * Copyright 2012 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar request = require('request'),\n    pkg = require('../package.json');\n/**\n * Default transporter constructor.\n * Wraps request and callback functions.\n */\n\n\nfunction DefaultTransporter() {}\n/**\n * Default user agent.\n */\n\n\nDefaultTransporter.prototype.USER_AGENT = 'google-api-nodejs-client/' + pkg.version;\n/**\n * Configures request options before making a request.\n * @param {object} opts Options to configure.\n * @return {object} Configured options.\n */\n\nDefaultTransporter.prototype.configure = function (opts) {\n  // set transporter user agent\n  opts.headers = opts.headers || {};\n\n  if (!opts.headers['User-Agent']) {\n    opts.headers['User-Agent'] = this.USER_AGENT;\n  } else if (opts.headers['User-Agent'].indexOf(this.USER_AGENT) === -1) {\n    opts.headers['User-Agent'] = opts.headers['User-Agent'] + ' ' + this.USER_AGENT;\n  }\n\n  return opts;\n};\n/**\n * Makes a request with given options and invokes callback.\n * @param {object} opts Options.\n * @param {Function=} opt_callback Optional callback.\n * @return {Request} Request object\n */\n\n\nDefaultTransporter.prototype.request = function (opts, opt_callback) {\n  opts = this.configure(opts);\n  return request(opts.uri || opts.url, opts, this.wrapCallback_(opt_callback));\n};\n/**\n * Wraps the response callback.\n * @param {Function=} opt_callback Optional callback.\n * @return {Function} Wrapped callback function.\n * @private\n */\n\n\nDefaultTransporter.prototype.wrapCallback_ = function (opt_callback) {\n  return function (err, res, body) {\n    if (err || !body) {\n      return opt_callback && opt_callback(err, body, res);\n    } // Only and only application/json responses should\n    // be decoded back to JSON, but there are cases API back-ends\n    // responds without proper content-type.\n\n\n    try {\n      body = JSON.parse(body);\n    } catch (err) {\n      /* no op */\n    }\n\n    if (body && body.error && res.statusCode !== 200) {\n      if (typeof body.error === 'string') {\n        err = new Error(body.error);\n        err.code = res.statusCode;\n      } else if (Array.isArray(body.error.errors)) {\n        err = new Error(body.error.errors.map(function (err) {\n          return err.message;\n        }).join('\\n'));\n        err.code = body.error.code;\n        err.errors = body.error.errors;\n      } else {\n        err = new Error(body.error.message);\n        err.code = body.error.code || res.statusCode;\n      }\n\n      body = null;\n    } else if (res.statusCode >= 500) {\n      // Consider all '500 responses' errors.\n      err = new Error(body);\n      err.code = res.statusCode;\n      body = null;\n    }\n\n    if (opt_callback) {\n      opt_callback(err, body, res);\n    }\n  };\n};\n/**\n * Exports DefaultTransporter.\n */\n\n\nmodule.exports = DefaultTransporter;","map":null,"metadata":{},"sourceType":"script"}