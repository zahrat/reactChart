{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Firebase Dynamic Links API\n *\n * Programmatically creates and manages Firebase Dynamic Links.\n *\n * @example\n * const google = require('googleapis');\n * const firebasedynamiclinks = google.firebasedynamiclinks('v1');\n *\n * @namespace firebasedynamiclinks\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Firebasedynamiclinks\n */\n\n\nfunction Firebasedynamiclinks(options) {\n  var self = this;\n  self._options = options || {};\n  self.shortLinks = {\n    /**\n     * firebasedynamiclinks.shortLinks.create\n     * @desc Creates a short Dynamic Link given either a valid long Dynamic Link\n     * or details such as Dynamic Link domain, Android and iOS app information.\n     * The created short Dynamic Link will not expire.  Repeated calls with the\n     * same long Dynamic Link or Dynamic Link information will produce the same\n     * short Dynamic Link.  The Dynamic Link domain in the request must be owned\n     * by requester's Firebase project.\n     * @alias firebasedynamiclinks.shortLinks.create\n     * @memberOf! firebasedynamiclinks(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {firebasedynamiclinks(v1).CreateShortDynamicLinkRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://firebasedynamiclinks-ipv6.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/shortLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.v1 = {\n    /**\n     * firebasedynamiclinks.getLinkStats\n     * @desc Fetches analytics stats of a short Dynamic Link for a given\n     * duration. Metrics include number of clicks, redirects, installs, app\n     * first opens, and app reopens.\n     * @alias firebasedynamiclinks.getLinkStats\n     * @memberOf! firebasedynamiclinks(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.durationDays The span of time requested in days.\n     * @param {string} params.dynamicLink Dynamic Link URL. e.g. https://abcd.app.goo.gl/wxyz\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getLinkStats: function getLinkStats(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://firebasedynamiclinks-ipv6.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{dynamicLink}/linkStats').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['dynamicLink'],\n        pathParams: ['dynamicLink'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    installAttribution: function installAttribution(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://firebasedynamiclinks-ipv6.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/installAttribution').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Firebasedynamiclinks;","map":null,"metadata":{},"sourceType":"script"}