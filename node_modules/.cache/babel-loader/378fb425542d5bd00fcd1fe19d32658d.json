{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Cloud Tasks API\n *\n * Manages the execution of large numbers of distributed requests. Cloud Tasks\n * is in Alpha.\n *\n * @example\n * const google = require('googleapis');\n * const cloudtasks = google.cloudtasks('v2beta2');\n *\n * @namespace cloudtasks\n * @type {Function}\n * @version v2beta2\n * @variation v2beta2\n * @param {object=} options Options for Cloudtasks\n */\n\n\nfunction Cloudtasks(options) {\n  var self = this;\n  self._options = options || {};\n  self.projects = {\n    locations: {\n      /**\n       * cloudtasks.projects.locations.get\n       * @desc Get information about a location.\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the Cloud Tasks API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/cloudtasks\n       * // 2. This sample uses Application Default Credentials for\n       * authentication.\n       * //    If not already done, install the gcloud CLI from\n       * //    https://cloud.google.com/sdk and run\n       * //    `gcloud beta auth application-default login`.\n       * //    For more information, see\n       * //\n       * https://developers.google.com/identity/protocols/application-default-credentials\n       * // 3. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var cloudTasks = google.cloudtasks('v2beta2');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // Resource name for the location.\n       *     name: 'projects/my-project/locations/my-location',  // TODO: Update\n       * placeholder value.\n       *\n       *     auth: authClient,\n       *   };\n       *\n       *   cloudTasks.projects.locations.get(request, function(err, response) {\n       *     if (err) {\n       *       console.error(err);\n       *       return;\n       *     }\n       *\n       *     // TODO: Change code below to process the `response` object:\n       *     console.log(JSON.stringify(response, null, 2));\n       *   });\n       * });\n       *\n       * function authorize(callback) {\n       *   google.auth.getApplicationDefault(function(err, authClient) {\n       *     if (err) {\n       *       console.error('authentication failed: ', err);\n       *       return;\n       *     }\n       *     if (authClient.createScopedRequired &&\n       * authClient.createScopedRequired()) { var scopes =\n       * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n       * authClient.createScoped(scopes);\n       *     }\n       *     callback(authClient);\n       *   });\n       * }\n       * @alias cloudtasks.projects.locations.get\n       * @memberOf! cloudtasks(v2beta2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.name Resource name for the location.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta2/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta2/{name}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      queues: {\n        /**\n         * cloudtasks.projects.locations.queues.create\n         * @desc Creates a queue.  Queues created with this method allow tasks\n         * to live for a maximum of 31 days. After a task is 31 days old, the\n         * task will be deleted regardless of whether it was dispatched or not.\n         * WARNING: Using this method may have unintended side effects if you\n         * are using an App Engine `queue.yaml` or `queue.xml` file to manage\n         * your queues. Read [Overview of Queue Management and\n         * queue.yaml](/cloud-tasks/docs/queue-yaml) before using this method.\n         * @example\n         * // BEFORE RUNNING:\n         * // ---------------\n         * // 1. If not already done, enable the Cloud Tasks API\n         * //    and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/cloudtasks\n         * // 2. This sample uses Application Default Credentials for\n         * authentication.\n         * //    If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk and run\n         * //    `gcloud beta auth application-default login`.\n         * //    For more information, see\n         * //\n         * https://developers.google.com/identity/protocols/application-default-credentials\n         * // 3. Install the Node.js client library by running\n         * //    `npm install googleapis --save`\n         *\n         * var google = require('googleapis');\n         * var cloudTasks = google.cloudtasks('v2beta2');\n         *\n         * authorize(function(authClient) {\n         *   var request = {\n         *     // Required.\n         *     // The location name in which the queue will be created.\n         *     // For example: `projects/PROJECT_ID/locations/LOCATION_ID`\n         *     // The list of allowed locations can be obtained by calling Cloud\n         *     // Tasks' implementation of\n         *     // google.cloud.location.Locations.ListLocations.\n         *     parent: 'projects/my-project/locations/my-location',  // TODO:\n         * Update placeholder value.\n         *\n         *     resource: {\n         *       // TODO: Add desired properties to the request body.\n         *     },\n         *\n         *     auth: authClient,\n         *   };\n         *\n         *   cloudTasks.projects.locations.queues.create(request, function(err,\n         * response) { if (err) { console.error(err); return;\n         *     }\n         *\n         *     // TODO: Change code below to process the `response` object:\n         *     console.log(JSON.stringify(response, null, 2));\n         *   });\n         * });\n         *\n         * function authorize(callback) {\n         *   google.auth.getApplicationDefault(function(err, authClient) {\n         *     if (err) {\n         *       console.error('authentication failed: ', err);\n         *       return;\n         *     }\n         *     if (authClient.createScopedRequired &&\n         * authClient.createScopedRequired()) { var scopes =\n         * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n         * authClient.createScoped(scopes);\n         *     }\n         *     callback(authClient);\n         *   });\n         * }\n         * @alias cloudtasks.projects.locations.queues.create\n         * @memberOf! cloudtasks(v2beta2)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.parent Required.  The location name in which the queue will be created. For example: `projects/PROJECT_ID/locations/LOCATION_ID`  The list of allowed locations can be obtained by calling Cloud Tasks' implementation of ListLocations.\n         * @param {cloudtasks(v2beta2).Queue} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta2/{parent}/queues').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta2/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta2/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        getIamPolicy: function getIamPolicy(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta2/{resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['resource'],\n            pathParams: ['resource'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta2/{parent}/queues').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        patch: function patch(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta2/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        pause: function pause(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta2/{name}:pause').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        purge: function purge(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta2/{name}:purge').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        resume: function resume(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta2/{name}:resume').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setIamPolicy: function setIamPolicy(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta2/{resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['resource'],\n            pathParams: ['resource'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        testIamPermissions: function testIamPermissions(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta2/{resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['resource'],\n            pathParams: ['resource'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        tasks: {\n          /**\n           * cloudtasks.projects.locations.queues.tasks.acknowledge\n           * @desc Acknowledges a pull task.  The worker, that is, the entity\n           * that leased this task must call this method to indicate that the\n           * work associated with the task has finished.  The worker must\n           * acknowledge a task within the lease_duration or the lease will\n           * expire and the task will become available to be leased again. After\n           * the task is acknowledged, it will not be returned by a later\n           * LeaseTasks, GetTask, or ListTasks.  To acknowledge multiple tasks\n           * at the same time, use [HTTP\n           * batching](/storage/docs/json_api/v1/how-tos/batch) or the batching\n           * documentation for your client library, for example\n           * https://developers.google.com/api-client-library/python/guide/batch.\n           * @example\n           * // BEFORE RUNNING:\n           * // ---------------\n           * // 1. If not already done, enable the Cloud Tasks API\n           * //    and check the quota for your project at\n           * //    https://console.developers.google.com/apis/api/cloudtasks\n           * // 2. This sample uses Application Default Credentials for\n           * authentication.\n           * //    If not already done, install the gcloud CLI from\n           * //    https://cloud.google.com/sdk and run\n           * //    `gcloud beta auth application-default login`.\n           * //    For more information, see\n           * //\n           * https://developers.google.com/identity/protocols/application-default-credentials\n           * // 3. Install the Node.js client library by running\n           * //    `npm install googleapis --save`\n           *\n           * var google = require('googleapis');\n           * var cloudTasks = google.cloudtasks('v2beta2');\n           *\n           * authorize(function(authClient) {\n           *   var request = {\n           *     // Required.\n           *     // The task name. For example:\n           *     //\n           * `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`\n           *     name:\n           * 'projects/my-project/locations/my-location/queues/my-queue/tasks/my-task',\n           * // TODO: Update placeholder value.\n           *\n           *     resource: {\n           *       // TODO: Add desired properties to the request body.\n           *     },\n           *\n           *     auth: authClient,\n           *   };\n           *\n           *   cloudTasks.projects.locations.queues.tasks.acknowledge(request,\n           * function(err) { if (err) { console.error(err); return;\n           *     }\n           *   });\n           * });\n           *\n           * function authorize(callback) {\n           *   google.auth.getApplicationDefault(function(err, authClient) {\n           *     if (err) {\n           *       console.error('authentication failed: ', err);\n           *       return;\n           *     }\n           *     if (authClient.createScopedRequired &&\n           * authClient.createScopedRequired()) { var scopes =\n           * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n           * authClient.createScoped(scopes);\n           *     }\n           *     callback(authClient);\n           *   });\n           * }\n           * @alias cloudtasks.projects.locations.queues.tasks.acknowledge\n           * @memberOf! cloudtasks(v2beta2)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.name Required.  The task name. For example: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`\n           * @param {cloudtasks(v2beta2).AcknowledgeTaskRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          acknowledge: function acknowledge(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta2/{name}:acknowledge').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          cancelLease: function cancelLease(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta2/{name}:cancelLease').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          create: function create(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta2/{parent}/tasks').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          delete: function _delete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta2/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          get: function get(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta2/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          lease: function lease(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta2/{parent}/tasks:lease').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta2/{parent}/tasks').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          renewLease: function renewLease(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta2/{name}:renewLease').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          run: function run(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://cloudtasks.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta2/{name}:run').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = Cloudtasks;","map":null,"metadata":{},"sourceType":"script"}