{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google App Engine Admin API\n *\n * The App Engine Admin API enables developers to provision and manage their App\n * Engine applications.\n *\n * @example\n * const google = require('googleapis');\n * const appengine = google.appengine('v1beta4');\n *\n * @namespace appengine\n * @type {Function}\n * @version v1beta4\n * @variation v1beta4\n * @param {object=} options Options for Appengine\n */\n\n\nfunction Appengine(options) {\n  var self = this;\n  self._options = options || {};\n  self.apps = {\n    /**\n     * appengine.apps.create\n     * @desc Creates an App Engine application for a Google Cloud Platform\n     * project. Required fields: id - The ID of the target Cloud Platform\n     * project. location - The region\n     * (https://cloud.google.com/appengine/docs/locations) where you want the\n     * App Engine application located.For more information about App Engine\n     * applications, see Managing Projects, Applications, and Billing\n     * (https://cloud.google.com/appengine/docs/python/console/).\n     * @alias appengine.apps.create\n     * @memberOf! appengine(v1beta4)\n     *\n     * @param {object} params Parameters for request\n     * @param {appengine(v1beta4).Application} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta4/apps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta4/apps/{appsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    patch: function patch(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta4/apps/{appsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    locations: {\n      /**\n       * appengine.apps.locations.get\n       * @desc Get information about a location.\n       * @alias appengine.apps.locations.get\n       * @memberOf! appengine(v1beta4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. Resource name for the location.\n       * @param {string} params.locationsId Part of `name`. See documentation of `appsId`.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta4/apps/{appsId}/locations/{locationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'locationsId'],\n          pathParams: ['appsId', 'locationsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta4/apps/{appsId}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    modules: {\n      /**\n       * appengine.apps.modules.delete\n       * @desc Deletes the specified module and all enclosed versions.\n       * @alias appengine.apps.modules.delete\n       * @memberOf! appengine(v1beta4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/modules/default.\n       * @param {string} params.modulesId Part of `name`. See documentation of `appsId`.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta4/apps/{appsId}/modules/{modulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'modulesId'],\n          pathParams: ['appsId', 'modulesId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta4/apps/{appsId}/modules/{modulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'modulesId'],\n          pathParams: ['appsId', 'modulesId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta4/apps/{appsId}/modules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      patch: function patch(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta4/apps/{appsId}/modules/{modulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'modulesId'],\n          pathParams: ['appsId', 'modulesId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      versions: {\n        /**\n         * appengine.apps.modules.versions.create\n         * @desc Deploys code and resource files to a new version.\n         * @alias appengine.apps.modules.versions.create\n         * @memberOf! appengine(v1beta4)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.appsId Part of `name`. Name of the resource to update. Example: apps/myapp/modules/default.\n         * @param {string} params.modulesId Part of `name`. See documentation of `appsId`.\n         * @param {appengine(v1beta4).Version} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta4/apps/{appsId}/modules/{modulesId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'modulesId'],\n            pathParams: ['appsId', 'modulesId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta4/apps/{appsId}/modules/{modulesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'modulesId', 'versionsId'],\n            pathParams: ['appsId', 'modulesId', 'versionsId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta4/apps/{appsId}/modules/{modulesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'modulesId', 'versionsId'],\n            pathParams: ['appsId', 'modulesId', 'versionsId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta4/apps/{appsId}/modules/{modulesId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'modulesId'],\n            pathParams: ['appsId', 'modulesId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        patch: function patch(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta4/apps/{appsId}/modules/{modulesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'modulesId', 'versionsId'],\n            pathParams: ['appsId', 'modulesId', 'versionsId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        instances: {\n          /**\n           * appengine.apps.modules.versions.instances.debug\n           * @desc Enables debugging on a VM instance. This allows you to use\n           * the SSH command to connect to the virtual machine where the\n           * instance lives. While in \"debug mode\", the instance continues to\n           * serve live traffic. You should delete the instance when you are\n           * done debugging and then allow the system to take over and determine\n           * if another instance should be started.Only applicable for instances\n           * in App Engine flexible environment.\n           * @alias appengine.apps.modules.versions.instances.debug\n           * @memberOf! appengine(v1beta4)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/modules/default/versions/v1/instances/instance-1.\n           * @param {string} params.instancesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.modulesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n           * @param {appengine(v1beta4).DebugInstanceRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          debug: function debug(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta4/apps/{appsId}/modules/{modulesId}/versions/{versionsId}/instances/{instancesId}:debug').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'modulesId', 'versionsId', 'instancesId'],\n              pathParams: ['appsId', 'instancesId', 'modulesId', 'versionsId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          delete: function _delete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta4/apps/{appsId}/modules/{modulesId}/versions/{versionsId}/instances/{instancesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'modulesId', 'versionsId', 'instancesId'],\n              pathParams: ['appsId', 'instancesId', 'modulesId', 'versionsId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          get: function get(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta4/apps/{appsId}/modules/{modulesId}/versions/{versionsId}/instances/{instancesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'modulesId', 'versionsId', 'instancesId'],\n              pathParams: ['appsId', 'instancesId', 'modulesId', 'versionsId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta4/apps/{appsId}/modules/{modulesId}/versions/{versionsId}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'modulesId', 'versionsId'],\n              pathParams: ['appsId', 'modulesId', 'versionsId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        }\n      }\n    },\n    operations: {\n      /**\n       * appengine.apps.operations.get\n       * @desc Gets the latest state of a long-running operation. Clients can\n       * use this method to poll the operation result at intervals as\n       * recommended by the API service.\n       * @alias appengine.apps.operations.get\n       * @memberOf! appengine(v1beta4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. The name of the operation resource.\n       * @param {string} params.operationsId Part of `name`. See documentation of `appsId`.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta4/apps/{appsId}/operations/{operationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'operationsId'],\n          pathParams: ['appsId', 'operationsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta4/apps/{appsId}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\nmodule.exports = Appengine;","map":null,"metadata":{},"sourceType":"script"}