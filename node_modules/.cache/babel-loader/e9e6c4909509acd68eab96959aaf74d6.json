{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google Cloud Pub/Sub API\n *\n * Provides reliable, many-to-many, asynchronous messaging between applications.\n *\n * @example\n * const google = require('googleapis');\n * const pubsub = google.pubsub('v1');\n *\n * @namespace pubsub\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Pubsub\n */\n\n\nfunction Pubsub(options) {\n  var self = this;\n  self._options = options || {};\n  self.projects = {\n    snapshots: {\n      /**\n       * pubsub.projects.snapshots.create\n       * @desc Creates a snapshot from the requested subscription. If the\n       * snapshot already exists, returns `ALREADY_EXISTS`. If the requested\n       * subscription doesn't exist, returns `NOT_FOUND`. If the backlog in the\n       * subscription is too old -- and the resulting snapshot would expire in\n       * less than 1 hour -- then `FAILED_PRECONDITION` is returned. See also\n       * the `Snapshot.expire_time` field.  If the name is not provided in the\n       * request, the server will assign a random name for this snapshot on the\n       * same project as the subscription, conforming to the [resource name\n       * format](https://cloud.google.com/pubsub/docs/overview#names). The\n       * generated name is populated in the returned Snapshot object. Note that\n       * for REST API requests, you must specify a name in the request.\n       * @alias pubsub.projects.snapshots.create\n       * @memberOf! pubsub(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.name Optional user-provided name for this snapshot. If the name is not provided in the request, the server will assign a random name for this snapshot on the same project as the subscription. Note that for REST API requests, you must specify a name. Format is `projects/{project}/snapshots/{snap}`.\n       * @param {pubsub(v1).CreateSnapshotRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['snapshot'],\n          pathParams: ['snapshot'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['snapshot'],\n          pathParams: ['snapshot'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      getIamPolicy: function getIamPolicy(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{project}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      patch: function patch(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      setIamPolicy: function setIamPolicy(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      testIamPermissions: function testIamPermissions(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    subscriptions: {\n      /**\n       * pubsub.projects.subscriptions.acknowledge\n       * @desc Acknowledges the messages associated with the `ack_ids` in the\n       * `AcknowledgeRequest`. The Pub/Sub system can remove the relevant\n       * messages from the subscription.  Acknowledging a message whose ack\n       * deadline has expired may succeed, but such a message may be redelivered\n       * later. Acknowledging a message more than once will not result in an\n       * error.\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the Google Cloud Pub/Sub API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/pubsub\n       * // 2. This sample uses Application Default Credentials for\n       * authentication.\n       * //    If not already done, install the gcloud CLI from\n       * //    https://cloud.google.com/sdk and run\n       * //    `gcloud beta auth application-default login`.\n       * //    For more information, see\n       * //\n       * https://developers.google.com/identity/protocols/application-default-credentials\n       * // 3. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var pubsub = google.pubsub('v1');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // The subscription whose message is being acknowledged.\n       *     // Format is `projects/{project}/subscriptions/{sub}`.\n       *     subscription: 'projects/my-project/subscriptions/my-subscription',\n       * // TODO: Update placeholder value.\n       *\n       *     resource: {\n       *       // TODO: Add desired properties to the request body.\n       *     },\n       *\n       *     auth: authClient,\n       *   };\n       *\n       *   pubsub.projects.subscriptions.acknowledge(request, function(err) {\n       *     if (err) {\n       *       console.error(err);\n       *       return;\n       *     }\n       *   });\n       * });\n       *\n       * function authorize(callback) {\n       *   google.auth.getApplicationDefault(function(err, authClient) {\n       *     if (err) {\n       *       console.error('authentication failed: ', err);\n       *       return;\n       *     }\n       *     if (authClient.createScopedRequired &&\n       * authClient.createScopedRequired()) { var scopes =\n       * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n       * authClient.createScoped(scopes);\n       *     }\n       *     callback(authClient);\n       *   });\n       * }\n       * @alias pubsub.projects.subscriptions.acknowledge\n       * @memberOf! pubsub(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.subscription The subscription whose message is being acknowledged. Format is `projects/{project}/subscriptions/{sub}`.\n       * @param {pubsub(v1).AcknowledgeRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      acknowledge: function acknowledge(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{subscription}:acknowledge').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['subscription'],\n          pathParams: ['subscription'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{subscription}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['subscription'],\n          pathParams: ['subscription'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{subscription}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['subscription'],\n          pathParams: ['subscription'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      getIamPolicy: function getIamPolicy(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{project}/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      modifyAckDeadline: function modifyAckDeadline(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{subscription}:modifyAckDeadline').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['subscription'],\n          pathParams: ['subscription'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      modifyPushConfig: function modifyPushConfig(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{subscription}:modifyPushConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['subscription'],\n          pathParams: ['subscription'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      patch: function patch(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      pull: function pull(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{subscription}:pull').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['subscription'],\n          pathParams: ['subscription'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      seek: function seek(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{subscription}:seek').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['subscription'],\n          pathParams: ['subscription'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      setIamPolicy: function setIamPolicy(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      testIamPermissions: function testIamPermissions(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    topics: {\n      /**\n       * pubsub.projects.topics.create\n       * @desc Creates the given topic with the given name.\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the Google Cloud Pub/Sub API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/pubsub\n       * // 2. This sample uses Application Default Credentials for\n       * authentication.\n       * //    If not already done, install the gcloud CLI from\n       * //    https://cloud.google.com/sdk and run\n       * //    `gcloud beta auth application-default login`.\n       * //    For more information, see\n       * //\n       * https://developers.google.com/identity/protocols/application-default-credentials\n       * // 3. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var pubsub = google.pubsub('v1');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // The name of the topic. It must have the format\n       *     // `\"projects/{project}/topics/{topic}\"`. `{topic}` must start with\n       * a letter,\n       *     // and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes\n       * (`-`),\n       *     // underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or\n       * percent\n       *     // signs (`%`). It must be between 3 and 255 characters in length,\n       * and it\n       *     // must not start with `\"goog\"`.\n       *     name: 'projects/my-project/topics/my-topic',  // TODO: Update\n       * placeholder value.\n       *\n       *     resource: {\n       *       // TODO: Add desired properties to the request body. All existing\n       * properties\n       *       // will be replaced.\n       *     },\n       *\n       *     auth: authClient,\n       *   };\n       *\n       *   pubsub.projects.topics.create(request, function(err, response) {\n       *     if (err) {\n       *       console.error(err);\n       *       return;\n       *     }\n       *\n       *     // TODO: Change code below to process the `response` object:\n       *     console.log(JSON.stringify(response, null, 2));\n       *   });\n       * });\n       *\n       * function authorize(callback) {\n       *   google.auth.getApplicationDefault(function(err, authClient) {\n       *     if (err) {\n       *       console.error('authentication failed: ', err);\n       *       return;\n       *     }\n       *     if (authClient.createScopedRequired &&\n       * authClient.createScopedRequired()) { var scopes =\n       * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n       * authClient.createScoped(scopes);\n       *     }\n       *     callback(authClient);\n       *   });\n       * }\n       * @alias pubsub.projects.topics.create\n       * @memberOf! pubsub(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.name The name of the topic. It must have the format `\"projects/{project}/topics/{topic}\"`. `{topic}` must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in length, and it must not start with `\"goog\"`.\n       * @param {pubsub(v1).Topic} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{topic}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['topic'],\n          pathParams: ['topic'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{topic}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['topic'],\n          pathParams: ['topic'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      getIamPolicy: function getIamPolicy(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{project}/topics').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      publish: function publish(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{topic}:publish').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['topic'],\n          pathParams: ['topic'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      setIamPolicy: function setIamPolicy(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      testIamPermissions: function testIamPermissions(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      snapshots: {\n        /**\n         * pubsub.projects.topics.snapshots.list\n         * @desc Lists the names of the snapshots on this topic.\n         * @alias pubsub.projects.topics.snapshots.list\n         * @memberOf! pubsub(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {integer=} params.pageSize Maximum number of snapshot names to return.\n         * @param {string=} params.pageToken The value returned by the last `ListTopicSnapshotsResponse`; indicates that this is a continuation of a prior `ListTopicSnapshots` call, and that the system should return the next page of data.\n         * @param {string} params.topic The name of the topic that snapshots are attached to. Format is `projects/{project}/topics/{topic}`.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{topic}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['topic'],\n            pathParams: ['topic'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      subscriptions: {\n        /**\n         * pubsub.projects.topics.subscriptions.list\n         * @desc Lists the names of the subscriptions on this topic.\n         * @example\n         * // BEFORE RUNNING:\n         * // ---------------\n         * // 1. If not already done, enable the Google Cloud Pub/Sub API\n         * //    and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/pubsub\n         * // 2. This sample uses Application Default Credentials for\n         * authentication.\n         * //    If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk and run\n         * //    `gcloud beta auth application-default login`.\n         * //    For more information, see\n         * //\n         * https://developers.google.com/identity/protocols/application-default-credentials\n         * // 3. Install the Node.js client library by running\n         * //    `npm install googleapis --save`\n         *\n         * var google = require('googleapis');\n         * var pubsub = google.pubsub('v1');\n         *\n         * authorize(function(authClient) {\n         *   var request = {\n         *     // The name of the topic that subscriptions are attached to.\n         *     // Format is `projects/{project}/topics/{topic}`.\n         *     topic: 'projects/my-project/topics/my-topic',  // TODO: Update\n         * placeholder value.\n         *\n         *     auth: authClient,\n         *   };\n         *\n         *   var handlePage = function(err, response) {\n         *     if (err) {\n         *       console.error(err);\n         *       return;\n         *     }\n         *\n         *     var subscriptionsPage = response['subscriptions'];\n         *     if (!subscriptionsPage) {\n         *       return;\n         *     }\n         *     for (var i = 0; i < subscriptionsPage.length; i++) {\n         *       // TODO: Change code below to process each resource in\n         * `subscriptionsPage`: console.log(JSON.stringify(subscriptionsPage[i],\n         * null, 2));\n         *     }\n         *\n         *     if (response.nextPageToken) {\n         *       request.pageToken = response.nextPageToken;\n         *       pubsub.projects.topics.subscriptions.list(request, handlePage);\n         *     }\n         *   };\n         *\n         *   pubsub.projects.topics.subscriptions.list(request, handlePage);\n         * });\n         *\n         * function authorize(callback) {\n         *   google.auth.getApplicationDefault(function(err, authClient) {\n         *     if (err) {\n         *       console.error('authentication failed: ', err);\n         *       return;\n         *     }\n         *     if (authClient.createScopedRequired &&\n         * authClient.createScopedRequired()) { var scopes =\n         * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n         * authClient.createScoped(scopes);\n         *     }\n         *     callback(authClient);\n         *   });\n         * }\n         * @alias pubsub.projects.topics.subscriptions.list\n         * @memberOf! pubsub(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {integer=} params.pageSize Maximum number of subscription names to return.\n         * @param {string=} params.pageToken The value returned by the last `ListTopicSubscriptionsResponse`; indicates that this is a continuation of a prior `ListTopicSubscriptions` call, and that the system should return the next page of data.\n         * @param {string} params.topic The name of the topic that subscriptions are attached to. Format is `projects/{project}/topics/{topic}`.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://pubsub.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{topic}/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['topic'],\n            pathParams: ['topic'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = Pubsub;","map":null,"metadata":{},"sourceType":"script"}