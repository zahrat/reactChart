{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nvar fs = require('fs');\n\nvar readline = require('readline');\n\nvar _require = require('googleapis'),\n    google = _require.google; // If modifying these scopes, delete token.json.\n\n\nvar SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly'];\nvar TOKEN_PATH = 'token.json'; // Load client secrets from a local file.\n\nfs.readFile('credentials.json', function (err, content) {\n  if (err) return console.log('Error loading client secret file:', err); // Authorize a client with credentials, then call the Google Sheets API.\n\n  authorize(JSON.parse(content), listMajors);\n});\n/**\n * Create an OAuth2 client with the given credentials, and then execute the\n * given callback function.\n * @param {Object} credentials The authorization client credentials.\n * @param {function} callback The callback to call with the authorized client.\n */\n\nfunction authorize(credentials, callback) {\n  var _credentials$installe = credentials.installed,\n      client_secret = _credentials$installe.client_secret,\n      client_id = _credentials$installe.client_id,\n      redirect_uris = _credentials$installe.redirect_uris;\n  var oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]); // Check if we have previously stored a token.\n\n  fs.readFile(TOKEN_PATH, function (err, token) {\n    if (err) return getNewToken(oAuth2Client, callback);\n    oAuth2Client.setCredentials(JSON.parse(token));\n    callback(oAuth2Client);\n  });\n}\n/**\n * Get and store new token after prompting for user authorization, and then\n * execute the given callback with the authorized OAuth2 client.\n * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.\n * @param {getEventsCallback} callback The callback for the authorized client.\n */\n\n\nfunction getNewToken(oAuth2Client, callback) {\n  var authUrl = oAuth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: SCOPES\n  });\n  console.log('Authorize this app by visiting this url:', authUrl);\n  var rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n  rl.question('Enter the code from that page here: ', function (code) {\n    rl.close();\n    oAuth2Client.getToken(code, function (err, token) {\n      if (err) return console.error('Error while trying to retrieve access token', err);\n      oAuth2Client.setCredentials(token); // Store the token to disk for later program executions\n\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), function (err) {\n        if (err) console.error(err);\n        console.log('Token stored to', TOKEN_PATH);\n      });\n      callback(oAuth2Client);\n    });\n  });\n}\n/**\n * Prints the names and majors of students in a sample spreadsheet:\n * @see https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit\n * @param {google.auth.OAuth2} auth The authenticated Google OAuth client.\n */\n\n\nfunction listMajors(auth) {\n  var sheets = google.sheets({\n    version: 'v4',\n    auth: auth\n  });\n  sheets.spreadsheets.values.get({\n    spreadsheetId: '1_u_UfUGhlIrmVgOJz5-kSzLO9-BsJtVa6z35QvJ_tmo',\n    range: 'Class Data!A2:E'\n  }, function (err, res) {\n    if (err) return console.log('The API returned an error: ' + err);\n    var rows = res.data.values;\n\n    if (rows.length) {\n      console.log('Name, Major:'); // Print columns A and E, which correspond to indices 0 and 4.\n\n      rows.map(function (row) {\n        console.log(\"\".concat(row[0], \", \").concat(row[4]));\n      });\n    } else {\n      console.log('No data found.');\n    }\n  });\n} //ReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();","map":{"version":3,"sources":["C:\\Users\\shilan\\Desktop\\chartTest\\reactcharts\\src\\index.js"],"names":["React","ReactDOM","App","serviceWorker","fs","require","readline","google","SCOPES","TOKEN_PATH","readFile","err","content","console","log","authorize","JSON","parse","listMajors","credentials","callback","installed","client_secret","client_id","redirect_uris","oAuth2Client","auth","OAuth2","token","getNewToken","setCredentials","authUrl","generateAuthUrl","access_type","scope","rl","createInterface","input","process","stdin","output","stdout","question","code","close","getToken","error","writeFile","stringify","sheets","version","spreadsheets","values","get","spreadsheetId","range","res","rows","data","length","map","row"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nconst fs = require('fs');\nconst readline = require('readline');\nconst {google} = require('googleapis');\n\n// If modifying these scopes, delete token.json.\nconst SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly'];\nconst TOKEN_PATH = 'token.json';\n\n// Load client secrets from a local file.\nfs.readFile('credentials.json', (err, content) => {\n  if (err) return console.log('Error loading client secret file:', err);\n  // Authorize a client with credentials, then call the Google Sheets API.\n  authorize(JSON.parse(content), listMajors);\n});\n\n/**\n * Create an OAuth2 client with the given credentials, and then execute the\n * given callback function.\n * @param {Object} credentials The authorization client credentials.\n * @param {function} callback The callback to call with the authorized client.\n */\nfunction authorize(credentials, callback) {\n  const {client_secret, client_id, redirect_uris} = credentials.installed;\n  const oAuth2Client = new google.auth.OAuth2(\n      client_id, client_secret, redirect_uris[0]);\n\n  // Check if we have previously stored a token.\n  fs.readFile(TOKEN_PATH, (err, token) => {\n    if (err) return getNewToken(oAuth2Client, callback);\n    oAuth2Client.setCredentials(JSON.parse(token));\n    callback(oAuth2Client);\n  });\n}\n\n/**\n * Get and store new token after prompting for user authorization, and then\n * execute the given callback with the authorized OAuth2 client.\n * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.\n * @param {getEventsCallback} callback The callback for the authorized client.\n */\nfunction getNewToken(oAuth2Client, callback) {\n  const authUrl = oAuth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: SCOPES,\n  });\n  console.log('Authorize this app by visiting this url:', authUrl);\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n  rl.question('Enter the code from that page here: ', (code) => {\n    rl.close();\n    oAuth2Client.getToken(code, (err, token) => {\n      if (err) return console.error('Error while trying to retrieve access token', err);\n      oAuth2Client.setCredentials(token);\n      // Store the token to disk for later program executions\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {\n        if (err) console.error(err);\n        console.log('Token stored to', TOKEN_PATH);\n      });\n      callback(oAuth2Client);\n    });\n  });\n}\n\n/**\n * Prints the names and majors of students in a sample spreadsheet:\n * @see https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit\n * @param {google.auth.OAuth2} auth The authenticated Google OAuth client.\n */\nfunction listMajors(auth) {\n  const sheets = google.sheets({version: 'v4', auth});\n  sheets.spreadsheets.values.get({\n    spreadsheetId: '1_u_UfUGhlIrmVgOJz5-kSzLO9-BsJtVa6z35QvJ_tmo',\n    range: 'Class Data!A2:E',\n  }, (err, res) => {\n    if (err) return console.log('The API returned an error: ' + err);\n    const rows = res.data.values;\n    if (rows.length) {\n      console.log('Name, Major:');\n      // Print columns A and E, which correspond to indices 0 and 4.\n      rows.map((row) => {\n        console.log(`${row[0]}, ${row[4]}`);\n      });\n    } else {\n      console.log('No data found.');\n    }\n  });\n}\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}