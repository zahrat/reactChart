{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\shilan\\\\Desktop\\\\chartTest\\\\reactcharts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shilan\\\\Desktop\\\\chartTest\\\\reactcharts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shilan\\\\Desktop\\\\chartTest\\\\reactcharts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shilan\\\\Desktop\\\\chartTest\\\\reactcharts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\shilan\\\\Desktop\\\\chartTest\\\\reactcharts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\shilan\\\\Desktop\\\\chartTest\\\\reactcharts\\\\src\\\\components\\\\Chart.js\";\nimport React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  function Chart(props) {\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chart).call(this, props));\n    _this.state = {\n      chartData: props.chartData\n    };\n    console.log(_this.props.maxx);\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(Line, {\n        datasetKeyProvider: this.props.datasetKeyProvider,\n        borderWidth: 100,\n        data: this.state.chartData,\n        options: {\n          title: {\n            s: this.props.displayTitle,\n            text: 'Largest Cities In Massachusetts',\n            fontSize: 25\n          },\n          legend: {\n            display: this.props.displayLegend,\n            position: this.props.legendPosition\n          },\n          scales: {\n            yAxes: [{\n              display: true,\n              stacked: true,\n              type: 'logarithmic',\n              ticks: {\n                // Include a dollar sign in the ticks\n                callback: function callback(value, index, values) {\n                  if (value < 1000) return '$' + parseFloat(value).toFixed(2);else if (value < 1000000) return '$' + parseFloat(value * .001).toFixed(2) + 'k';else return '$' + parseFloat(value * .000001).toFixed(2) + 'M';\n                },\n                max: this.props.maxx,\n                beginAtZero: true\n              },\n              afterBuildTicks: function afterBuildTicks(chartObj) {\n                //Build ticks labelling as per your need\n                var maxchartval = chartObj.ticks[0];\n                console.log(maxchartval);\n                chartObj.ticks = [];\n                var l = 0;\n\n                for (var i = 0; l <= maxchartval * maxchartval; i++) {\n                  chartObj.ticks.push(Math.pow(10, i));\n                  l = Math.pow(10, i);\n                }\n              },\n              scaleLabel: {\n                display: false\n              }\n            }],\n            xAxes: [{\n              gridLines: {\n                display: false\n              }\n            }]\n          },\n          tooltips: {\n            custom: function custom(tooltip) {\n              if (!tooltip) return; // disable displaying the color box;\n\n              tooltip.displayColors = false;\n            },\n            callbacks: {\n              label: function label(tooltipItem, data) {\n                console.log(tooltipItem);\n                return 'ROI: ' + parseFloat(Math.round(tooltipItem.yLabel / data.datasets[0].invest * 100 * 100) / 100).toFixed(2) + '%';\n              }\n            }\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nChart.defaultProps = {\n  displayTitle: true,\n  displayLegend: true,\n  legendPosition: 'right',\n  location: 'City'\n};\nexport default Chart;","map":{"version":3,"sources":["C:\\Users\\shilan\\Desktop\\chartTest\\reactcharts\\src\\components\\Chart.js"],"names":["React","Component","Line","Chart","props","state","chartData","console","log","maxx","datasetKeyProvider","title","s","displayTitle","text","fontSize","legend","display","displayLegend","position","legendPosition","scales","yAxes","stacked","type","ticks","callback","value","index","values","parseFloat","toFixed","max","beginAtZero","afterBuildTicks","chartObj","maxchartval","l","i","push","Math","pow","scaleLabel","xAxes","gridLines","tooltips","custom","tooltip","displayColors","callbacks","label","tooltipItem","data","round","yLabel","datasets","invest","defaultProps","location"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nclass Chart extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\tchartData:props.chartData\r\n\t\t}\r\n\tconsole.log(this.props.maxx);\r\n\t}\r\n\tstatic defaultProps = {\r\n    displayTitle:true,\r\n    displayLegend: true,\r\n    legendPosition:'right',\r\n    location:'City'\r\n}\r\n\trender (){ \r\n\treturn(\r\n\t<div className=\"chart\">\r\n\t\t<Line\r\n\t\tdatasetKeyProvider={this.props.datasetKeyProvider}\r\n\t\t\t\t\tborderWidth={100}\r\n\t\t\t\t\tdata={this.state.chartData}\r\n\t\t\t\t\toptions={{\r\n\t\t\t\t\t\ttitle:{\r\n\t\t\t\t\t\t  s:this.props.displayTitle,\r\n\t\t\t\t\t\t  text:'Largest Cities In Massachusetts',\r\n\t\t\t\t\t\t  fontSize:25\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlegend:{\r\n\t\t\t\t\t\t  display:this.props.displayLegend,\r\n\t\t\t\t\t\t  position:this.props.legendPosition\r\n\t\t\t\t\t\t},scales: {\r\n\t\t\t\t\t\t\tyAxes : [{\r\n\t\t\t\t\t\t\t\tdisplay: true,\r\n                                stacked: true,\r\n\t\t\t\t\t\t\t\ttype: 'logarithmic',\r\n\t\t\t\t\t\t\t\tticks: {\r\n\t\t\t\t\t\t\t\t\t// Include a dollar sign in the ticks\r\n\t\t\t\t\t\t\t\t\tcallback: function(value, index, values) {\r\n\t\t\t\t\t\t\t\t\t\tif(value<1000)\r\n\t\t\t\t\t\t\t\t\t\t\treturn '$' + parseFloat(value).toFixed(2);\r\n\t\t\t\t\t\t\t\t\t\telse if(value<1000000)\r\n\t\t\t\t\t\t\t\t\t\treturn '$' + parseFloat(value*.001).toFixed(2)+'k';\r\n\t\t\t\t\t\t\t\t\t\telse return '$'+parseFloat(value*.000001).toFixed(2)+'M';\r\n\t\t\t\t\t\t\t\t\t},max:this.props.maxx,beginAtZero: true\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tafterBuildTicks: function (chartObj) { //Build ticks labelling as per your need\r\n\t\t\t\t\t\t\t\tlet maxchartval=chartObj.ticks[0];\r\n\t\t\t\t\t\t\t\tconsole.log(maxchartval);\r\n\t\t\t\t\t\t\t\t\tchartObj.ticks = [];\r\n\t\t\t\t\t\t\t\t\tlet l=0;\r\n\t\t\t\t\t\t\t\t\tfor(let i=0;l<=maxchartval*maxchartval;i++){\r\n\t\t\t\t\t\t\t\t\t\tchartObj.ticks.push(Math.pow(10,i));\r\n\t\t\t\t\t\t\t\t\t\tl=Math.pow(10,i);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tscaleLabel: {\r\n\t\t\t\t\t\t\t\t\tdisplay: false\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}],\r\n\t\t\t\t\t\t\txAxes:[{\r\n\t\t\t\t\t\t\t  gridLines: {\r\n\t\t\t\t\t\t\t\tdisplay: false,\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t\t}]\r\n\t\t\t\t\t\t},tooltips: {\r\n\t\t\t\t\t\t\tcustom: function(tooltip) {\r\n\t\t\t\t\t\t\t\tif (!tooltip) return;\r\n\t\t\t\t\t\t\t\t// disable displaying the color box;\r\n\t\t\t\t\t\t\t\ttooltip.displayColors = false;\r\n\t\t\t\t\t\t\t  },\r\n\t\t\t\t\t\t\tcallbacks: {\r\n\t\t\t\t\t\t\tlabel: function(tooltipItem,data) {\r\n\t\t\t\t\t\t\t\tconsole.log(tooltipItem);\r\n\t\t\t\t\t\t\t\treturn 'ROI: '+parseFloat(Math.round((tooltipItem.yLabel/data.datasets[0].invest)*100*100) / 100).toFixed(2)+'%';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t</div>\r\n\t)}\r\n}\r\nexport default Chart;"]},"metadata":{},"sourceType":"module"}