{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Genomics API\n *\n * Upload, process, query, and search Genomics data in the cloud.\n *\n * @example\n * const google = require('googleapis');\n * const genomics = google.genomics('v2alpha1');\n *\n * @namespace genomics\n * @type {Function}\n * @version v2alpha1\n * @variation v2alpha1\n * @param {object=} options Options for Genomics\n */\n\n\nfunction Genomics(options) {\n  var self = this;\n  self._options = options || {};\n  self.pipelines = {\n    /**\n     * genomics.pipelines.run\n     * @desc Runs a pipeline.  **Note:** In order to use this method, the\n     * Genomics Service Agent must have access to your project.  This is done\n     * automatically when the Genomics API is first enabled, but if you delete\n     * this permission, or if you have already enabled the Genomics API prior to\n     * the launch of the v2alpha1 API, you must disable and re-enable the API to\n     * grant the Genomics Service Agent the required permissions.\n     * @alias genomics.pipelines.run\n     * @memberOf! genomics(v2alpha1)\n     *\n     * @param {object} params Parameters for request\n     * @param {genomics(v2alpha1).RunPipelineRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    run: function run(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2alpha1/pipelines:run').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.projects = {\n    operations: {\n      /**\n       * genomics.projects.operations.cancel\n       * @desc Starts asynchronous cancellation on a long-running operation. The\n       * server makes a best effort to cancel the operation, but success is not\n       * guaranteed. Clients may use Operations.GetOperation or\n       * Operations.ListOperations to check whether the cancellation succeeded\n       * or the operation completed despite cancellation.\n       * @alias genomics.projects.operations.cancel\n       * @memberOf! genomics(v2alpha1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.name The name of the operation resource to be cancelled.\n       * @param {genomics(v2alpha1).CancelOperationRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      cancel: function cancel(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2alpha1/{name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2alpha1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2alpha1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.workers = {\n    /**\n     * genomics.workers.checkIn\n     * @desc The worker uses this method to retrieve the assigned operation and\n     * provide periodic status updates.\n     * @alias genomics.workers.checkIn\n     * @memberOf! genomics(v2alpha1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id The worker id, assigned when it was created.\n     * @param {genomics(v2alpha1).CheckInRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    checkIn: function checkIn(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2alpha1/workers/{id}:checkIn').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Genomics;","map":null,"metadata":{},"sourceType":"script"}