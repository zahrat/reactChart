{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google Partners API\n *\n * Searches certified companies and creates contact leads with them, and also\n * audits the usage of clients.\n *\n * @example\n * const google = require('googleapis');\n * const partners = google.partners('v2');\n *\n * @namespace partners\n * @type {Function}\n * @version v2\n * @variation v2\n * @param {object=} options Options for Partners\n */\n\n\nfunction Partners(options) {\n  var self = this;\n  self._options = options || {};\n  self.analytics = {\n    /**\n     * partners.analytics.list\n     * @desc Lists analytics data for a user's associated company. Should only\n     * be called within the context of an authorized logged in user.\n     * @alias partners.analytics.list\n     * @memberOf! partners(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.pageSize Requested page size. Server may return fewer analytics than requested. If unspecified or set to 0, default value is 30. Specifies the number of days in the date range when querying analytics. The `page_token` represents the end date of the date range and the start date is calculated using the `page_size` as the number of days BEFORE the end date. Must be a non-negative integer.\n     * @param {string=} params.pageToken A token identifying a page of results that the server returns. Typically, this is the value of `ListAnalyticsResponse.next_page_token` returned from the previous call to ListAnalytics. Will be a date string in `YYYY-MM-DD` format representing the end date of the date range of results to return. If unspecified or set to \"\", default value is the current date.\n     * @param {string=} params.requestMetadata.experimentIds Experiment IDs the current request belongs to.\n     * @param {string=} params.requestMetadata.locale Locale to use for the current request.\n     * @param {string=} params.requestMetadata.partnersSessionId Google Partners session ID.\n     * @param {string=} params.requestMetadata.trafficSource.trafficSourceId Identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.\n     * @param {string=} params.requestMetadata.trafficSource.trafficSubId Second level identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.\n     * @param {string=} params.requestMetadata.userOverrides.ipAddress IP address to use instead of the user's geo-located IP address.\n     * @param {string=} params.requestMetadata.userOverrides.userId Logged-in user ID to impersonate instead of the user's ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/analytics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.clientMessages = {\n    /**\n     * partners.clientMessages.log\n     * @desc Logs a generic message from the client, such as `Failed to render\n     * component`, `Profile page is running slow`, `More than 500 users have\n     * accessed this result.`, etc.\n     * @alias partners.clientMessages.log\n     * @memberOf! partners(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {partners(v2).LogMessageRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    log: function log(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/clientMessages:log').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.companies = {\n    /**\n     * partners.companies.get\n     * @desc Gets a company.\n     * @alias partners.companies.get\n     * @memberOf! partners(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.address The address to use for sorting the company's addresses by proximity. If not given, the geo-located address of the request is used. Used when order_by is set.\n     * @param {string} params.companyId The ID of the company to retrieve.\n     * @param {string=} params.currencyCode If the company's budget is in a different currency code than this one, then the converted budget is converted to this currency code.\n     * @param {string=} params.orderBy How to order addresses within the returned company. Currently, only `address` and `address desc` is supported which will sorted by closest to farthest in distance from given address and farthest to closest distance from given address respectively.\n     * @param {string=} params.requestMetadata.experimentIds Experiment IDs the current request belongs to.\n     * @param {string=} params.requestMetadata.locale Locale to use for the current request.\n     * @param {string=} params.requestMetadata.partnersSessionId Google Partners session ID.\n     * @param {string=} params.requestMetadata.trafficSource.trafficSourceId Identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.\n     * @param {string=} params.requestMetadata.trafficSource.trafficSubId Second level identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.\n     * @param {string=} params.requestMetadata.userOverrides.ipAddress IP address to use instead of the user's geo-located IP address.\n     * @param {string=} params.requestMetadata.userOverrides.userId Logged-in user ID to impersonate instead of the user's ID.\n     * @param {string=} params.view The view of `Company` resource to be returned. This must not be `COMPANY_VIEW_UNSPECIFIED`.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/companies/{companyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['companyId'],\n        pathParams: ['companyId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/companies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    leads: {\n      /**\n       * partners.companies.leads.create\n       * @desc Creates an advertiser lead for the given company ID.\n       * @alias partners.companies.leads.create\n       * @memberOf! partners(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.companyId The ID of the company to contact.\n       * @param {partners(v2).CreateLeadRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/companies/{companyId}/leads').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['companyId'],\n          pathParams: ['companyId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.leads = {\n    /**\n     * partners.leads.list\n     * @desc Lists advertiser leads for a user's associated company. Should only\n     * be called within the context of an authorized logged in user.\n     * @alias partners.leads.list\n     * @memberOf! partners(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.orderBy How to order Leads. Currently, only `create_time` and `create_time desc` are supported\n     * @param {integer=} params.pageSize Requested page size. Server may return fewer leads than requested. If unspecified, server picks an appropriate default.\n     * @param {string=} params.pageToken A token identifying a page of results that the server returns. Typically, this is the value of `ListLeadsResponse.next_page_token` returned from the previous call to ListLeads.\n     * @param {string=} params.requestMetadata.experimentIds Experiment IDs the current request belongs to.\n     * @param {string=} params.requestMetadata.locale Locale to use for the current request.\n     * @param {string=} params.requestMetadata.partnersSessionId Google Partners session ID.\n     * @param {string=} params.requestMetadata.trafficSource.trafficSourceId Identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.\n     * @param {string=} params.requestMetadata.trafficSource.trafficSubId Second level identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.\n     * @param {string=} params.requestMetadata.userOverrides.ipAddress IP address to use instead of the user's geo-located IP address.\n     * @param {string=} params.requestMetadata.userOverrides.userId Logged-in user ID to impersonate instead of the user's ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/leads').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.offers = {\n    /**\n     * partners.offers.list\n     * @desc Lists the Offers available for the current user\n     * @alias partners.offers.list\n     * @memberOf! partners(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.requestMetadata.experimentIds Experiment IDs the current request belongs to.\n     * @param {string=} params.requestMetadata.locale Locale to use for the current request.\n     * @param {string=} params.requestMetadata.partnersSessionId Google Partners session ID.\n     * @param {string=} params.requestMetadata.trafficSource.trafficSourceId Identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.\n     * @param {string=} params.requestMetadata.trafficSource.trafficSubId Second level identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.\n     * @param {string=} params.requestMetadata.userOverrides.ipAddress IP address to use instead of the user's geo-located IP address.\n     * @param {string=} params.requestMetadata.userOverrides.userId Logged-in user ID to impersonate instead of the user's ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/offers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    history: {\n      /**\n       * partners.offers.history.list\n       * @desc Lists the Historical Offers for the current user (or user's\n       * entire company)\n       * @alias partners.offers.history.list\n       * @memberOf! partners(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {boolean=} params.entireCompany if true, show history for the entire company.  Requires user to be admin.\n       * @param {string=} params.orderBy Comma-separated list of fields to order by, e.g.: \"foo,bar,baz\". Use \"foo desc\" to sort descending. List of valid field names is: name, offer_code, expiration_time, status,     last_modified_time, sender_name, creation_time, country_code,     offer_type.\n       * @param {integer=} params.pageSize Maximum number of rows to return per page.\n       * @param {string=} params.pageToken Token to retrieve a specific page.\n       * @param {string=} params.requestMetadata.experimentIds Experiment IDs the current request belongs to.\n       * @param {string=} params.requestMetadata.locale Locale to use for the current request.\n       * @param {string=} params.requestMetadata.partnersSessionId Google Partners session ID.\n       * @param {string=} params.requestMetadata.trafficSource.trafficSourceId Identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.\n       * @param {string=} params.requestMetadata.trafficSource.trafficSubId Second level identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.\n       * @param {string=} params.requestMetadata.userOverrides.ipAddress IP address to use instead of the user's geo-located IP address.\n       * @param {string=} params.requestMetadata.userOverrides.userId Logged-in user ID to impersonate instead of the user's ID.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/offers/history').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.userEvents = {\n    /**\n     * partners.userEvents.log\n     * @desc Logs a user event.\n     * @alias partners.userEvents.log\n     * @memberOf! partners(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {partners(v2).LogUserEventRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    log: function log(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/userEvents:log').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.users = {\n    /**\n     * partners.users.createCompanyRelation\n     * @desc Creates a user's company relation. Affiliates the user to a\n     * company.\n     * @alias partners.users.createCompanyRelation\n     * @memberOf! partners(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.requestMetadata.experimentIds Experiment IDs the current request belongs to.\n     * @param {string=} params.requestMetadata.locale Locale to use for the current request.\n     * @param {string=} params.requestMetadata.partnersSessionId Google Partners session ID.\n     * @param {string=} params.requestMetadata.trafficSource.trafficSourceId Identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.\n     * @param {string=} params.requestMetadata.trafficSource.trafficSubId Second level identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.\n     * @param {string=} params.requestMetadata.userOverrides.ipAddress IP address to use instead of the user's geo-located IP address.\n     * @param {string=} params.requestMetadata.userOverrides.userId Logged-in user ID to impersonate instead of the user's ID.\n     * @param {string} params.userId The ID of the user. Can be set to <code>me</code> to mean the currently authenticated user.\n     * @param {partners(v2).CompanyRelation} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    createCompanyRelation: function createCompanyRelation(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users/{userId}/companyRelation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    deleteCompanyRelation: function deleteCompanyRelation(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users/{userId}/companyRelation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    updateProfile: function updateProfile(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users/profile').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.userStates = {\n    /**\n     * partners.userStates.list\n     * @desc Lists states for current user.\n     * @alias partners.userStates.list\n     * @memberOf! partners(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.requestMetadata.experimentIds Experiment IDs the current request belongs to.\n     * @param {string=} params.requestMetadata.locale Locale to use for the current request.\n     * @param {string=} params.requestMetadata.partnersSessionId Google Partners session ID.\n     * @param {string=} params.requestMetadata.trafficSource.trafficSourceId Identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.\n     * @param {string=} params.requestMetadata.trafficSource.trafficSubId Second level identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.\n     * @param {string=} params.requestMetadata.userOverrides.ipAddress IP address to use instead of the user's geo-located IP address.\n     * @param {string=} params.requestMetadata.userOverrides.userId Logged-in user ID to impersonate instead of the user's ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/userStates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.v2 = {\n    /**\n     * partners.getPartnersstatus\n     * @desc Gets Partners Status of the logged in user's agency. Should only be\n     * called if the logged in user is the admin of the agency.\n     * @alias partners.getPartnersstatus\n     * @memberOf! partners(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.requestMetadata.experimentIds Experiment IDs the current request belongs to.\n     * @param {string=} params.requestMetadata.locale Locale to use for the current request.\n     * @param {string=} params.requestMetadata.partnersSessionId Google Partners session ID.\n     * @param {string=} params.requestMetadata.trafficSource.trafficSourceId Identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.\n     * @param {string=} params.requestMetadata.trafficSource.trafficSubId Second level identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.\n     * @param {string=} params.requestMetadata.userOverrides.ipAddress IP address to use instead of the user's geo-located IP address.\n     * @param {string=} params.requestMetadata.userOverrides.userId Logged-in user ID to impersonate instead of the user's ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getPartnersstatus: function getPartnersstatus(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partnersstatus').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    updateCompanies: function updateCompanies(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/companies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    updateLeads: function updateLeads(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://partners.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/leads').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Partners;","map":null,"metadata":{},"sourceType":"script"}