{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * TaskQueue API\n *\n * Accesses a Google App Engine Pull Task Queue over REST.\n *\n * @example\n * const google = require('googleapis');\n * const taskqueue = google.taskqueue('v1beta2');\n *\n * @namespace taskqueue\n * @type {Function}\n * @version v1beta2\n * @variation v1beta2\n * @param {object=} options Options for Taskqueue\n */\n\n\nfunction Taskqueue(options) {\n  var self = this;\n  self._options = options || {};\n  self.taskqueues = {\n    /**\n     * taskqueue.taskqueues.get\n     * @desc Get detailed information about a TaskQueue.\n     * @alias taskqueue.taskqueues.get\n     * @memberOf! taskqueue(v1beta2)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.getStats Whether to get stats. Optional.\n     * @param {string} params.project The project under which the queue lies.\n     * @param {string} params.taskqueue The id of the taskqueue to get the properties of.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/taskqueue/v1beta2/projects/{project}/taskqueues/{taskqueue}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'taskqueue'],\n        pathParams: ['project', 'taskqueue'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.tasks = {\n    /**\n     * taskqueue.tasks.delete\n     * @desc Delete a task from a TaskQueue.\n     * @alias taskqueue.tasks.delete\n     * @memberOf! taskqueue(v1beta2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project The project under which the queue lies.\n     * @param {string} params.task The id of the task to delete.\n     * @param {string} params.taskqueue The taskqueue to delete a task from.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/taskqueue/v1beta2/projects/{project}/taskqueues/{taskqueue}/tasks/{task}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'taskqueue', 'task'],\n        pathParams: ['project', 'task', 'taskqueue'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/taskqueue/v1beta2/projects/{project}/taskqueues/{taskqueue}/tasks/{task}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'taskqueue', 'task'],\n        pathParams: ['project', 'task', 'taskqueue'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    insert: function insert(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/taskqueue/v1beta2/projects/{project}/taskqueues/{taskqueue}/tasks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'taskqueue'],\n        pathParams: ['project', 'taskqueue'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    lease: function lease(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/taskqueue/v1beta2/projects/{project}/taskqueues/{taskqueue}/tasks/lease').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'taskqueue', 'numTasks', 'leaseSecs'],\n        pathParams: ['project', 'taskqueue'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/taskqueue/v1beta2/projects/{project}/taskqueues/{taskqueue}/tasks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'taskqueue'],\n        pathParams: ['project', 'taskqueue'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    patch: function patch(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/taskqueue/v1beta2/projects/{project}/taskqueues/{taskqueue}/tasks/{task}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'taskqueue', 'task', 'newLeaseSeconds'],\n        pathParams: ['project', 'task', 'taskqueue'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    update: function update(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/taskqueue/v1beta2/projects/{project}/taskqueues/{taskqueue}/tasks/{task}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'taskqueue', 'task', 'newLeaseSeconds'],\n        pathParams: ['project', 'task', 'taskqueue'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Taskqueue;","map":null,"metadata":{},"sourceType":"script"}