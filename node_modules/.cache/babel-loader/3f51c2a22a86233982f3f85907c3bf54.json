{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Tag Manager API\n *\n * Accesses Tag Manager accounts and containers.\n *\n * @example\n * const google = require('googleapis');\n * const tagmanager = google.tagmanager('v1');\n *\n * @namespace tagmanager\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Tagmanager\n */\n\n\nfunction Tagmanager(options) {\n  var self = this;\n  self._options = options || {};\n  self.accounts = {\n    /**\n     * tagmanager.accounts.get\n     * @desc Gets a GTM Account.\n     * @alias tagmanager.accounts.get\n     * @memberOf! tagmanager(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The GTM Account ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/tagmanager/v1/accounts/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/tagmanager/v1/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    update: function update(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/tagmanager/v1/accounts/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    containers: {\n      /**\n       * tagmanager.accounts.containers.create\n       * @desc Creates a Container.\n       * @alias tagmanager.accounts.containers.create\n       * @memberOf! tagmanager(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId The GTM Account ID.\n       * @param {tagmanager(v1).Container} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'containerId'],\n          pathParams: ['accountId', 'containerId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'containerId'],\n          pathParams: ['accountId', 'containerId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      update: function update(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'containerId'],\n          pathParams: ['accountId', 'containerId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      environments: {\n        /**\n         * tagmanager.accounts.containers.environments.create\n         * @desc Creates a GTM Environment.\n         * @alias tagmanager.accounts.containers.environments.create\n         * @memberOf! tagmanager(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId The GTM Account ID.\n         * @param {string} params.containerId The GTM Container ID.\n         * @param {tagmanager(v1).Environment} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId'],\n            pathParams: ['accountId', 'containerId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments/{environmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'environmentId'],\n            pathParams: ['accountId', 'containerId', 'environmentId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments/{environmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'environmentId'],\n            pathParams: ['accountId', 'containerId', 'environmentId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId'],\n            pathParams: ['accountId', 'containerId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        patch: function patch(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments/{environmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'environmentId'],\n            pathParams: ['accountId', 'containerId', 'environmentId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments/{environmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'environmentId'],\n            pathParams: ['accountId', 'containerId', 'environmentId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      folders: {\n        /**\n         * tagmanager.accounts.containers.folders.create\n         * @desc Creates a GTM Folder.\n         * @alias tagmanager.accounts.containers.folders.create\n         * @memberOf! tagmanager(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId The GTM Account ID.\n         * @param {string} params.containerId The GTM Container ID.\n         * @param {tagmanager(v1).Folder} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId'],\n            pathParams: ['accountId', 'containerId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders/{folderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'folderId'],\n            pathParams: ['accountId', 'containerId', 'folderId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders/{folderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'folderId'],\n            pathParams: ['accountId', 'containerId', 'folderId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId'],\n            pathParams: ['accountId', 'containerId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders/{folderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'folderId'],\n            pathParams: ['accountId', 'containerId', 'folderId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        entities: {\n          /**\n           * tagmanager.accounts.containers.folders.entities.list\n           * @desc List all entities in a GTM Folder.\n           * @alias tagmanager.accounts.containers.folders.entities.list\n           * @memberOf! tagmanager(v1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.accountId The GTM Account ID.\n           * @param {string} params.containerId The GTM Container ID.\n           * @param {string} params.folderId The GTM Folder ID.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders/{folderId}/entities').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['accountId', 'containerId', 'folderId'],\n              pathParams: ['accountId', 'containerId', 'folderId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        }\n      },\n      move_folders: {\n        /**\n         * tagmanager.accounts.containers.move_folders.update\n         * @desc Moves entities to a GTM Folder.\n         * @alias tagmanager.accounts.containers.move_folders.update\n         * @memberOf! tagmanager(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId The GTM Account ID.\n         * @param {string} params.containerId The GTM Container ID.\n         * @param {string} params.folderId The GTM Folder ID.\n         * @param {string=} params.tagId The tags to be moved to the folder.\n         * @param {string=} params.triggerId The triggers to be moved to the folder.\n         * @param {string=} params.variableId The variables to be moved to the folder.\n         * @param {tagmanager(v1).Folder} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/move_folders/{folderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'folderId'],\n            pathParams: ['accountId', 'containerId', 'folderId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      reauthorize_environments: {\n        /**\n         * tagmanager.accounts.containers.reauthorize_environments.update\n         * @desc Re-generates the authorization code for a GTM\n         * Environment.\n         * @alias\n         * tagmanager.accounts.containers.reauthorize_environments.update\n         * @memberOf! tagmanager(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId The GTM Account ID.\n         * @param {string} params.containerId The GTM Container ID.\n         * @param {string} params.environmentId The GTM Environment ID.\n         * @param {tagmanager(v1).Environment} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/reauthorize_environments/{environmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'environmentId'],\n            pathParams: ['accountId', 'containerId', 'environmentId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      tags: {\n        /**\n         * tagmanager.accounts.containers.tags.create\n         * @desc Creates a GTM Tag.\n         * @alias tagmanager.accounts.containers.tags.create\n         * @memberOf! tagmanager(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId The GTM Account ID.\n         * @param {string} params.containerId The GTM Container ID.\n         * @param {tagmanager(v1).Tag} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId'],\n            pathParams: ['accountId', 'containerId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags/{tagId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'tagId'],\n            pathParams: ['accountId', 'containerId', 'tagId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags/{tagId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'tagId'],\n            pathParams: ['accountId', 'containerId', 'tagId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId'],\n            pathParams: ['accountId', 'containerId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags/{tagId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'tagId'],\n            pathParams: ['accountId', 'containerId', 'tagId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      triggers: {\n        /**\n         * tagmanager.accounts.containers.triggers.create\n         * @desc Creates a GTM Trigger.\n         * @alias tagmanager.accounts.containers.triggers.create\n         * @memberOf! tagmanager(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId The GTM Account ID.\n         * @param {string} params.containerId The GTM Container ID.\n         * @param {tagmanager(v1).Trigger} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId'],\n            pathParams: ['accountId', 'containerId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers/{triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'triggerId'],\n            pathParams: ['accountId', 'containerId', 'triggerId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers/{triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'triggerId'],\n            pathParams: ['accountId', 'containerId', 'triggerId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId'],\n            pathParams: ['accountId', 'containerId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers/{triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'triggerId'],\n            pathParams: ['accountId', 'containerId', 'triggerId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      variables: {\n        /**\n         * tagmanager.accounts.containers.variables.create\n         * @desc Creates a GTM Variable.\n         * @alias tagmanager.accounts.containers.variables.create\n         * @memberOf! tagmanager(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId The GTM Account ID.\n         * @param {string} params.containerId The GTM Container ID.\n         * @param {tagmanager(v1).Variable} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId'],\n            pathParams: ['accountId', 'containerId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables/{variableId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'variableId'],\n            pathParams: ['accountId', 'containerId', 'variableId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables/{variableId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'variableId'],\n            pathParams: ['accountId', 'containerId', 'variableId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId'],\n            pathParams: ['accountId', 'containerId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables/{variableId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'variableId'],\n            pathParams: ['accountId', 'containerId', 'variableId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      versions: {\n        /**\n         * tagmanager.accounts.containers.versions.create\n         * @desc Creates a Container Version.\n         * @alias tagmanager.accounts.containers.versions.create\n         * @memberOf! tagmanager(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId The GTM Account ID.\n         * @param {string} params.containerId The GTM Container ID.\n         * @param {tagmanager(v1).CreateContainerVersionRequestVersionOptions} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId'],\n            pathParams: ['accountId', 'containerId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'containerVersionId'],\n            pathParams: ['accountId', 'containerId', 'containerVersionId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'containerVersionId'],\n            pathParams: ['accountId', 'containerId', 'containerVersionId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId'],\n            pathParams: ['accountId', 'containerId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        publish: function publish(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}/publish').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'containerVersionId'],\n            pathParams: ['accountId', 'containerId', 'containerVersionId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        restore: function restore(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}/restore').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'containerVersionId'],\n            pathParams: ['accountId', 'containerId', 'containerVersionId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        undelete: function undelete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}/undelete').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'containerVersionId'],\n            pathParams: ['accountId', 'containerId', 'containerVersionId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'containerId', 'containerVersionId'],\n            pathParams: ['accountId', 'containerId', 'containerVersionId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    },\n    permissions: {\n      /**\n       * tagmanager.accounts.permissions.create\n       * @desc Creates a user's Account & Container Permissions.\n       * @alias tagmanager.accounts.permissions.create\n       * @memberOf! tagmanager(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId The GTM Account ID.\n       * @param {tagmanager(v1).UserAccess} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'permissionId'],\n          pathParams: ['accountId', 'permissionId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'permissionId'],\n          pathParams: ['accountId', 'permissionId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      update: function update(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v1/accounts/{accountId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'permissionId'],\n          pathParams: ['accountId', 'permissionId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\nmodule.exports = Tagmanager;","map":null,"metadata":{},"sourceType":"script"}