{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google Slides API\n *\n * An API for creating and editing Google Slides presentations.\n *\n * @example\n * const google = require('googleapis');\n * const slides = google.slides('v1');\n *\n * @namespace slides\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Slides\n */\n\n\nfunction Slides(options) {\n  var self = this;\n  self._options = options || {};\n  self.presentations = {\n    /**\n     * slides.presentations.batchUpdate\n     * @desc Applies one or more updates to the presentation.  Each request is\n     * validated before being applied. If any request is not valid, then the\n     * entire request will fail and nothing will be applied.  Some requests have\n     * replies to give you some information about how they are applied. Other\n     * requests do not need to return information; these each return an empty\n     * reply. The order of replies matches that of the requests.  For example,\n     * suppose you call batchUpdate with four updates, and only the third one\n     * returns information. The response would have two empty replies: the reply\n     * to the third request, and another empty reply, in that order.  Because\n     * other users may be editing the presentation, the presentation might not\n     * exactly reflect your changes: your changes may be altered with respect to\n     * collaborator changes. If there are no collaborators, the presentation\n     * should reflect your changes. In any case, the updates in your request are\n     * guaranteed to be applied together atomically.\n     * @alias slides.presentations.batchUpdate\n     * @memberOf! slides(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.presentationId The presentation to apply the updates to.\n     * @param {slides(v1).BatchUpdatePresentationRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    batchUpdate: function batchUpdate(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://slides.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/presentations/{presentationId}:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['presentationId'],\n        pathParams: ['presentationId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://slides.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/presentations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://slides.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/presentations/{presentationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['presentationId'],\n        pathParams: ['presentationId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    pages: {\n      /**\n       * slides.presentations.pages.get\n       * @desc Gets the latest version of the specified page in the\n       * presentation.\n       * @alias slides.presentations.pages.get\n       * @memberOf! slides(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.pageObjectId The object ID of the page to retrieve.\n       * @param {string} params.presentationId The ID of the presentation to retrieve.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://slides.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/presentations/{presentationId}/pages/{pageObjectId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['presentationId', 'pageObjectId'],\n          pathParams: ['pageObjectId', 'presentationId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      getThumbnail: function getThumbnail(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://slides.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['presentationId', 'pageObjectId'],\n          pathParams: ['pageObjectId', 'presentationId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\nmodule.exports = Slides;","map":null,"metadata":{},"sourceType":"script"}