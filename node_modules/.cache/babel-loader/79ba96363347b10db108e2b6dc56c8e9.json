{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google Cloud Testing API\n *\n * Allows developers to run automated tests for their mobile applications on\n * Google infrastructure.\n *\n * @example\n * const google = require('googleapis');\n * const testing = google.testing('v1');\n *\n * @namespace testing\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Testing\n */\n\n\nfunction Testing(options) {\n  var self = this;\n  self._options = options || {};\n  self.applicationDetailService = {\n    /**\n     * testing.applicationDetailService.getApkDetails\n     * @desc Request the details of an Android application APK.\n     * @alias testing.applicationDetailService.getApkDetails\n     * @memberOf! testing(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {testing(v1).FileReference} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getApkDetails: function getApkDetails(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/applicationDetailService/getApkDetails').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.projects = {\n    testMatrices: {\n      /**\n       * testing.projects.testMatrices.cancel\n       * @desc Cancels unfinished test executions in a test matrix. This call\n       * returns immediately and cancellation proceeds asychronously. If the\n       * matrix is already final, this operation will have no effect.  May\n       * return any of the following canonical error codes:  - PERMISSION_DENIED\n       * - if the user is not authorized to read project - INVALID_ARGUMENT - if\n       * the request is malformed - NOT_FOUND - if the Test Matrix does not\n       * exist\n       * @alias testing.projects.testMatrices.cancel\n       * @memberOf! testing(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.projectId Cloud project that owns the test.\n       * @param {string} params.testMatrixId Test matrix that will be canceled.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      cancel: function cancel(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{projectId}/testMatrices/{testMatrixId}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'testMatrixId'],\n          pathParams: ['projectId', 'testMatrixId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{projectId}/testMatrices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{projectId}/testMatrices/{testMatrixId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'testMatrixId'],\n          pathParams: ['projectId', 'testMatrixId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.testEnvironmentCatalog = {\n    /**\n     * testing.testEnvironmentCatalog.get\n     * @desc Get the catalog of supported test environments.  May return any of\n     * the following canonical error codes:  - INVALID_ARGUMENT - if the request\n     * is malformed - NOT_FOUND - if the environment type does not exist -\n     * INTERNAL - if an internal error occurred\n     * @alias testing.testEnvironmentCatalog.get\n     * @memberOf! testing(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.environmentType The type of environment that should be listed. Required\n     * @param {string=} params.projectId For authorization, the cloud project requesting the TestEnvironmentCatalog. Optional\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/testEnvironmentCatalog/{environmentType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['environmentType'],\n        pathParams: ['environmentType'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Testing;","map":null,"metadata":{},"sourceType":"script"}