{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google Cloud Billing API\n *\n * Allows developers to manage billing for their Google Cloud Platform projects\n * programmatically.\n *\n * @example\n * const google = require('googleapis');\n * const cloudbilling = google.cloudbilling('v1');\n *\n * @namespace cloudbilling\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Cloudbilling\n */\n\n\nfunction Cloudbilling(options) {\n  var self = this;\n  self._options = options || {};\n  self.billingAccounts = {\n    /**\n     * cloudbilling.billingAccounts.get\n     * @desc Gets information about a billing account. The current authenticated\n     * user must be an [owner of the billing\n     * account](https://support.google.com/cloud/answer/4430947).\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Google Cloud Billing API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/cloudbilling\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudbilling = google.cloudbilling('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The resource name of the billing account to retrieve. For example,\n     *     // `billingAccounts/012345-567890-ABCDEF`.\n     *     name: 'billingAccounts/my-billing-account',  // TODO: Update\n     * placeholder value.\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   cloudbilling.billingAccounts.get(request, function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias cloudbilling.billingAccounts.get\n     * @memberOf! cloudbilling(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.name The resource name of the billing account to retrieve. For example, `billingAccounts/012345-567890-ABCDEF`.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudbilling.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudbilling.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/billingAccounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    projects: {\n      /**\n       * cloudbilling.billingAccounts.projects.list\n       * @desc Lists the projects associated with a billing account. The current\n       * authenticated user must have the \"billing.resourceAssociations.list\"\n       * IAM permission, which is often given to billing account\n       * [viewers](https://support.google.com/cloud/answer/4430947).\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the Google Cloud Billing API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/cloudbilling\n       * // 2. This sample uses Application Default Credentials for\n       * authentication.\n       * //    If not already done, install the gcloud CLI from\n       * //    https://cloud.google.com/sdk and run\n       * //    `gcloud beta auth application-default login`.\n       * //    For more information, see\n       * //\n       * https://developers.google.com/identity/protocols/application-default-credentials\n       * // 3. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var cloudbilling = google.cloudbilling('v1');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // The resource name of the billing account associated with the\n       * projects that\n       *     // you want to list. For example,\n       * `billingAccounts/012345-567890-ABCDEF`. name:\n       * 'billingAccounts/my-billing-account',  // TODO: Update placeholder\n       * value.\n       *\n       *     auth: authClient,\n       *   };\n       *\n       *   var handlePage = function(err, response) {\n       *     if (err) {\n       *       console.error(err);\n       *       return;\n       *     }\n       *\n       *     var projectBillingInfoPage = response['projectBillingInfo'];\n       *     if (!projectBillingInfoPage) {\n       *       return;\n       *     }\n       *     for (var i = 0; i < projectBillingInfoPage.length; i++) {\n       *       // TODO: Change code below to process each resource in\n       * `projectBillingInfoPage`:\n       *       console.log(JSON.stringify(projectBillingInfoPage[i], null, 2));\n       *     }\n       *\n       *     if (response.nextPageToken) {\n       *       request.pageToken = response.nextPageToken;\n       *       cloudbilling.billingAccounts.projects.list(request, handlePage);\n       *     }\n       *   };\n       *\n       *   cloudbilling.billingAccounts.projects.list(request, handlePage);\n       * });\n       *\n       * function authorize(callback) {\n       *   google.auth.getApplicationDefault(function(err, authClient) {\n       *     if (err) {\n       *       console.error('authentication failed: ', err);\n       *       return;\n       *     }\n       *     if (authClient.createScopedRequired &&\n       * authClient.createScopedRequired()) { var scopes =\n       * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n       * authClient.createScoped(scopes);\n       *     }\n       *     callback(authClient);\n       *   });\n       * }\n       * @alias cloudbilling.billingAccounts.projects.list\n       * @memberOf! cloudbilling(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.name The resource name of the billing account associated with the projects that you want to list. For example, `billingAccounts/012345-567890-ABCDEF`.\n       * @param {integer=} params.pageSize Requested page size. The maximum page size is 100; this is also the default.\n       * @param {string=} params.pageToken A token identifying a page of results to be returned. This should be a `next_page_token` value returned from a previous `ListProjectBillingInfo` call. If unspecified, the first page of results is returned.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://cloudbilling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}/projects').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.projects = {\n    /**\n     * cloudbilling.projects.getBillingInfo\n     * @desc Gets the billing information for a project. The current\n     * authenticated user must have [permission to view the\n     * project](https://cloud.google.com/docs/permissions-overview#h.bgs0oxofvnoo\n     * ).\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Google Cloud Billing API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/cloudbilling\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudbilling = google.cloudbilling('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The resource name of the project for which billing information is\n     *     // retrieved. For example, `projects/tokyo-rain-123`.\n     *     name: 'projects/my-project',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   cloudbilling.projects.getBillingInfo(request, function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias cloudbilling.projects.getBillingInfo\n     * @memberOf! cloudbilling(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.name The resource name of the project for which billing information is retrieved. For example, `projects/tokyo-rain-123`.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getBillingInfo: function getBillingInfo(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudbilling.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{name}/billingInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    updateBillingInfo: function updateBillingInfo(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudbilling.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{name}/billingInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.services = {\n    /**\n     * cloudbilling.services.list\n     * @desc Lists all public cloud services.\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Google Cloud Billing API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/cloudbilling\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudbilling = google.cloudbilling('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     auth: authClient,\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     var servicesPage = response['services'];\n     *     if (!servicesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < servicesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in\n     * `servicesPage`: console.log(JSON.stringify(servicesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       cloudbilling.services.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   cloudbilling.services.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias cloudbilling.services.list\n     * @memberOf! cloudbilling(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.pageSize Requested page size. Defaults to 5000.\n     * @param {string=} params.pageToken A token identifying a page of results to return. This should be a `next_page_token` value returned from a previous `ListServices` call. If unspecified, the first page of results is returned.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://cloudbilling.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/services').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    skus: {\n      /**\n       * cloudbilling.services.skus.list\n       * @desc Lists all publicly available SKUs for a given cloud service.\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the Google Cloud Billing API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/cloudbilling\n       * // 2. This sample uses Application Default Credentials for\n       * authentication.\n       * //    If not already done, install the gcloud CLI from\n       * //    https://cloud.google.com/sdk and run\n       * //    `gcloud beta auth application-default login`.\n       * //    For more information, see\n       * //\n       * https://developers.google.com/identity/protocols/application-default-credentials\n       * // 3. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var cloudbilling = google.cloudbilling('v1');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // The name of the service.\n       *     // Example: \"services/DA34-426B-A397\"\n       *     parent: 'services/my-service',  // TODO: Update placeholder value.\n       *\n       *     auth: authClient,\n       *   };\n       *\n       *   var handlePage = function(err, response) {\n       *     if (err) {\n       *       console.error(err);\n       *       return;\n       *     }\n       *\n       *     var skusPage = response['skus'];\n       *     if (!skusPage) {\n       *       return;\n       *     }\n       *     for (var i = 0; i < skusPage.length; i++) {\n       *       // TODO: Change code below to process each resource in\n       * `skusPage`: console.log(JSON.stringify(skusPage[i], null, 2));\n       *     }\n       *\n       *     if (response.nextPageToken) {\n       *       request.pageToken = response.nextPageToken;\n       *       cloudbilling.services.skus.list(request, handlePage);\n       *     }\n       *   };\n       *\n       *   cloudbilling.services.skus.list(request, handlePage);\n       * });\n       *\n       * function authorize(callback) {\n       *   google.auth.getApplicationDefault(function(err, authClient) {\n       *     if (err) {\n       *       console.error('authentication failed: ', err);\n       *       return;\n       *     }\n       *     if (authClient.createScopedRequired &&\n       * authClient.createScopedRequired()) { var scopes =\n       * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n       * authClient.createScoped(scopes);\n       *     }\n       *     callback(authClient);\n       *   });\n       * }\n       * @alias cloudbilling.services.skus.list\n       * @memberOf! cloudbilling(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.currencyCode The ISO 4217 currency code for the pricing info in the response proto. Will use the conversion rate as of start_time. Optional. If not specified USD will be used.\n       * @param {string=} params.endTime Optional exclusive end time of the time range for which the pricing versions will be returned. Timestamps in the future are not allowed. The time range has to be within a single calendar month in America/Los_Angeles timezone. Time range as a whole is optional. If not specified, the latest pricing will be returned (up to 12 hours old at most).\n       * @param {integer=} params.pageSize Requested page size. Defaults to 5000.\n       * @param {string=} params.pageToken A token identifying a page of results to return. This should be a `next_page_token` value returned from a previous `ListSkus` call. If unspecified, the first page of results is returned.\n       * @param {string} params.parent The name of the service. Example: \"services/DA34-426B-A397\"\n       * @param {string=} params.startTime Optional inclusive start time of the time range for which the pricing versions will be returned. Timestamps in the future are not allowed. The time range has to be within a single calendar month in America/Los_Angeles timezone. Time range as a whole is optional. If not specified, the latest pricing will be returned (up to 12 hours old at most).\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://cloudbilling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{parent}/skus').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\nmodule.exports = Cloudbilling;","map":null,"metadata":{},"sourceType":"script"}