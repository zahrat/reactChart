{"ast":null,"code":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar Auth2Client = require('./oauth2client.js');\n\nvar util = require('util');\n/**\n * User Refresh Token credentials.\n *\n * @param {string} clientId The authentication client ID.\n * @param {string} clientSecret The authentication client secret.\n * @param {string} refreshToken The authentication refresh token.\n * @constructor\n */\n\n\nfunction UserRefreshClient(clientId, clientSecret, refreshToken) {\n  UserRefreshClient.super_.call(this, clientId, clientSecret); // Named to avoid collision with the method refreshToken_\n\n  this._refreshToken = refreshToken;\n}\n\nutil.inherits(UserRefreshClient, Auth2Client); // Executes the given callback if it is not null.\n\nfunction callback(c, err, res) {\n  if (c) {\n    c(err, res);\n  }\n}\n/**\n * Refreshes the access token.\n * @param {object=} ignored_\n * @param {function=} opt_callback Optional callback.\n * @private\n */\n\n\nUserRefreshClient.prototype.refreshToken_ = function (ignored_, opt_callback) {\n  UserRefreshClient.super_.prototype.refreshToken_.call(this, this._refreshToken, opt_callback);\n};\n/**\n * Create a UserRefreshClient credentials instance using the given input options.\n * @param {object=} json The input object.\n * @param {function=} opt_callback Optional callback.\n */\n\n\nUserRefreshClient.prototype.fromJSON = function (json, opt_callback) {\n  var that = this;\n\n  if (!json) {\n    callback(opt_callback, new Error('Must pass in a JSON object containing the user refresh token'));\n    return;\n  }\n\n  if (json.type !== 'authorized_user') {\n    callback(opt_callback, new Error('The incoming JSON object does not have the \"authorized_user\" type'));\n    return;\n  }\n\n  if (!json.client_id) {\n    callback(opt_callback, new Error('The incoming JSON object does not contain a client_id field'));\n    return;\n  }\n\n  if (!json.client_secret) {\n    callback(opt_callback, new Error('The incoming JSON object does not contain a client_secret field'));\n    return;\n  }\n\n  if (!json.refresh_token) {\n    callback(opt_callback, new Error('The incoming JSON object does not contain a refresh_token field'));\n    return;\n  }\n\n  that.clientId_ = json.client_id;\n  that.clientSecret_ = json.client_secret;\n  that._refreshToken = json.refresh_token;\n  that.credentials.refresh_token = json.refresh_token;\n  callback(opt_callback);\n};\n/**\n * Create a UserRefreshClient credentials instance using the given input stream.\n * @param {object=} stream The input stream.\n * @param {function=} opt_callback Optional callback.\n */\n\n\nUserRefreshClient.prototype.fromStream = function (stream, opt_callback) {\n  var that = this;\n\n  if (!stream) {\n    process.nextTick(function () {\n      callback(opt_callback, new Error('Must pass in a stream containing the user refresh token.'));\n    });\n    return;\n  }\n\n  var s = '';\n  stream.setEncoding('utf8');\n  stream.on('data', function (chunk) {\n    s += chunk;\n  });\n  stream.on('end', function () {\n    try {\n      var data = JSON.parse(s);\n      that.fromJSON(data, opt_callback);\n    } catch (err) {\n      callback(opt_callback, err);\n    }\n  });\n};\n/**\n * Export UserRefreshClient\n */\n\n\nmodule.exports = UserRefreshClient;","map":null,"metadata":{},"sourceType":"script"}