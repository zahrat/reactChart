{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * G Suite Activity API\n *\n * Provides a historical view of activity.\n *\n * @example\n * const google = require('googleapis');\n * const appsactivity = google.appsactivity('v1');\n *\n * @namespace appsactivity\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Appsactivity\n */\n\n\nfunction Appsactivity(options) {\n  var self = this;\n  self._options = options || {};\n  self.activities = {\n    /**\n     * appsactivity.activities.list\n     * @desc Returns a list of activities visible to the current logged in user.\n     * Visible activities are determined by the visiblity settings of the object\n     * that was acted on, e.g. Drive files a user can see. An activity is a\n     * record of past events. Multiple events may be merged if they are similar.\n     * A request is scoped to activities from a given Google service using the\n     * source parameter.\n     * @alias appsactivity.activities.list\n     * @memberOf! appsactivity(v1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {string=} params.drive.ancestorId Identifies the Drive folder containing the items for which to return activities.\n     * @param {string=} params.drive.fileId Identifies the Drive item to return activities for.\n     * @param {string=} params.groupingStrategy Indicates the strategy to use when grouping singleEvents items in the associated combinedEvent object.\n     * @param {integer=} params.pageSize The maximum number of events to return on a page. The response includes a continuation token if there are more events.\n     * @param {string=} params.pageToken A token to retrieve a specific page of results.\n     * @param {string=} params.source The Google service from which to return activities. Possible values of source are:  - drive.google.com\n     * @param {string=} params.userId Indicates the user to return activity for. Use the special value me to indicate the currently authenticated user.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/appsactivity/v1/activities').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Appsactivity;","map":null,"metadata":{},"sourceType":"script"}