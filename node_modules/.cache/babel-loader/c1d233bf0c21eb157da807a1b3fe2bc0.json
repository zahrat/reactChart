{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Cloud User Accounts API\n *\n * Creates and manages users and groups for accessing Google Compute Engine\n * virtual machines.\n *\n * @example\n * const google = require('googleapis');\n * const clouduseraccounts = google.clouduseraccounts('beta');\n *\n * @namespace clouduseraccounts\n * @type {Function}\n * @version beta\n * @variation beta\n * @param {object=} options Options for Clouduseraccounts\n */\n\n\nfunction Clouduseraccounts(options) {\n  var self = this;\n  self._options = options || {};\n  self.globalAccountsOperations = {\n    /**\n     * clouduseraccounts.globalAccountsOperations.delete\n     * @desc Deletes the specified operation resource.\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: 'my-project',  // TODO: Update placeholder value.\n     *\n     *     // Name of the Operations resource to delete.\n     *     operation: 'my-operation',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   cloudUserAccounts.globalAccountsOperations.delete(request,\n     * function(err) { if (err) { console.error(err); return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias clouduseraccounts.globalAccountsOperations.delete\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.operation Name of the Operations resource to delete.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.groups = {\n    /**\n     * clouduseraccounts.groups.addMember\n     * @desc Adds users to the specified group.\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: 'my-project',  // TODO: Update placeholder value.\n     *\n     *     // Name of the group for this request.\n     *     groupName: 'my-group-name',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   cloudUserAccounts.groups.addMember(request, function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias clouduseraccounts.groups.addMember\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the group for this request.\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(beta).GroupsAddMemberRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    addMember: function addMember(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/global/groups/{groupName}/addMember').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/global/groups/{groupName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/global/groups/{groupName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    insert: function insert(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/global/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/global/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    removeMember: function removeMember(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/global/groups/{groupName}/removeMember').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.linux = {\n    /**\n     * clouduseraccounts.linux.getAuthorizedKeysView\n     * @desc Returns a list of authorized public keys for a specific user\n     * account.\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: 'my-project',  // TODO: Update placeholder value.\n     *\n     *     // Name of the zone for this request.\n     *     zone: 'my-zone',  // TODO: Update placeholder value.\n     *\n     *     // The user account for which you want to get a list of authorized\n     * public keys. user: 'my-user',  // TODO: Update placeholder value.\n     *\n     *     // The fully-qualified URL of the virtual machine requesting the\n     * view. instance: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   cloudUserAccounts.linux.getAuthorizedKeysView(request, function(err,\n     * response) { if (err) { console.error(err); return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias clouduseraccounts.linux.getAuthorizedKeysView\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.instance The fully-qualified URL of the virtual machine requesting the view.\n     * @param {boolean=} params.login Whether the view was requested as part of a user-initiated login.\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user The user account for which you want to get a list of authorized public keys.\n     * @param {string} params.zone Name of the zone for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getAuthorizedKeysView: function getAuthorizedKeysView(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/zones/{zone}/authorizedKeysView/{user}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'zone', 'user', 'instance'],\n        pathParams: ['project', 'user', 'zone'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    getLinuxAccountViews: function getLinuxAccountViews(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/zones/{zone}/linuxAccountViews').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['project', 'zone'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.users = {\n    /**\n     * clouduseraccounts.users.addPublicKey\n     * @desc Adds a public key to the specified User resource with the data\n     * included in the request.\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: 'my-project',  // TODO: Update placeholder value.\n     *\n     *     // Name of the user for this request.\n     *     user: 'my-user',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   cloudUserAccounts.users.addPublicKey(request, function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias clouduseraccounts.users.addPublicKey\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user for this request.\n     * @param {clouduseraccounts(beta).PublicKey} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    addPublicKey: function addPublicKey(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/global/users/{user}/addPublicKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/global/users/{user}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/global/users/{user}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    insert: function insert(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/global/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/global/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    removePublicKey: function removePublicKey(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/beta/projects/{project}/global/users/{user}/removePublicKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user', 'fingerprint'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Clouduseraccounts;","map":null,"metadata":{},"sourceType":"script"}