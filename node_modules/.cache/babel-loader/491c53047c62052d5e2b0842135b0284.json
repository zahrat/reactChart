{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Service User API\n *\n * Enables services that service consumers want to use on Google Cloud Platform,\n * lists the available or enabled services, or disables services that service\n * consumers no longer use.\n *\n * @example\n * const google = require('googleapis');\n * const serviceuser = google.serviceuser('v1');\n *\n * @namespace serviceuser\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Serviceuser\n */\n\n\nfunction Serviceuser(options) {\n  var self = this;\n  self._options = options || {};\n  self.projects = {\n    services: {\n      /**\n       * serviceuser.projects.services.disable\n       * @desc Disable a service so it can no longer be used with a project.\n       * This prevents unintended usage that may cause unexpected billing\n       * charges or security leaks.  Operation<response: google.protobuf.Empty>\n       * @alias serviceuser.projects.services.disable\n       * @memberOf! serviceuser(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.name Name of the consumer and the service to disable for that consumer.  The Service User implementation accepts the following forms for consumer: - \"project:<project_id>\"  A valid path would be: - /v1/projects/my-project/services/servicemanagement.googleapis.com:disable\n       * @param {serviceuser(v1).DisableServiceRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      disable: function disable(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://serviceuser.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}:disable').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      enable: function enable(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://serviceuser.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}:enable').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://serviceuser.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{parent}/services').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.services = {\n    /**\n     * serviceuser.services.search\n     * @desc Search available services.  When no filter is specified, returns\n     * all accessible services. For authenticated users, also returns all\n     * services the calling user has \"servicemanagement.services.bind\"\n     * permission for.\n     * @alias serviceuser.services.search\n     * @memberOf! serviceuser(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.pageSize Requested size of the next page of data.\n     * @param {string=} params.pageToken Token identifying which result to start with; returned by a previous list call.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    search: function search(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://serviceuser.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/services:search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Serviceuser;","map":null,"metadata":{},"sourceType":"script"}