{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google Kubernetes Engine API\n *\n * The Google Kubernetes Engine API is used for building and managing container\n * based applications, powered by the open source Kubernetes technology.\n *\n * @example\n * const google = require('googleapis');\n * const container = google.container('v1beta1');\n *\n * @namespace container\n * @type {Function}\n * @version v1beta1\n * @variation v1beta1\n * @param {object=} options Options for Container\n */\n\n\nfunction Container(options) {\n  var self = this;\n  self._options = options || {};\n  self.projects = {\n    locations: {\n      /**\n       * container.projects.locations.getServerConfig\n       * @desc Returns configuration info about the Kubernetes Engine service.\n       * @alias container.projects.locations.getServerConfig\n       * @memberOf! container(v1beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.name The name (project and location) of the server config to get Specified in the format 'projects/x/locations/x'.\n       * @param {string=} params.projectId The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field is deprecated, use name instead.\n       * @param {string=} params.zone The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations for. This field is deprecated, use name instead.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      getServerConfig: function getServerConfig(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{name}/serverConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      clusters: {\n        /**\n         * container.projects.locations.clusters.completeIpRotation\n         * @desc Completes master IP rotation.\n         * @alias container.projects.locations.clusters.completeIpRotation\n         * @memberOf! container(v1beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.name The name (project, location, cluster id) of the cluster to complete IP rotation. Specified in the format 'projects/x/locations/x/clusters/x'.\n         * @param {container(v1beta1).CompleteIPRotationRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        completeIpRotation: function completeIpRotation(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}:completeIpRotation').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{parent}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{parent}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setAddons: function setAddons(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}:setAddons').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setLegacyAbac: function setLegacyAbac(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}:setLegacyAbac').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setLocations: function setLocations(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}:setLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setLogging: function setLogging(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}:setLogging').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setMaintenancePolicy: function setMaintenancePolicy(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}:setMaintenancePolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setMasterAuth: function setMasterAuth(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}:setMasterAuth').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setMonitoring: function setMonitoring(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}:setMonitoring').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setNetworkPolicy: function setNetworkPolicy(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}:setNetworkPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setResourceLabels: function setResourceLabels(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}:setResourceLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        startIpRotation: function startIpRotation(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}:startIpRotation').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        updateMaster: function updateMaster(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}:updateMaster').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        nodePools: {\n          /**\n           * container.projects.locations.clusters.nodePools.create\n           * @desc Creates a node pool for a cluster.\n           * @alias container.projects.locations.clusters.nodePools.create\n           * @memberOf! container(v1beta1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.parent The parent (project, location, cluster id) where the node pool will be created. Specified in the format 'projects/x/locations/x/clusters/x/nodePools/x'.\n           * @param {container(v1beta1).CreateNodePoolRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          create: function create(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/{parent}/nodePools').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          delete: function _delete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          get: function get(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/{parent}/nodePools').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          rollback: function rollback(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/{name}:rollback').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          setAutoscaling: function setAutoscaling(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/{name}:setAutoscaling').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          setManagement: function setManagement(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/{name}:setManagement').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          setSize: function setSize(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/{name}:setSize').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          update: function update(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'PUT'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        }\n      },\n      operations: {\n        /**\n         * container.projects.locations.operations.cancel\n         * @desc Cancels the specified operation.\n         * @alias container.projects.locations.operations.cancel\n         * @memberOf! container(v1beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.name The name (project, location, operation id) of the operation to cancel. Specified in the format 'projects/x/locations/x/operations/x'.\n         * @param {container(v1beta1).CancelOperationRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        cancel: function cancel(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{parent}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    },\n    zones: {\n      /**\n       * container.projects.zones.getServerconfig\n       * @desc Returns configuration info about the Kubernetes Engine service.\n       * @alias container.projects.zones.getServerconfig\n       * @memberOf! container(v1beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.name The name (project and location) of the server config to get Specified in the format 'projects/x/locations/x'.\n       * @param {string} params.projectId The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field is deprecated, use name instead.\n       * @param {string} params.zone The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations for. This field is deprecated, use name instead.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      getServerconfig: function getServerconfig(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/serverconfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'zone'],\n          pathParams: ['projectId', 'zone'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      clusters: {\n        /**\n         * container.projects.zones.clusters.addons\n         * @desc Sets the addons of a specific cluster.\n         * @alias container.projects.zones.clusters.addons\n         * @memberOf! container(v1beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.clusterId The name of the cluster to upgrade. This field is deprecated, use name instead.\n         * @param {string} params.projectId The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field is deprecated, use name instead.\n         * @param {string} params.zone The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides. This field is deprecated, use name instead.\n         * @param {container(v1beta1).SetAddonsConfigRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        addons: function addons(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/addons').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        completeIpRotation: function completeIpRotation(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:completeIpRotation').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone'],\n            pathParams: ['projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        legacyAbac: function legacyAbac(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/legacyAbac').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone'],\n            pathParams: ['projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        locations: function locations(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        logging: function logging(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/logging').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        master: function master(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/master').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        monitoring: function monitoring(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/monitoring').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        resourceLabels: function resourceLabels(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/resourceLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setMaintenancePolicy: function setMaintenancePolicy(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setMaintenancePolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setMasterAuth: function setMasterAuth(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setMasterAuth').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setNetworkPolicy: function setNetworkPolicy(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setNetworkPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        startIpRotation: function startIpRotation(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:startIpRotation').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        nodePools: {\n          /**\n           * container.projects.zones.clusters.nodePools.autoscaling\n           * @desc Sets the autoscaling settings of a specific node pool.\n           * @alias container.projects.zones.clusters.nodePools.autoscaling\n           * @memberOf! container(v1beta1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.clusterId The name of the cluster to upgrade. This field is deprecated, use name instead.\n           * @param {string} params.nodePoolId The name of the node pool to upgrade. This field is deprecated, use name instead.\n           * @param {string} params.projectId The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field is deprecated, use name instead.\n           * @param {string} params.zone The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides. This field is deprecated, use name instead.\n           * @param {container(v1beta1).SetNodePoolAutoscalingRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          autoscaling: function autoscaling(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/autoscaling').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],\n              pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          create: function create(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId'],\n              pathParams: ['clusterId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          delete: function _delete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],\n              pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          get: function get(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],\n              pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId'],\n              pathParams: ['clusterId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          rollback: function rollback(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}:rollback').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],\n              pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          setManagement: function setManagement(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/setManagement').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],\n              pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          setSize: function setSize(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/setSize').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],\n              pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          update: function update(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/update').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],\n              pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        }\n      },\n      operations: {\n        /**\n         * container.projects.zones.operations.cancel\n         * @desc Cancels the specified operation.\n         * @alias container.projects.zones.operations.cancel\n         * @memberOf! container(v1beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.operationId The server-assigned `name` of the operation. This field is deprecated, use name instead.\n         * @param {string} params.projectId The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field is deprecated, use name instead.\n         * @param {string} params.zone The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the operation resides. This field is deprecated, use name instead.\n         * @param {container(v1beta1).CancelOperationRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        cancel: function cancel(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/operations/{operationId}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'operationId'],\n            pathParams: ['operationId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/operations/{operationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'operationId'],\n            pathParams: ['operationId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/projects/{projectId}/zones/{zone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone'],\n            pathParams: ['projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = Container;","map":null,"metadata":{},"sourceType":"script"}