{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Replica Pool API\n *\n * The Replica Pool API allows users to declaratively provision and manage\n * groups of Google Compute Engine instances based on a common template.\n *\n * @example\n * const google = require('googleapis');\n * const replicapool = google.replicapool('v1beta1');\n *\n * @namespace replicapool\n * @type {Function}\n * @version v1beta1\n * @variation v1beta1\n * @param {object=} options Options for Replicapool\n */\n\n\nfunction Replicapool(options) {\n  var self = this;\n  self._options = options || {};\n  self.pools = {\n    /**\n     * replicapool.pools.delete\n     * @desc Deletes a replica pool.\n     * @alias replicapool.pools.delete\n     * @memberOf! replicapool(v1beta1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.poolName The name of the replica pool for this request.\n     * @param {string} params.projectName The project ID for this replica pool.\n     * @param {string} params.zone The zone for this replica pool.\n     * @param {replicapool(v1beta1).PoolsDeleteRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools/{poolName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['projectName', 'zone', 'poolName'],\n        pathParams: ['poolName', 'projectName', 'zone'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools/{poolName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['projectName', 'zone', 'poolName'],\n        pathParams: ['poolName', 'projectName', 'zone'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    insert: function insert(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['projectName', 'zone'],\n        pathParams: ['projectName', 'zone'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['projectName', 'zone'],\n        pathParams: ['projectName', 'zone'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    resize: function resize(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools/{poolName}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['projectName', 'zone', 'poolName'],\n        pathParams: ['poolName', 'projectName', 'zone'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    updatetemplate: function updatetemplate(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools/{poolName}/updateTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['projectName', 'zone', 'poolName'],\n        pathParams: ['poolName', 'projectName', 'zone'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.replicas = {\n    /**\n     * replicapool.replicas.delete\n     * @desc Deletes a replica from the pool.\n     * @alias replicapool.replicas.delete\n     * @memberOf! replicapool(v1beta1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.poolName The replica pool name for this request.\n     * @param {string} params.projectName The project ID for this request.\n     * @param {string} params.replicaName The name of the replica for this request.\n     * @param {string} params.zone The zone where the replica lives.\n     * @param {replicapool(v1beta1).ReplicasDeleteRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['projectName', 'zone', 'poolName', 'replicaName'],\n        pathParams: ['poolName', 'projectName', 'replicaName', 'zone'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['projectName', 'zone', 'poolName', 'replicaName'],\n        pathParams: ['poolName', 'projectName', 'replicaName', 'zone'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools/{poolName}/replicas').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['projectName', 'zone', 'poolName'],\n        pathParams: ['poolName', 'projectName', 'zone'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    restart: function restart(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/replicapool/v1beta1/projects/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}/restart').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['projectName', 'zone', 'poolName', 'replicaName'],\n        pathParams: ['poolName', 'projectName', 'replicaName', 'zone'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Replicapool;","map":null,"metadata":{},"sourceType":"script"}