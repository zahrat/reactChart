{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Genomics API\n *\n * Upload, process, query, and search Genomics data in the cloud.\n *\n * @example\n * const google = require('googleapis');\n * const genomics = google.genomics('v1');\n *\n * @namespace genomics\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Genomics\n */\n\n\nfunction Genomics(options) {\n  var self = this;\n  self._options = options || {};\n  self.annotations = {\n    /**\n     * genomics.annotations.batchCreate\n     * @desc Creates one or more new annotations atomically. All annotations\n     * must belong to the same annotation set. Caller must have WRITE permission\n     * for this annotation set. For optimal performance, batch positionally\n     * adjacent annotations together.  If the request has a systemic issue, such\n     * as an attempt to write to an inaccessible annotation set, the entire RPC\n     * will fail accordingly. For lesser data issues, when possible an error\n     * will be isolated to the corresponding batch entry in the response; the\n     * remaining well formed annotations will be created normally.  For details\n     * on the requirements for each individual annotation resource, see\n     * CreateAnnotation.\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   genomics.annotations.batchCreate(request, function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias genomics.annotations.batchCreate\n     * @memberOf! genomics(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {genomics(v1).BatchCreateAnnotationsRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    batchCreate: function batchCreate(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/annotations:batchCreate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['annotationId'],\n        pathParams: ['annotationId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['annotationId'],\n        pathParams: ['annotationId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    search: function search(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/annotations/search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    update: function update(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['annotationId'],\n        pathParams: ['annotationId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.annotationsets = {\n    /**\n     * genomics.annotationsets.create\n     * @desc Creates a new annotation set. Caller must have WRITE permission for\n     * the associated dataset.  The following fields are required:    *\n     * datasetId   * referenceSetId  All other fields may be optionally\n     * specified, unless documented as being server-generated (for example, the\n     * `id` field).\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   genomics.annotationsets.create(request, function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias genomics.annotationsets.create\n     * @memberOf! genomics(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {genomics(v1).AnnotationSet} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/annotationsets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/annotationsets/{annotationSetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['annotationSetId'],\n        pathParams: ['annotationSetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/annotationsets/{annotationSetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['annotationSetId'],\n        pathParams: ['annotationSetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    search: function search(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/annotationsets/search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    update: function update(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/annotationsets/{annotationSetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['annotationSetId'],\n        pathParams: ['annotationSetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.callsets = {\n    /**\n     * genomics.callsets.create\n     * @desc Creates a new call set.  For the definitions of call sets and other\n     * genomics resources, see [Fundamentals of Google\n     * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   genomics.callsets.create(request, function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias genomics.callsets.create\n     * @memberOf! genomics(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {genomics(v1).CallSet} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/callsets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/callsets/{callSetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['callSetId'],\n        pathParams: ['callSetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/callsets/{callSetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['callSetId'],\n        pathParams: ['callSetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    patch: function patch(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/callsets/{callSetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['callSetId'],\n        pathParams: ['callSetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    search: function search(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/callsets/search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.datasets = {\n    /**\n     * genomics.datasets.create\n     * @desc Creates a new dataset.  For the definitions of datasets and other\n     * genomics resources, see [Fundamentals of Google\n     * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   genomics.datasets.create(request, function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias genomics.datasets.create\n     * @memberOf! genomics(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {genomics(v1).Dataset} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/datasets/{datasetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['datasetId'],\n        pathParams: ['datasetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/datasets/{datasetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['datasetId'],\n        pathParams: ['datasetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    getIamPolicy: function getIamPolicy(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    patch: function patch(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/datasets/{datasetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['datasetId'],\n        pathParams: ['datasetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    setIamPolicy: function setIamPolicy(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    testIamPermissions: function testIamPermissions(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    undelete: function undelete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/datasets/{datasetId}:undelete').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['datasetId'],\n        pathParams: ['datasetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.operations = {\n    /**\n     * genomics.operations.cancel\n     * @desc Starts asynchronous cancellation on a long-running operation. The\n     * server makes a best effort to cancel the operation, but success is not\n     * guaranteed. Clients may use Operations.GetOperation or\n     * Operations.ListOperations to check whether the cancellation succeeded or\n     * the operation completed despite cancellation.\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The name of the operation resource to be cancelled.\n     *     name: 'operations/my-operation',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   genomics.operations.cancel(request, function(err) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias genomics.operations.cancel\n     * @memberOf! genomics(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.name The name of the operation resource to be cancelled.\n     * @param {genomics(v1).CancelOperationRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    cancel: function cancel(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.readgroupsets = {\n    /**\n     * genomics.readgroupsets.delete\n     * @desc Deletes a read group set.  For the definitions of read group sets\n     * and other genomics resources, see [Fundamentals of Google\n     * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The ID of the read group set to be deleted. The caller must have\n     * WRITE\n     *     // permissions to the dataset associated with this read group set.\n     *     readGroupSetId: 'my-read-group-set-id',  // TODO: Update placeholder\n     * value.\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   genomics.readgroupsets.delete(request, function(err) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias genomics.readgroupsets.delete\n     * @memberOf! genomics(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.readGroupSetId The ID of the read group set to be deleted. The caller must have WRITE permissions to the dataset associated with this read group set.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/readgroupsets/{readGroupSetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['readGroupSetId'],\n        pathParams: ['readGroupSetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    export: function _export(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/readgroupsets/{readGroupSetId}:export').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['readGroupSetId'],\n        pathParams: ['readGroupSetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/readgroupsets/{readGroupSetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['readGroupSetId'],\n        pathParams: ['readGroupSetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    import: function _import(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/readgroupsets:import').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    patch: function patch(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/readgroupsets/{readGroupSetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['readGroupSetId'],\n        pathParams: ['readGroupSetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    search: function search(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/readgroupsets/search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    coveragebuckets: {\n      /**\n       * genomics.readgroupsets.coveragebuckets.list\n       * @desc Lists fixed width coverage buckets for a read group set, each of\n       * which correspond to a range of a reference sequence. Each bucket\n       * summarizes coverage information across its corresponding genomic range.\n       * For the definitions of read group sets and other genomics resources,\n       * see [Fundamentals of Google\n       * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)\n       * Coverage is defined as the number of reads which are aligned to a given\n       * base in the reference sequence. Coverage buckets are available at\n       * several precomputed bucket widths, enabling retrieval of various\n       * coverage 'zoom levels'. The caller must have READ permissions for the\n       * target read group set.\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the Genomics API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/genomics\n       * // 2. This sample uses Application Default Credentials for\n       * authentication.\n       * //    If not already done, install the gcloud CLI from\n       * //    https://cloud.google.com/sdk and run\n       * //    `gcloud beta auth application-default login`.\n       * //    For more information, see\n       * //\n       * https://developers.google.com/identity/protocols/application-default-credentials\n       * // 3. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var genomics = google.genomics('v1');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // Required. The ID of the read group set over which coverage is\n       * requested. readGroupSetId: 'my-read-group-set-id',  // TODO: Update\n       * placeholder value.\n       *\n       *     auth: authClient,\n       *   };\n       *\n       *   var handlePage = function(err, response) {\n       *     if (err) {\n       *       console.error(err);\n       *       return;\n       *     }\n       *\n       *     var coverageBucketsPage = response['coverageBuckets'];\n       *     if (!coverageBucketsPage) {\n       *       return;\n       *     }\n       *     for (var i = 0; i < coverageBucketsPage.length; i++) {\n       *       // TODO: Change code below to process each resource in\n       * `coverageBucketsPage`:\n       *       console.log(JSON.stringify(coverageBucketsPage[i], null, 2));\n       *     }\n       *\n       *     if (response.nextPageToken) {\n       *       request.pageToken = response.nextPageToken;\n       *       genomics.readgroupsets.coveragebuckets.list(request, handlePage);\n       *     }\n       *   };\n       *\n       *   genomics.readgroupsets.coveragebuckets.list(request, handlePage);\n       * });\n       *\n       * function authorize(callback) {\n       *   google.auth.getApplicationDefault(function(err, authClient) {\n       *     if (err) {\n       *       console.error('authentication failed: ', err);\n       *       return;\n       *     }\n       *     if (authClient.createScopedRequired &&\n       * authClient.createScopedRequired()) { var scopes =\n       * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n       * authClient.createScoped(scopes);\n       *     }\n       *     callback(authClient);\n       *   });\n       * }\n       * @alias genomics.readgroupsets.coveragebuckets.list\n       * @memberOf! genomics(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.end The end position of the range on the reference, 0-based exclusive. If specified, `referenceName` must also be specified. If unset or 0, defaults to the length of the reference.\n       * @param {integer=} params.pageSize The maximum number of results to return in a single page. If unspecified, defaults to 1024. The maximum value is 2048.\n       * @param {string=} params.pageToken The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of `nextPageToken` from the previous response.\n       * @param {string} params.readGroupSetId Required. The ID of the read group set over which coverage is requested.\n       * @param {string=} params.referenceName The name of the reference to query, within the reference set associated with this query. Optional.\n       * @param {string=} params.start The start position of the range on the reference, 0-based inclusive. If specified, `referenceName` must also be specified. Defaults to 0.\n       * @param {string=} params.targetBucketWidth The desired width of each reported coverage bucket in base pairs. This will be rounded down to the nearest precomputed bucket width; the value of which is returned as `bucketWidth` in the response. Defaults to infinity (each bucket spans an entire reference sequence) or the length of the target range, if specified. The smallest precomputed `bucketWidth` is currently 2048 base pairs; this is subject to change.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/readgroupsets/{readGroupSetId}/coveragebuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['readGroupSetId'],\n          pathParams: ['readGroupSetId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.reads = {\n    /**\n     * genomics.reads.search\n     * @desc Gets a list of reads for one or more read group sets.  For the\n     * definitions of read group sets and other genomics resources, see\n     * [Fundamentals of Google\n     * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)\n     * Reads search operates over a genomic coordinate space of reference\n     * sequence & position defined over the reference sequences to which the\n     * requested read group sets are aligned.  If a target positional range is\n     * specified, search returns all reads whose alignment to the reference\n     * genome overlap the range. A query which specifies only read group set IDs\n     * yields all reads in those read group sets, including unmapped reads.  All\n     * reads returned (including reads on subsequent pages) are ordered by\n     * genomic coordinate (by reference sequence, then position). Reads with\n     * equivalent genomic coordinates are returned in an unspecified order. This\n     * order is consistent, such that two queries for the same content\n     * (regardless of page size) yield reads in the same order across their\n     * respective streams of paginated responses.  Implements\n     * [GlobalAllianceApi.searchReads](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/readmethods.avdl#L85).\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     var alignmentsPage = response['alignments'];\n     *     if (!alignmentsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < alignmentsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in\n     * `alignmentsPage`: console.log(JSON.stringify(alignmentsPage[i], null,\n     * 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.resource.pageToken = response.nextPageToken;\n     *       genomics.reads.search(request, handlePage);\n     *     }\n     *   };\n     *\n     *   genomics.reads.search(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias genomics.reads.search\n     * @memberOf! genomics(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {genomics(v1).SearchReadsRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    search: function search(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/reads/search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.references = {\n    /**\n     * genomics.references.get\n     * @desc Gets a reference.  For the definitions of references and other\n     * genomics resources, see [Fundamentals of Google\n     * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)\n     * Implements\n     * [GlobalAllianceApi.getReference](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L158).\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The ID of the reference.\n     *     referenceId: 'my-reference-id',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   genomics.references.get(request, function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias genomics.references.get\n     * @memberOf! genomics(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.referenceId The ID of the reference.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/references/{referenceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['referenceId'],\n        pathParams: ['referenceId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    search: function search(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/references/search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    bases: {\n      /**\n       * genomics.references.bases.list\n       * @desc Lists the bases in a reference, optionally restricted to a range.\n       * For the definitions of references and other genomics resources, see\n       * [Fundamentals of Google\n       * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)\n       * Implements\n       * [GlobalAllianceApi.getReferenceBases](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L221).\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the Genomics API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/genomics\n       * // 2. This sample uses Application Default Credentials for\n       * authentication.\n       * //    If not already done, install the gcloud CLI from\n       * //    https://cloud.google.com/sdk and run\n       * //    `gcloud beta auth application-default login`.\n       * //    For more information, see\n       * //\n       * https://developers.google.com/identity/protocols/application-default-credentials\n       * // 3. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var genomics = google.genomics('v1');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // The ID of the reference.\n       *     referenceId: 'my-reference-id',  // TODO: Update placeholder value.\n       *\n       *     auth: authClient,\n       *   };\n       *\n       *   var handlePage = function(err, response) {\n       *     if (err) {\n       *       console.error(err);\n       *       return;\n       *     }\n       *\n       *     var nextPageTokenPage = response['nextPageToken'];\n       *     if (!nextPageTokenPage) {\n       *       return;\n       *     }\n       *     // TODO: Change code below to process each `nextPageTokenPage`\n       * resource: console.log(nextPageTokenPage);\n       *\n       *     if (response.nextPageToken) {\n       *       request.pageToken = response.nextPageToken;\n       *       genomics.references.bases.list(request, handlePage);\n       *     }\n       *   };\n       *\n       *   genomics.references.bases.list(request, handlePage);\n       * });\n       *\n       * function authorize(callback) {\n       *   google.auth.getApplicationDefault(function(err, authClient) {\n       *     if (err) {\n       *       console.error('authentication failed: ', err);\n       *       return;\n       *     }\n       *     if (authClient.createScopedRequired &&\n       * authClient.createScopedRequired()) { var scopes =\n       * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n       * authClient.createScoped(scopes);\n       *     }\n       *     callback(authClient);\n       *   });\n       * }\n       * @alias genomics.references.bases.list\n       * @memberOf! genomics(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.end The end position (0-based, exclusive) of this query. Defaults to the length of this reference.\n       * @param {integer=} params.pageSize The maximum number of bases to return in a single page. If unspecified, defaults to 200Kbp (kilo base pairs). The maximum value is 10Mbp (mega base pairs).\n       * @param {string=} params.pageToken The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of `nextPageToken` from the previous response.\n       * @param {string} params.referenceId The ID of the reference.\n       * @param {string=} params.start The start position (0-based) of this query. Defaults to 0.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/references/{referenceId}/bases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['referenceId'],\n          pathParams: ['referenceId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.referencesets = {\n    /**\n     * genomics.referencesets.get\n     * @desc Gets a reference set.  For the definitions of references and other\n     * genomics resources, see [Fundamentals of Google\n     * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)\n     * Implements\n     * [GlobalAllianceApi.getReferenceSet](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L83).\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The ID of the reference set.\n     *     referenceSetId: 'my-reference-set-id',  // TODO: Update placeholder\n     * value.\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   genomics.referencesets.get(request, function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias genomics.referencesets.get\n     * @memberOf! genomics(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.referenceSetId The ID of the reference set.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/referencesets/{referenceSetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['referenceSetId'],\n        pathParams: ['referenceSetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    search: function search(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/referencesets/search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.variants = {\n    /**\n     * genomics.variants.create\n     * @desc Creates a new variant.  For the definitions of variants and other\n     * genomics resources, see [Fundamentals of Google\n     * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   genomics.variants.create(request, function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias genomics.variants.create\n     * @memberOf! genomics(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {genomics(v1).Variant} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/variants').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/variants/{variantId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['variantId'],\n        pathParams: ['variantId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/variants/{variantId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['variantId'],\n        pathParams: ['variantId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    import: function _import(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/variants:import').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    merge: function merge(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/variants:merge').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    patch: function patch(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/variants/{variantId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['variantId'],\n        pathParams: ['variantId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    search: function search(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/variants/search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.variantsets = {\n    /**\n     * genomics.variantsets.create\n     * @desc Creates a new variant set.  For the definitions of variant sets and\n     * other genomics resources, see [Fundamentals of Google\n     * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)\n     * The provided variant set must have a valid `datasetId` set - all other\n     * fields are optional. Note that the `id` field will be ignored, as this is\n     * assigned by the server.\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   genomics.variantsets.create(request, function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias genomics.variantsets.create\n     * @memberOf! genomics(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {genomics(v1).VariantSet} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/variantsets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/variantsets/{variantSetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['variantSetId'],\n        pathParams: ['variantSetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    export: function _export(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/variantsets/{variantSetId}:export').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['variantSetId'],\n        pathParams: ['variantSetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/variantsets/{variantSetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['variantSetId'],\n        pathParams: ['variantSetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    patch: function patch(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/variantsets/{variantSetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['variantSetId'],\n        pathParams: ['variantSetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    search: function search(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://genomics.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/variantsets/search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Genomics;","map":null,"metadata":{},"sourceType":"script"}