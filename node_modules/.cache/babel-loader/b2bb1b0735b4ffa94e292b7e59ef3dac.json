{"ast":null,"code":"/**\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar JWTClient = require('./jwtclient.js');\n\nvar ComputeClient = require('./computeclient.js');\n\nvar exec = require('child_process').exec;\n\nvar fs = require('fs');\n\nvar os = require('os');\n\nvar path = require('path');\n\nvar util = require('util');\n\nvar DefaultTransporter = require('../transporters.js');\n/**\n * GoogleAuth account manager.\n *\n * @constructor\n */\n\n\nfunction GoogleAuth() {\n  this.JWTClient = JWTClient;\n  this.ComputeClient = ComputeClient;\n  this._cachedCredential = null;\n} // Executes the given callback if it is not null.\n\n\nfunction callback(c) {\n  if (c) {\n    return c.apply(null, Array.prototype.slice.call(arguments, 1));\n  }\n} // Creates an Error containing the given message, and includes the message from the optional err\n// passed in.\n\n\nfunction createError(message, err) {\n  var s = message || '';\n\n  if (err) {\n    var errorMessage = String(err);\n\n    if (errorMessage && errorMessage.length > 0) {\n      if (s.length > 0) {\n        s += ' ';\n      }\n\n      s += errorMessage;\n    }\n  }\n\n  return Error(s);\n}\n/**\n * Convenience field mapping in the IAM credential type.\n */\n\n\nGoogleAuth.prototype.IAMAuth = require('./iam.js');\n/**\n * Convenience field mapping in the Compute credential type.\n */\n\nGoogleAuth.prototype.Compute = require('./computeclient.js');\n/**\n * Convenience field mapping in the JWT credential type.\n */\n\nGoogleAuth.prototype.JWT = require('./jwtclient.js');\n/**\n * Convenience field mapping in the JWT Access credential type.\n */\n\nGoogleAuth.prototype.JWTAccess = require('./jwtaccess.js');\n/**\n * Convenience field mapping in the OAuth2 credential type.\n */\n\nGoogleAuth.prototype.OAuth2 = require('./oauth2client.js');\n/**\n * Convenience field mapping to the UserRefreshClient credential type.\n */\n\nGoogleAuth.prototype.UserRefreshClient = require('./refreshclient.js');\n/**\n * Caches a value indicating whether the auth layer is running on Google Compute Engine.\n * @private\n */\n\nGoogleAuth.prototype._isGCE = false;\n/**\n * Caches a value indicating whether we've checked whether the auth layer is running on\n * Google Compute Engine.\n * @private\n */\n\nGoogleAuth.prototype._checked_isGCE = false;\n/**\n * Obtains the default project ID for the application..\n * @param {function=} opt_callback Optional callback.\n */\n\nGoogleAuth.prototype.getDefaultProjectId = function (opt_callback) {\n  var that = this; // In implicit case, supports three environments. In order of precedence, the\n  // implicit environments are:\n  //\n  // * GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n  // * GOOGLE_APPLICATION_CREDENTIALS JSON file\n  // * Get default service project from\n  //  ``$ gcloud beta auth application-default login``\n  // * Google App Engine application ID (Not implemented yet)\n  // * Google Compute Engine project ID (from metadata server) (Not implemented yet)\n\n  if (that._cachedProjectId) {\n    process.nextTick(function () {\n      callback(opt_callback, null, that._cachedProjectId);\n    });\n  } else {\n    var my_callback = function my_callback(err, projectId) {\n      if (!err && projectId) {\n        that._cachedprojectId = projectId;\n      }\n\n      process.nextTick(function () {\n        callback(opt_callback, err, projectId);\n      });\n    }; // environment variable\n\n\n    if (that._getProductionProjectId(my_callback)) {\n      return;\n    } // json file\n\n\n    that._getFileProjectId(function (err, projectId) {\n      if (err || projectId) {\n        my_callback(err, projectId);\n        return;\n      } // Google Cloud SDK default project id\n\n\n      that._getDefaultServiceProjectId(function (err, projectId) {\n        if (err || projectId) {\n          my_callback(err, projectId);\n          return;\n        } // Get project ID from Compute Engine metadata server\n\n\n        that._getGCEProjectId(my_callback);\n      });\n    });\n  }\n};\n/**\n * Loads the project id from environment variables.\n * @param {function} _callback Callback.\n * @api private\n */\n\n\nGoogleAuth.prototype._getProductionProjectId = function (_callback) {\n  var projectId = this._getEnv('GCLOUD_PROJECT') || this._getEnv('GOOGLE_CLOUD_PROJECT');\n\n  if (projectId) {\n    process.nextTick(function () {\n      callback(_callback, null, projectId);\n    });\n  }\n\n  return projectId;\n};\n/**\n * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n * @param {function} _callback Callback.\n * @api private\n */\n\n\nGoogleAuth.prototype._getFileProjectId = function (_callback) {\n  var that = this;\n\n  if (that._cachedCredential) {\n    // Try to read the project ID from the cached credentials file\n    process.nextTick(function () {\n      callback(_callback, null, that._cachedCredential.projectId);\n    });\n    return;\n  } // Try to load a credentials file and read its project ID\n\n\n  var pathExists = that._tryGetApplicationCredentialsFromEnvironmentVariable(function (err, result) {\n    if (!err && result) {\n      callback(_callback, null, result.projectId);\n      return;\n    }\n\n    callback(_callback, err);\n  });\n\n  if (!pathExists) {\n    callback(_callback, null);\n  }\n};\n/**\n * Loads the default project of the Google Cloud SDK.\n * @param {function} _callback Callback.\n * @api private\n */\n\n\nGoogleAuth.prototype._getDefaultServiceProjectId = function (_callback) {\n  this._getSDKDefaultProjectId(function (err, stdout) {\n    var projectId;\n\n    if (!err && stdout) {\n      try {\n        projectId = JSON.parse(stdout).core.project;\n      } catch (err) {\n        projectId = null;\n      }\n    } // Ignore any errors\n\n\n    callback(_callback, null, projectId);\n  });\n};\n/**\n * Run the Google Cloud SDK command that prints the default project ID\n * @param {function} _callback Callback.\n * @api private\n */\n\n\nGoogleAuth.prototype._getSDKDefaultProjectId = function (_callback) {\n  exec('gcloud -q config list core/project --format=json', _callback);\n};\n/**\n * Gets the Compute Engine project ID if it can be inferred.\n * Uses 169.254.169.254 for the metadata server to avoid request\n * latency from DNS lookup.\n * See https://cloud.google.com/compute/docs/metadata#metadataserver\n * for information about this IP address. (This IP is also used for\n * Amazon EC2 instances, so the metadata flavor is crucial.)\n * See https://github.com/google/oauth2client/issues/93 for context about\n * DNS latency.\n *\n * @param {function} _callback Callback.\n * @api private\n */\n\n\nGoogleAuth.prototype._getGCEProjectId = function (_callback) {\n  if (!this.transporter) {\n    this.transporter = new DefaultTransporter();\n  }\n\n  this.transporter.request({\n    method: 'GET',\n    uri: 'http://169.254.169.254/computeMetadata/v1/project/project-id',\n    headers: {\n      'Metadata-Flavor': 'Google'\n    }\n  }, function (err, body, res) {\n    if (err || !res || res.statusCode !== 200 || !body) {\n      callback(_callback, null);\n      return;\n    } // Ignore any errors\n\n\n    callback(_callback, null, body);\n  });\n};\n/**\n * Obtains the default service-level credentials for the application..\n * @param {function=} opt_callback Optional callback.\n */\n\n\nGoogleAuth.prototype.getApplicationDefault = function (opt_callback) {\n  var that = this; // If we've already got a cached credential, just return it.\n\n  if (that._cachedCredential) {\n    process.nextTick(function () {\n      callback(opt_callback, null, that._cachedCredential, that._cachedProjectId);\n    });\n  } else {\n    // Inject our own callback routine, which will cache the credential once it's been created.\n    // It also allows us to ensure that the ultimate callback is always async.\n    var my_callback = function my_callback(err, result) {\n      if (!err && result) {\n        that._cachedCredential = result;\n        that.getDefaultProjectId(function (err, projectId) {\n          process.nextTick(function () {\n            // Ignore default project error\n            callback(opt_callback, null, result, projectId);\n          });\n        });\n      } else {\n        process.nextTick(function () {\n          callback(opt_callback, err, result);\n        });\n      }\n    }; // Check for the existence of a local environment variable pointing to the\n    // location of the credential file. This is typically used in local developer scenarios.\n\n\n    if (that._tryGetApplicationCredentialsFromEnvironmentVariable(my_callback)) {\n      return;\n    } // Look in the well-known credential file location.\n\n\n    if (that._tryGetApplicationCredentialsFromWellKnownFile(my_callback)) {\n      return;\n    } // Determine if we're running on GCE.\n\n\n    that._checkIsGCE(function (gce) {\n      if (gce) {\n        // For GCE, just return a default ComputeClient. It will take care of the rest.\n        my_callback(null, new that.ComputeClient());\n      } else {\n        // We failed to find the default credentials. Bail out with an error.\n        my_callback(new Error('Could not load the default credentials. Browse to ' + 'https://developers.google.com/accounts/docs/application-default-credentials for ' + 'more information.'));\n      }\n    });\n  }\n};\n/**\n * Determines whether the auth layer is running on Google Compute Engine.\n * @param {function=} callback The callback.\n * @api private\n */\n\n\nGoogleAuth.prototype._checkIsGCE = function (callback) {\n  var that = this;\n\n  if (that._checked_isGCE) {\n    callback(that._isGCE);\n  } else {\n    if (!that.transporter) {\n      that.transporter = new DefaultTransporter();\n    }\n\n    that.transporter.request({\n      method: 'GET',\n      uri: 'http://metadata.google.internal',\n      json: true\n    }, function (err, body, res) {\n      if (!err && res && res.headers) {\n        that._isGCE = res.headers['metadata-flavor'] === 'Google';\n      }\n\n      that._checked_isGCE = true;\n      callback(that._isGCE);\n    });\n  }\n};\n/**\n * Attempts to load default credentials from the environment variable path..\n * @param {function=} opt_callback Optional callback.\n * @return {boolean} Returns true if the callback has been executed; false otherwise.\n * @api private\n */\n\n\nGoogleAuth.prototype._tryGetApplicationCredentialsFromEnvironmentVariable = function (opt_callback) {\n  var that = this;\n\n  var credentialsPath = that._getEnv('GOOGLE_APPLICATION_CREDENTIALS');\n\n  if (!credentialsPath || credentialsPath.length === 0) {\n    return false;\n  }\n\n  that._getApplicationCredentialsFromFilePath(credentialsPath, function (err, result) {\n    var wrappedError = null;\n\n    if (err) {\n      wrappedError = createError('Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS ' + 'environment variable.', err);\n    }\n\n    callback(opt_callback, wrappedError, result);\n  });\n\n  return true;\n};\n/**\n * Attempts to load default credentials from a well-known file location\n * @param {function=} opt_callback Optional callback.\n * @return {boolean} Returns true if the callback has been executed; false otherwise.\n * @api private\n */\n\n\nGoogleAuth.prototype._tryGetApplicationCredentialsFromWellKnownFile = function (opt_callback) {\n  var that = this; // First, figure out the location of the file, depending upon the OS type.\n\n  var location = null;\n\n  if (that._isWindows()) {\n    // Windows\n    location = that._getEnv('APPDATA');\n  } else {\n    // Linux or Mac\n    var home = that._getEnv('HOME');\n\n    if (home) {\n      location = that._pathJoin(home, '.config');\n    }\n  } // If we found the root path, expand it.\n\n\n  if (location) {\n    location = that._pathJoin(location, 'gcloud');\n    location = that._pathJoin(location, 'application_default_credentials.json');\n    location = that._mockWellKnownFilePath(location); // Check whether the file exists.\n\n    if (!that._fileExists(location)) {\n      location = null;\n    }\n  } // The file does not exist.\n\n\n  if (!location) {\n    return false;\n  } // The file seems to exist. Try to use it.\n\n\n  this._getApplicationCredentialsFromFilePath(location, opt_callback);\n\n  return true;\n};\n/**\n * Attempts to load default credentials from a file at the given path..\n * @param {string=} filePath The path to the file to read.\n * @param {function=} opt_callback Optional callback.\n * @api private\n */\n\n\nGoogleAuth.prototype._getApplicationCredentialsFromFilePath = function (filePath, opt_callback) {\n  var that = this;\n  var error = null; // Make sure the path looks like a string.\n\n  if (!filePath || filePath.length === 0) {\n    error = new Error('The file path is invalid.');\n  } // Make sure there is a file at the path. lstatSync will throw if there is nothing there.\n\n\n  if (!error) {\n    try {\n      // Resolve path to actual file in case of symlink. Expect a thrown error if not resolvable.\n      filePath = fs.realpathSync(filePath);\n\n      if (!fs.lstatSync(filePath).isFile()) {\n        throw '';\n      }\n    } catch (err) {\n      error = createError(util.format('The file at %s does not exist, or it is not a file.', filePath), err);\n    }\n  } // Now open a read stream on the file, and parse it.\n\n\n  if (!error) {\n    try {\n      var stream = that._createReadStream(filePath);\n\n      that.fromStream(stream, opt_callback);\n    } catch (err) {\n      error = createError(util.format('Unable to read the file at %s.', filePath), err);\n    }\n  }\n\n  if (error) {\n    callback(opt_callback, error);\n  }\n};\n/**\n * Create a credentials instance using the given input options.\n * @param {object=} json The input object.\n * @param {function=} opt_callback Optional callback.\n */\n\n\nGoogleAuth.prototype.fromJSON = function (json, opt_callback) {\n  var that = this;\n  var client;\n\n  if (!json) {\n    callback(opt_callback, new Error('Must pass in a JSON object containing the Google auth settings.'));\n    return;\n  }\n\n  if (json.type === 'authorized_user') {\n    client = new that.UserRefreshClient();\n  } else {\n    client = new that.JWTClient();\n  }\n\n  client.fromJSON(json, function (err) {\n    if (err) {\n      callback(opt_callback, err);\n    } else {\n      callback(opt_callback, null, client);\n    }\n  });\n};\n/**\n * Create a credentials instance using the given input stream.\n * @param {object=} stream The input stream.\n * @param {function=} opt_callback Optional callback.\n */\n\n\nGoogleAuth.prototype.fromStream = function (stream, opt_callback) {\n  var that = this;\n\n  if (!stream) {\n    process.nextTick(function () {\n      callback(opt_callback, new Error('Must pass in a stream containing the Google auth settings.'));\n    });\n    return;\n  }\n\n  var s = '';\n  stream.setEncoding('utf8');\n  stream.on('data', function (chunk) {\n    s += chunk;\n  });\n  stream.on('end', function () {\n    try {\n      var data = JSON.parse(s);\n      that.fromJSON(data, opt_callback);\n    } catch (err) {\n      callback(opt_callback, err);\n    }\n  });\n};\n/**\n * Determines whether the current operating system is Windows.\n * @api private\n * */\n\n\nGoogleAuth.prototype._isWindows = function () {\n  var sys = this._osPlatform();\n\n  if (sys && sys.length >= 3) {\n    if (sys.substring(0, 3).toLowerCase() === 'win') {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Creates a file stream. Allows mocking.\n * @api private\n * */\n\n\nGoogleAuth.prototype._createReadStream = function (filePath) {\n  return fs.createReadStream(filePath);\n};\n/**\n * Gets the value of the environment variable with the given name. Allows mocking.\n * @api private\n * */\n\n\nGoogleAuth.prototype._getEnv = function (name) {\n  return process.env[name];\n};\n/**\n * Gets the current operating system platform. Allows mocking.\n * @api private\n * */\n\n\nGoogleAuth.prototype._osPlatform = function () {\n  return os.platform();\n};\n/**\n * Determines whether a file exists. Allows mocking.\n * @api private\n * */\n\n\nGoogleAuth.prototype._fileExists = function (filePath) {\n  return fs.existsSync(filePath);\n};\n/**\n * Joins two parts of a path. Allows mocking.\n * @api private\n * */\n\n\nGoogleAuth.prototype._pathJoin = function (item1, item2) {\n  return path.join(item1, item2);\n};\n/**\n * Allows mocking of the path to a well-known file.\n * @api private\n * */\n\n\nGoogleAuth.prototype._mockWellKnownFilePath = function (filePath) {\n  return filePath;\n};\n/**\n * Export GoogleAuth.\n */\n\n\nmodule.exports = GoogleAuth;","map":null,"metadata":{},"sourceType":"script"}