{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google OAuth2 API\n *\n * Obtains end-user authorization grants for use with other Google APIs.\n *\n * @example\n * const google = require('googleapis');\n * const oauth2 = google.oauth2('v1');\n *\n * @namespace oauth2\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Oauth2\n */\n\n\nfunction Oauth2(options) {\n  var self = this;\n  self._options = options || {};\n  /**\n   * oauth2.getCertForOpenIdConnect\n   * @alias oauth2.getCertForOpenIdConnect\n   * @memberOf! oauth2(v1)\n   *\n   * @param {object=} params Parameters for request\n   * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n   * @param {callback} callback The callback that handles the response.\n   * @return {object} Request object\n   */\n\n  this.getCertForOpenIdConnect = function (params, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n    var parameters = {\n      options: Object.assign({\n        url: (rootUrl + '/oauth2/v1/certs').replace(/([^:]\\/)\\/+/g, '$1'),\n        method: 'GET'\n      }, options),\n      params: params,\n      requiredParams: [],\n      pathParams: [],\n      context: self\n    };\n    return apirequest_1.createAPIRequest(parameters, callback);\n  };\n  /**\n   * oauth2.getCertForOpenIdConnectRaw\n   * @alias oauth2.getCertForOpenIdConnectRaw\n   * @memberOf! oauth2(v1)\n   *\n   * @param {object=} params Parameters for request\n   * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n   * @param {callback} callback The callback that handles the response.\n   * @return {object} Request object\n   */\n\n\n  this.getCertForOpenIdConnectRaw = function (params, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n    var parameters = {\n      options: Object.assign({\n        url: (rootUrl + '/oauth2/v1/raw_public_keys').replace(/([^:]\\/)\\/+/g, '$1'),\n        method: 'GET'\n      }, options),\n      params: params,\n      requiredParams: [],\n      pathParams: [],\n      context: self\n    };\n    return apirequest_1.createAPIRequest(parameters, callback);\n  };\n  /**\n   * oauth2.getRobotJwk\n   * @alias oauth2.getRobotJwk\n   * @memberOf! oauth2(v1)\n   *\n   * @param {object} params Parameters for request\n   * @param {string} params.robotEmail The email of robot account.\n   * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n   * @param {callback} callback The callback that handles the response.\n   * @return {object} Request object\n   */\n\n\n  this.getRobotJwk = function (params, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n    var parameters = {\n      options: Object.assign({\n        url: (rootUrl + '/service_accounts/v1/jwk/{robotEmail}').replace(/([^:]\\/)\\/+/g, '$1'),\n        method: 'GET'\n      }, options),\n      params: params,\n      requiredParams: ['robotEmail'],\n      pathParams: ['robotEmail'],\n      context: self\n    };\n    return apirequest_1.createAPIRequest(parameters, callback);\n  };\n  /**\n   * oauth2.getRobotMetadataRaw\n   * @alias oauth2.getRobotMetadataRaw\n   * @memberOf! oauth2(v1)\n   *\n   * @param {object} params Parameters for request\n   * @param {string} params.robotEmail The email of robot account.\n   * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n   * @param {callback} callback The callback that handles the response.\n   * @return {object} Request object\n   */\n\n\n  this.getRobotMetadataRaw = function (params, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n    var parameters = {\n      options: Object.assign({\n        url: (rootUrl + '/service_accounts/v1/metadata/raw/{robotEmail}').replace(/([^:]\\/)\\/+/g, '$1'),\n        method: 'GET'\n      }, options),\n      params: params,\n      requiredParams: ['robotEmail'],\n      pathParams: ['robotEmail'],\n      context: self\n    };\n    return apirequest_1.createAPIRequest(parameters, callback);\n  };\n  /**\n   * oauth2.getRobotMetadataX509\n   * @alias oauth2.getRobotMetadataX509\n   * @memberOf! oauth2(v1)\n   *\n   * @param {object} params Parameters for request\n   * @param {string} params.robotEmail The email of robot account.\n   * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n   * @param {callback} callback The callback that handles the response.\n   * @return {object} Request object\n   */\n\n\n  this.getRobotMetadataX509 = function (params, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n    var parameters = {\n      options: Object.assign({\n        url: (rootUrl + '/service_accounts/v1/metadata/x509/{robotEmail}').replace(/([^:]\\/)\\/+/g, '$1'),\n        method: 'GET'\n      }, options),\n      params: params,\n      requiredParams: ['robotEmail'],\n      pathParams: ['robotEmail'],\n      context: self\n    };\n    return apirequest_1.createAPIRequest(parameters, callback);\n  };\n  /**\n   * oauth2.tokeninfo\n   * @desc Get token info\n   * @alias oauth2.tokeninfo\n   * @memberOf! oauth2(v1)\n   *\n   * @param {object=} params Parameters for request\n   * @param {string=} params.access_token The oauth2 access token\n   * @param {string=} params.id_token The ID token\n   * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n   * @param {callback} callback The callback that handles the response.\n   * @return {object} Request object\n   */\n\n\n  this.tokeninfo = function (params, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n    var parameters = {\n      options: Object.assign({\n        url: (rootUrl + '/oauth2/v1/tokeninfo').replace(/([^:]\\/)\\/+/g, '$1'),\n        method: 'POST'\n      }, options),\n      params: params,\n      requiredParams: [],\n      pathParams: [],\n      context: self\n    };\n    return apirequest_1.createAPIRequest(parameters, callback);\n  };\n\n  self.userinfo = {\n    /**\n     * oauth2.userinfo.get\n     * @desc Get user info\n     * @alias oauth2.userinfo.get\n     * @memberOf! oauth2(v1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/oauth2/v1/userinfo').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    v2: {\n      me: {\n        /**\n         * oauth2.userinfo.v2.me.get\n         * @desc Get user info\n         * @alias oauth2.userinfo.v2.me.get\n         * @memberOf! oauth2(v1)\n         *\n         * @param {object=} params Parameters for request\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/userinfo/v2/me').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: [],\n            pathParams: [],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = Oauth2;","map":null,"metadata":{},"sourceType":"script"}