{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Prediction API\n *\n * Lets you access a cloud hosted machine learning service that makes it easy to\n * build smart apps\n *\n * @example\n * const google = require('googleapis');\n * const prediction = google.prediction('v1.6');\n *\n * @namespace prediction\n * @type {Function}\n * @version v1.6\n * @variation v1.6\n * @param {object=} options Options for Prediction\n */\n\n\nfunction Prediction(options) {\n  var self = this;\n  self._options = options || {};\n  self.hostedmodels = {\n    /**\n     * prediction.hostedmodels.predict\n     * @desc Submit input and request an output against a hosted model.\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Prediction API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/prediction\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var prediction = google.prediction('v1.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The project associated with the model.\n     *     project: 'my-project',  // TODO: Update placeholder value.\n     *\n     *     // The name of a hosted model.\n     *     hostedModelName: 'my-hosted-model-name',  // TODO: Update placeholder\n     * value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   prediction.hostedmodels.predict(request, function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias prediction.hostedmodels.predict\n     * @memberOf! prediction(v1.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.hostedModelName The name of a hosted model.\n     * @param {string} params.project The project associated with the model.\n     * @param {prediction(v1.6).Input} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    predict: function predict(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/prediction/v1.6/projects/{project}/hostedmodels/{hostedModelName}/predict').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'hostedModelName'],\n        pathParams: ['hostedModelName', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.trainedmodels = {\n    /**\n     * prediction.trainedmodels.analyze\n     * @desc Get analysis of the model and the data the model was trained on.\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Prediction API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/prediction\n     * // 2. This sample uses Application Default Credentials for\n     * authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //\n     * https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var prediction = google.prediction('v1.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The project associated with the model.\n     *     project: 'my-project',  // TODO: Update placeholder value.\n     *\n     *     // The unique name for the predictive model.\n     *     id: 'my-id',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   prediction.trainedmodels.analyze(request, function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient) {\n     *     if (err) {\n     *       console.error('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired &&\n     * authClient.createScopedRequired()) { var scopes =\n     * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n     * authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     * @alias prediction.trainedmodels.analyze\n     * @memberOf! prediction(v1.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id The unique name for the predictive model.\n     * @param {string} params.project The project associated with the model.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    analyze: function analyze(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/prediction/v1.6/projects/{project}/trainedmodels/{id}/analyze').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'id'],\n        pathParams: ['id', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/prediction/v1.6/projects/{project}/trainedmodels/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'id'],\n        pathParams: ['id', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/prediction/v1.6/projects/{project}/trainedmodels/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'id'],\n        pathParams: ['id', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    insert: function insert(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/prediction/v1.6/projects/{project}/trainedmodels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/prediction/v1.6/projects/{project}/trainedmodels/list').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    predict: function predict(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/prediction/v1.6/projects/{project}/trainedmodels/{id}/predict').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'id'],\n        pathParams: ['id', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    update: function update(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/prediction/v1.6/projects/{project}/trainedmodels/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'id'],\n        pathParams: ['id', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Prediction;","map":null,"metadata":{},"sourceType":"script"}