{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Admin Reports API\n *\n * Fetches reports for the administrators of G Suite customers about the usage,\n * collaboration, security, and risk for their users.\n *\n * @example\n * const google = require('googleapis');\n * const admin = google.admin('reports_v1');\n *\n * @namespace admin\n * @type {Function}\n * @version reports_v1\n * @variation reports_v1\n * @param {object=} options Options for Admin\n */\n\n\nfunction Admin(options) {\n  var self = this;\n  self._options = options || {};\n  self.activities = {\n    /**\n     * reports.activities.list\n     * @desc Retrieves a list of activities for a specific customer and\n     * application.\n     * @alias reports.activities.list\n     * @memberOf! admin(reports_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.actorIpAddress IP Address of host where the event was performed. Supports both IPv4 and IPv6 addresses.\n     * @param {string} params.applicationName Application name for which the events are to be retrieved.\n     * @param {string=} params.customerId Represents the customer for which the data is to be fetched.\n     * @param {string=} params.endTime Return events which occurred at or before this time.\n     * @param {string=} params.eventName Name of the event being queried.\n     * @param {string=} params.filters Event parameters in the form [parameter1 name][operator][parameter1 value],[parameter2 name][operator][parameter2 value],...\n     * @param {integer=} params.maxResults Number of activity records to be shown in each page.\n     * @param {string=} params.pageToken Token to specify next page.\n     * @param {string=} params.startTime Return events which occurred at or after this time.\n     * @param {string} params.userKey Represents the profile id or the user email for which the data should be filtered. When 'all' is specified as the userKey, it returns usageReports for all users.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/reports/v1/activity/users/{userKey}/applications/{applicationName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['userKey', 'applicationName'],\n        pathParams: ['applicationName', 'userKey'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    watch: function watch(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/reports/v1/activity/users/{userKey}/applications/{applicationName}/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['userKey', 'applicationName'],\n        pathParams: ['applicationName', 'userKey'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.channels = {\n    /**\n     * admin.channels.stop\n     * @desc Stop watching resources through this channel\n     * @alias admin.channels.stop\n     * @memberOf! admin(reports_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {admin(reports_v1).Channel} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    stop: function stop(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/reports/v1/admin/reports_v1/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.customerUsageReports = {\n    /**\n     * reports.customerUsageReports.get\n     * @desc Retrieves a report which is a collection of properties / statistics\n     * for a specific customer.\n     * @alias reports.customerUsageReports.get\n     * @memberOf! admin(reports_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.customerId Represents the customer for which the data is to be fetched.\n     * @param {string} params.date Represents the date in yyyy-mm-dd format for which the data is to be fetched.\n     * @param {string=} params.pageToken Token to specify next page.\n     * @param {string=} params.parameters Represents the application name, parameter name pairs to fetch in csv as app_name1:param_name1, app_name2:param_name2.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/reports/v1/usage/dates/{date}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['date'],\n        pathParams: ['date'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.entityUsageReports = {\n    /**\n     * reports.entityUsageReports.get\n     * @desc Retrieves a report which is a collection of properties / statistics\n     * for a set of objects.\n     * @alias reports.entityUsageReports.get\n     * @memberOf! admin(reports_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.customerId Represents the customer for which the data is to be fetched.\n     * @param {string} params.date Represents the date in yyyy-mm-dd format for which the data is to be fetched.\n     * @param {string} params.entityKey Represents the key of object for which the data should be filtered.\n     * @param {string} params.entityType Type of object. Should be one of - gplus_communities.\n     * @param {string=} params.filters Represents the set of filters including parameter operator value.\n     * @param {integer=} params.maxResults Maximum number of results to return. Maximum allowed is 1000\n     * @param {string=} params.pageToken Token to specify next page.\n     * @param {string=} params.parameters Represents the application name, parameter name pairs to fetch in csv as app_name1:param_name1, app_name2:param_name2.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/reports/v1/usage/{entityType}/{entityKey}/dates/{date}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['entityType', 'entityKey', 'date'],\n        pathParams: ['date', 'entityKey', 'entityType'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.userUsageReport = {\n    /**\n     * reports.userUsageReport.get\n     * @desc Retrieves a report which is a collection of properties / statistics\n     * for a set of users.\n     * @alias reports.userUsageReport.get\n     * @memberOf! admin(reports_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.customerId Represents the customer for which the data is to be fetched.\n     * @param {string} params.date Represents the date in yyyy-mm-dd format for which the data is to be fetched.\n     * @param {string=} params.filters Represents the set of filters including parameter operator value.\n     * @param {integer=} params.maxResults Maximum number of results to return. Maximum allowed is 1000\n     * @param {string=} params.pageToken Token to specify next page.\n     * @param {string=} params.parameters Represents the application name, parameter name pairs to fetch in csv as app_name1:param_name1, app_name2:param_name2.\n     * @param {string} params.userKey Represents the profile id or the user email for which the data should be filtered.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/reports/v1/usage/users/{userKey}/dates/{date}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['userKey', 'date'],\n        pathParams: ['date', 'userKey'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Admin;","map":null,"metadata":{},"sourceType":"script"}