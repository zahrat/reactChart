{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Ad Exchange Seller API\n *\n * Accesses the inventory of Ad Exchange seller users and generates reports.\n *\n * @example\n * const google = require('googleapis');\n * const adexchangeseller = google.adexchangeseller('v1');\n *\n * @namespace adexchangeseller\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Adexchangeseller\n */\n\n\nfunction Adexchangeseller(options) {\n  var self = this;\n  self._options = options || {};\n  self.adclients = {\n    /**\n     * adexchangeseller.adclients.list\n     * @desc List all ad clients in this Ad Exchange account.\n     * @alias adexchangeseller.adclients.list\n     * @memberOf! adexchangeseller(v1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {integer=} params.maxResults The maximum number of ad clients to include in the response, used for paging.\n     * @param {string=} params.pageToken A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adexchangeseller/v1/adclients').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.adunits = {\n    /**\n     * adexchangeseller.adunits.get\n     * @desc Gets the specified ad unit in the specified ad client.\n     * @alias adexchangeseller.adunits.get\n     * @memberOf! adexchangeseller(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client for which to get the ad unit.\n     * @param {string} params.adUnitId Ad unit to retrieve.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adexchangeseller/v1/adclients/{adClientId}/adunits/{adUnitId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId', 'adUnitId'],\n        pathParams: ['adClientId', 'adUnitId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adexchangeseller/v1/adclients/{adClientId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    customchannels: {\n      /**\n       * adexchangeseller.adunits.customchannels.list\n       * @desc List all custom channels which the specified ad unit belongs to.\n       * @alias adexchangeseller.adunits.customchannels.list\n       * @memberOf! adexchangeseller(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.adClientId Ad client which contains the ad unit.\n       * @param {string} params.adUnitId Ad unit for which to list custom channels.\n       * @param {integer=} params.maxResults The maximum number of custom channels to include in the response, used for paging.\n       * @param {string=} params.pageToken A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adexchangeseller/v1/adclients/{adClientId}/adunits/{adUnitId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['adClientId', 'adUnitId'],\n          pathParams: ['adClientId', 'adUnitId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.customchannels = {\n    /**\n     * adexchangeseller.customchannels.get\n     * @desc Get the specified custom channel from the specified ad client.\n     * @alias adexchangeseller.customchannels.get\n     * @memberOf! adexchangeseller(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client which contains the custom channel.\n     * @param {string} params.customChannelId Custom channel to retrieve.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adexchangeseller/v1/adclients/{adClientId}/customchannels/{customChannelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId', 'customChannelId'],\n        pathParams: ['adClientId', 'customChannelId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adexchangeseller/v1/adclients/{adClientId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    adunits: {\n      /**\n       * adexchangeseller.customchannels.adunits.list\n       * @desc List all ad units in the specified custom channel.\n       * @alias adexchangeseller.customchannels.adunits.list\n       * @memberOf! adexchangeseller(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.adClientId Ad client which contains the custom channel.\n       * @param {string} params.customChannelId Custom channel for which to list ad units.\n       * @param {boolean=} params.includeInactive Whether to include inactive ad units. Default: true.\n       * @param {integer=} params.maxResults The maximum number of ad units to include in the response, used for paging.\n       * @param {string=} params.pageToken A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adexchangeseller/v1/adclients/{adClientId}/customchannels/{customChannelId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['adClientId', 'customChannelId'],\n          pathParams: ['adClientId', 'customChannelId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.reports = {\n    /**\n     * adexchangeseller.reports.generate\n     * @desc Generate an Ad Exchange report based on the report request sent in\n     * the query parameters. Returns the result as JSON; to retrieve output in\n     * CSV format specify \"alt=csv\" as a query parameter.\n     * @alias adexchangeseller.reports.generate\n     * @memberOf! adexchangeseller(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.dimension Dimensions to base the report on.\n     * @param {string} params.endDate End of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n     * @param {string=} params.filter Filters to be run on the report.\n     * @param {string=} params.locale Optional locale to use for translating report output to a local language. Defaults to \"en_US\" if not specified.\n     * @param {integer=} params.maxResults The maximum number of rows of report data to return.\n     * @param {string=} params.metric Numeric columns to include in the report.\n     * @param {string=} params.sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \"+\" to sort ascending or \"-\" to sort descending. If no prefix is specified, the column is sorted ascending.\n     * @param {string} params.startDate Start of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n     * @param {integer=} params.startIndex Index of the first row of report data to return.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    generate: function generate(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adexchangeseller/v1/reports').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['startDate', 'endDate'],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    saved: {\n      /**\n       * adexchangeseller.reports.saved.generate\n       * @desc Generate an Ad Exchange report based on the saved report ID sent\n       * in the query parameters.\n       * @alias adexchangeseller.reports.saved.generate\n       * @memberOf! adexchangeseller(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.locale Optional locale to use for translating report output to a local language. Defaults to \"en_US\" if not specified.\n       * @param {integer=} params.maxResults The maximum number of rows of report data to return.\n       * @param {string} params.savedReportId The saved report to retrieve.\n       * @param {integer=} params.startIndex Index of the first row of report data to return.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      generate: function generate(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adexchangeseller/v1/reports/{savedReportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['savedReportId'],\n          pathParams: ['savedReportId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adexchangeseller/v1/reports/saved').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.urlchannels = {\n    /**\n     * adexchangeseller.urlchannels.list\n     * @desc List all URL channels in the specified ad client for this Ad\n     * Exchange account.\n     * @alias adexchangeseller.urlchannels.list\n     * @memberOf! adexchangeseller(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client for which to list URL channels.\n     * @param {integer=} params.maxResults The maximum number of URL channels to include in the response, used for paging.\n     * @param {string=} params.pageToken A continuation token, used to page through URL channels. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adexchangeseller/v1/adclients/{adClientId}/urlchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Adexchangeseller;","map":null,"metadata":{},"sourceType":"script"}