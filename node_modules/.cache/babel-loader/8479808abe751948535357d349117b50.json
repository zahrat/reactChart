{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google App Engine Admin API\n *\n * The App Engine Admin API enables developers to provision and manage their App\n * Engine applications.\n *\n * @example\n * const google = require('googleapis');\n * const appengine = google.appengine('v1beta');\n *\n * @namespace appengine\n * @type {Function}\n * @version v1beta\n * @variation v1beta\n * @param {object=} options Options for Appengine\n */\n\n\nfunction Appengine(options) {\n  var self = this;\n  self._options = options || {};\n  self.apps = {\n    /**\n     * appengine.apps.create\n     * @desc Creates an App Engine application for a Google Cloud Platform\n     * project. Required fields: id - The ID of the target Cloud Platform\n     * project. location - The region\n     * (https://cloud.google.com/appengine/docs/locations) where you want\n     * the App Engine application located.For more information about App\n     * Engine applications, see Managing Projects, Applications, and Billing\n     * (https://cloud.google.com/appengine/docs/standard/python/console/).\n     * @alias appengine.apps.create\n     * @memberOf! appengine(v1beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {appengine(v1beta).Application} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    patch: function patch(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    repair: function repair(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}:repair').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    authorizedCertificates: {\n      /**\n       * appengine.apps.authorizedCertificates.create\n       * @desc Uploads the specified SSL certificate.\n       * @alias appengine.apps.authorizedCertificates.create\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `parent`. Name of the parent Application resource. Example: apps/myapp.\n       * @param {appengine(v1beta).AuthorizedCertificate} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'authorizedCertificatesId'],\n          pathParams: ['appsId', 'authorizedCertificatesId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'authorizedCertificatesId'],\n          pathParams: ['appsId', 'authorizedCertificatesId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      patch: function patch(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'authorizedCertificatesId'],\n          pathParams: ['appsId', 'authorizedCertificatesId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    authorizedDomains: {\n      /**\n       * appengine.apps.authorizedDomains.list\n       * @desc Lists all domains the user is authorized to administer.\n       * @alias appengine.apps.authorizedDomains.list\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `parent`. Name of the parent Application resource. Example: apps/myapp.\n       * @param {integer=} params.pageSize Maximum results to return per page.\n       * @param {string=} params.pageToken Continuation token for fetching the next page of results.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/authorizedDomains').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    domainMappings: {\n      /**\n       * appengine.apps.domainMappings.create\n       * @desc Maps a domain to an application. A user must be authorized to\n       * administer a domain in order to map it to an application. For a\n       * list of available authorized domains, see\n       * AuthorizedDomains.ListAuthorizedDomains.\n       * @alias appengine.apps.domainMappings.create\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `parent`. Name of the parent Application resource. Example: apps/myapp.\n       * @param {string=} params.overrideStrategy Whether the domain creation should override any existing mappings for this domain. By default, overrides are rejected.\n       * @param {appengine(v1beta).DomainMapping} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'domainMappingsId'],\n          pathParams: ['appsId', 'domainMappingsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'domainMappingsId'],\n          pathParams: ['appsId', 'domainMappingsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      patch: function patch(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'domainMappingsId'],\n          pathParams: ['appsId', 'domainMappingsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    firewall: {\n      ingressRules: {\n        /**\n         * appengine.apps.firewall.ingressRules.batchUpdate\n         * @desc Replaces the entire firewall ruleset in one bulk operation.\n         * This overrides and replaces the rules of an existing firewall\n         * with the new rules.If the final rule does not match traffic with\n         * the '*' wildcard IP range, then an \"allow all\" rule is explicitly\n         * added to the end of the list.\n         * @alias appengine.apps.firewall.ingressRules.batchUpdate\n         * @memberOf! appengine(v1beta)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.appsId Part of `name`. Name of the Firewall collection to set. Example: apps/myapp/firewall/ingressRules.\n         * @param {appengine(v1beta).BatchUpdateIngressRulesRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        batchUpdate: function batchUpdate(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['appsId'],\n            pathParams: ['appsId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['appsId'],\n            pathParams: ['appsId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'ingressRulesId'],\n            pathParams: ['appsId', 'ingressRulesId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'ingressRulesId'],\n            pathParams: ['appsId', 'ingressRulesId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['appsId'],\n            pathParams: ['appsId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        patch: function patch(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'ingressRulesId'],\n            pathParams: ['appsId', 'ingressRulesId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    },\n    locations: {\n      /**\n       * appengine.apps.locations.get\n       * @desc Get information about a location.\n       * @alias appengine.apps.locations.get\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. Resource name for the location.\n       * @param {string} params.locationsId Part of `name`. See documentation of `appsId`.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/locations/{locationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'locationsId'],\n          pathParams: ['appsId', 'locationsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    operations: {\n      /**\n       * appengine.apps.operations.get\n       * @desc Gets the latest state of a long-running operation. Clients\n       * can use this method to poll the operation result at intervals as\n       * recommended by the API service.\n       * @alias appengine.apps.operations.get\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. The name of the operation resource.\n       * @param {string} params.operationsId Part of `name`. See documentation of `appsId`.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/operations/{operationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'operationsId'],\n          pathParams: ['appsId', 'operationsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    services: {\n      /**\n       * appengine.apps.services.delete\n       * @desc Deletes the specified service and all enclosed versions.\n       * @alias appengine.apps.services.delete\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.\n       * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['appsId', 'servicesId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['appsId', 'servicesId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      patch: function patch(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['appsId', 'servicesId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      versions: {\n        /**\n         * appengine.apps.services.versions.create\n         * @desc Deploys code and resource files to a new version.\n         * @alias appengine.apps.services.versions.create\n         * @memberOf! appengine(v1beta)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.appsId Part of `parent`. Name of the parent resource to create this version under. Example: apps/myapp/services/default.\n         * @param {string} params.servicesId Part of `parent`. See documentation of `appsId`.\n         * @param {appengine(v1beta).Version} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'servicesId'],\n            pathParams: ['appsId', 'servicesId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'servicesId', 'versionsId'],\n            pathParams: ['appsId', 'servicesId', 'versionsId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'servicesId', 'versionsId'],\n            pathParams: ['appsId', 'servicesId', 'versionsId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'servicesId'],\n            pathParams: ['appsId', 'servicesId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        patch: function patch(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'servicesId', 'versionsId'],\n            pathParams: ['appsId', 'servicesId', 'versionsId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        instances: {\n          /**\n           * appengine.apps.services.versions.instances.debug\n           * @desc Enables debugging on a VM instance. This allows you to\n           * use the SSH command to connect to the virtual machine where the\n           * instance lives. While in \"debug mode\", the instance continues\n           * to serve live traffic. You should delete the instance when you\n           * are done debugging and then allow the system to take over and\n           * determine if another instance should be started.Only applicable\n           * for instances in App Engine flexible environment.\n           * @alias appengine.apps.services.versions.instances.debug\n           * @memberOf! appengine(v1beta)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1/instances/instance-1.\n           * @param {string} params.instancesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n           * @param {appengine(v1beta).DebugInstanceRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          debug: function debug(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}:debug').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n              pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          delete: function _delete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n              pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          get: function get(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n              pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'servicesId', 'versionsId'],\n              pathParams: ['appsId', 'servicesId', 'versionsId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = Appengine;","map":null,"metadata":{},"sourceType":"script"}