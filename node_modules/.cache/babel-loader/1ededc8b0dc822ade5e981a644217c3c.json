{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * YouTube Reporting API\n *\n * Schedules reporting jobs containing your YouTube Analytics data and downloads\n * the resulting bulk data reports in the form of CSV files.\n *\n * @example\n * const google = require('googleapis');\n * const youtubereporting = google.youtubereporting('v1');\n *\n * @namespace youtubereporting\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Youtubereporting\n */\n\n\nfunction Youtubereporting(options) {\n  var self = this;\n  self._options = options || {};\n  self.jobs = {\n    /**\n     * youtubereporting.jobs.create\n     * @desc Creates a job and returns it.\n     * @alias youtubereporting.jobs.create\n     * @memberOf! youtubereporting(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.onBehalfOfContentOwner The content owner's external ID on which behalf the user is acting on. If not set, the user is acting for himself (his own channel).\n     * @param {youtubereporting(v1).Job} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://youtubereporting.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://youtubereporting.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['jobId'],\n        pathParams: ['jobId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://youtubereporting.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['jobId'],\n        pathParams: ['jobId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://youtubereporting.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    reports: {\n      /**\n       * youtubereporting.jobs.reports.get\n       * @desc Gets the metadata of a specific report.\n       * @alias youtubereporting.jobs.reports.get\n       * @memberOf! youtubereporting(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.jobId The ID of the job.\n       * @param {string=} params.onBehalfOfContentOwner The content owner's external ID on which behalf the user is acting on. If not set, the user is acting for himself (his own channel).\n       * @param {string} params.reportId The ID of the report to retrieve.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://youtubereporting.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/jobs/{jobId}/reports/{reportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['jobId', 'reportId'],\n          pathParams: ['jobId', 'reportId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://youtubereporting.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/jobs/{jobId}/reports').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['jobId'],\n          pathParams: ['jobId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.media = {\n    /**\n     * youtubereporting.media.download\n     * @desc Method for media download. Download is supported on the URI\n     * `/v1/media/{+name}?alt=media`.\n     * @alias youtubereporting.media.download\n     * @memberOf! youtubereporting(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.resourceName Name of the media that is being downloaded.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    download: function download(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://youtubereporting.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/media/{resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['resourceName'],\n        pathParams: ['resourceName'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.reportTypes = {\n    /**\n     * youtubereporting.reportTypes.list\n     * @desc Lists report types.\n     * @alias youtubereporting.reportTypes.list\n     * @memberOf! youtubereporting(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.includeSystemManaged If set to true, also system-managed report types will be returned; otherwise only the report types that can be used to create new reporting jobs will be returned.\n     * @param {string=} params.onBehalfOfContentOwner The content owner's external ID on which behalf the user is acting on. If not set, the user is acting for himself (his own channel).\n     * @param {integer=} params.pageSize Requested page size. Server may return fewer report types than requested. If unspecified, server will pick an appropriate default.\n     * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListReportTypesResponse.next_page_token returned in response to the previous call to the `ListReportTypes` method.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://youtubereporting.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/reportTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Youtubereporting;","map":null,"metadata":{},"sourceType":"script"}