{"ast":null,"code":"/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar Auth2Client = require('./oauth2client.js');\n\nvar util = require('util');\n/**\n * Google Compute Engine metadata server token endpoint.\n * @private\n */\n\n\nCompute.GOOGLE_OAUTH2_TOKEN_URL_ = 'http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token';\n/**\n * Google Compute Engine service account credentials.\n *\n * Retrieve access token from the metadata server.\n * See: https://developers.google.com/compute/docs/authentication\n * @constructor@constructor\n */\n\nfunction Compute() {\n  Compute.super_.call(this); // Start with an expired refresh token, which will automatically be refreshed\n  // before the first API call is made.\n\n  this.credentials = {\n    refresh_token: 'compute-placeholder',\n    expiry_date: 1\n  }; // Hook the post request method so we can provide better error messages.\n\n  this._postRequest = this._injectErrorMessage;\n}\n/**\n * Inherit from Auth2Client.\n */\n\n\nutil.inherits(Compute, Auth2Client);\n/**\n * Indicates whether the credential requires scopes to be created by calling createdScoped before\n * use.\n * @return {object} The cloned instance.\n */\n\nCompute.prototype.createScopedRequired = function () {\n  // On compute engine, scopes are specified at the compute instance's creation time,\n  // and cannot be changed. For this reason, always return false.\n  return false;\n};\n/**\n * Refreshes the access token.\n * @param {object=} ignored_\n * @param {function=} opt_callback Optional callback.\n * @private\n */\n\n\nCompute.prototype.refreshToken_ = function (ignored_, opt_callback) {\n  var uri = this.opts.tokenUrl || Compute.GOOGLE_OAUTH2_TOKEN_URL_; // request for new token\n\n  this.transporter.request({\n    method: 'GET',\n    uri: uri,\n    json: true\n  }, function (err, tokens, response) {\n    if (!err && tokens && tokens.expires_in) {\n      tokens.expiry_date = new Date().getTime() + tokens.expires_in * 1000;\n      delete tokens.expires_in;\n    }\n\n    if (opt_callback) {\n      opt_callback(err, tokens, response);\n    }\n  });\n};\n/**\n * Inserts a helpful error message guiding the user toward fixing common auth issues.\n * @param {object} err Error result.\n * @param {object} result The result.\n * @param {object} response The HTTP response.\n * @param {Function} callback The callback.\n * @private\n */\n\n\nCompute.prototype._injectErrorMessage = function (err, result, response, callback) {\n  if (response && response.statusCode) {\n    var helpfulMessage = null;\n\n    if (response.statusCode === 403) {\n      helpfulMessage = 'A Forbidden error was returned while attempting to retrieve an access ' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have the correct permission scopes specified.';\n    } else if (response.statusCode === 404) {\n      helpfulMessage = 'A Not Found error was returned while attempting to retrieve an access' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have any permission scopes specified.';\n    }\n\n    if (helpfulMessage) {\n      if (err && err.message) {\n        helpfulMessage += ' ' + err.message;\n      }\n\n      if (err) {\n        err.message = helpfulMessage;\n      } else {\n        err = new Error(helpfulMessage);\n        err.code = response.statusCode;\n      }\n    }\n  }\n\n  callback(err, result, response);\n};\n/**\n * Export Compute.\n */\n\n\nmodule.exports = Compute;","map":null,"metadata":{},"sourceType":"script"}