{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Cloud User Accounts API\n *\n * Creates and manages users and groups for accessing Google Compute Engine\n * virtual machines.\n *\n * @example\n * const google = require('googleapis');\n * const clouduseraccounts = google.clouduseraccounts('vm_beta');\n *\n * @namespace clouduseraccounts\n * @type {Function}\n * @version vm_beta\n * @variation vm_beta\n * @param {object=} options Options for Clouduseraccounts\n */\n\n\nfunction Clouduseraccounts(options) {\n  var self = this;\n  self._options = options || {};\n  self.globalAccountsOperations = {\n    /**\n     * clouduseraccounts.globalAccountsOperations.delete\n     * @desc Deletes the specified operation resource.\n     * @alias clouduseraccounts.globalAccountsOperations.delete\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.operation Name of the Operations resource to delete.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.groups = {\n    /**\n     * clouduseraccounts.groups.addMember\n     * @desc Adds users to the specified group.\n     * @alias clouduseraccounts.groups.addMember\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the group for this request.\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(vm_beta).GroupsAddMemberRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    addMember: function addMember(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/global/groups/{groupName}/addMember').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/global/groups/{groupName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/global/groups/{groupName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    insert: function insert(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/global/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/global/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    removeMember: function removeMember(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/global/groups/{groupName}/removeMember').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.linux = {\n    /**\n     * clouduseraccounts.linux.getAuthorizedKeysView\n     * @desc Returns a list of authorized public keys for a specific user\n     * account.\n     * @alias clouduseraccounts.linux.getAuthorizedKeysView\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.instance The fully-qualified URL of the virtual machine requesting the view.\n     * @param {boolean=} params.login Whether the view was requested as part of a user-initiated login.\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user The user account for which you want to get a list of authorized public keys.\n     * @param {string} params.zone Name of the zone for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getAuthorizedKeysView: function getAuthorizedKeysView(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/zones/{zone}/authorizedKeysView/{user}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'zone', 'user', 'instance'],\n        pathParams: ['project', 'user', 'zone'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    getLinuxAccountViews: function getLinuxAccountViews(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/zones/{zone}/linuxAccountViews').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['project', 'zone'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.users = {\n    /**\n     * clouduseraccounts.users.addPublicKey\n     * @desc Adds a public key to the specified User resource with the data\n     * included in the request.\n     * @alias clouduseraccounts.users.addPublicKey\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user for this request.\n     * @param {clouduseraccounts(vm_beta).PublicKey} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    addPublicKey: function addPublicKey(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/global/users/{user}/addPublicKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/global/users/{user}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/global/users/{user}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    insert: function insert(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/global/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/global/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    removePublicKey: function removePublicKey(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/clouduseraccounts/vm_beta/projects/{project}/global/users/{user}/removePublicKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user', 'fingerprint'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Clouduseraccounts;","map":null,"metadata":{},"sourceType":"script"}