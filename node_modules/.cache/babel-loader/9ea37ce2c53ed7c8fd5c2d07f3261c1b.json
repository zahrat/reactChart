{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google Cloud Dataproc API\n *\n * Manages Hadoop-based clusters and jobs on Google Cloud Platform.\n *\n * @example\n * const google = require('googleapis');\n * const dataproc = google.dataproc('v1');\n *\n * @namespace dataproc\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Dataproc\n */\n\n\nfunction Dataproc(options) {\n  var self = this;\n  self._options = options || {};\n  self.projects = {\n    regions: {\n      clusters: {\n        /**\n         * dataproc.projects.regions.clusters.create\n         * @desc Creates a cluster in a project.\n         * @example\n         * // BEFORE RUNNING:\n         * // ---------------\n         * // 1. If not already done, enable the Google Cloud Dataproc API\n         * //    and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/dataproc\n         * // 2. This sample uses Application Default Credentials for\n         * authentication.\n         * //    If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk and run\n         * //    `gcloud beta auth application-default login`.\n         * //    For more information, see\n         * //\n         * https://developers.google.com/identity/protocols/application-default-credentials\n         * // 3. Install the Node.js client library by running\n         * //    `npm install googleapis --save`\n         *\n         * var google = require('googleapis');\n         * var dataproc = google.dataproc('v1');\n         *\n         * authorize(function(authClient) {\n         *   var request = {\n         *     // Required. The ID of the Google Cloud Platform project that the\n         * cluster belongs to. projectId: 'my-project-id',  // TODO: Update\n         * placeholder value.\n         *\n         *     // Required. The Cloud Dataproc region in which to handle the\n         * request. region: 'my-region',  // TODO: Update placeholder value.\n         *\n         *     resource: {\n         *       // TODO: Add desired properties to the request body.\n         *     },\n         *\n         *     auth: authClient,\n         *   };\n         *\n         *   dataproc.projects.regions.clusters.create(request, function(err,\n         * response) { if (err) { console.error(err); return;\n         *     }\n         *\n         *     // TODO: Change code below to process the `response` object:\n         *     console.log(JSON.stringify(response, null, 2));\n         *   });\n         * });\n         *\n         * function authorize(callback) {\n         *   google.auth.getApplicationDefault(function(err, authClient) {\n         *     if (err) {\n         *       console.error('authentication failed: ', err);\n         *       return;\n         *     }\n         *     if (authClient.createScopedRequired &&\n         * authClient.createScopedRequired()) { var scopes =\n         * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n         * authClient.createScoped(scopes);\n         *     }\n         *     callback(authClient);\n         *   });\n         * }\n         * @alias dataproc.projects.regions.clusters.create\n         * @memberOf! dataproc(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.projectId Required. The ID of the Google Cloud Platform project that the cluster belongs to.\n         * @param {string} params.region Required. The Cloud Dataproc region in which to handle the request.\n         * @param {string=} params.requestId Optional. A unique id used to identify the request. If the server receives two CreateClusterRequest requests with the same id, then the second request will be ignored and the first google.longrunning.Operation created and stored in the backend is returned.It is recommended to always set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.\n         * @param {dataproc(v1).Cluster} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dataproc.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/regions/{region}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region'],\n            pathParams: ['projectId', 'region'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dataproc.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/regions/{region}/clusters/{clusterName}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region', 'clusterName'],\n            pathParams: ['clusterName', 'projectId', 'region'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        diagnose: function diagnose(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dataproc.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/regions/{region}/clusters/{clusterName}:diagnose').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region', 'clusterName'],\n            pathParams: ['clusterName', 'projectId', 'region'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dataproc.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/regions/{region}/clusters/{clusterName}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region', 'clusterName'],\n            pathParams: ['clusterName', 'projectId', 'region'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dataproc.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/regions/{region}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region'],\n            pathParams: ['projectId', 'region'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        patch: function patch(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dataproc.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/regions/{region}/clusters/{clusterName}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region', 'clusterName'],\n            pathParams: ['clusterName', 'projectId', 'region'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      jobs: {\n        /**\n         * dataproc.projects.regions.jobs.cancel\n         * @desc Starts a job cancellation request. To access the job resource\n         * after cancellation, call regions/{region}/jobs.list or\n         * regions/{region}/jobs.get.\n         * @example\n         * // BEFORE RUNNING:\n         * // ---------------\n         * // 1. If not already done, enable the Google Cloud Dataproc API\n         * //    and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/dataproc\n         * // 2. This sample uses Application Default Credentials for\n         * authentication.\n         * //    If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk and run\n         * //    `gcloud beta auth application-default login`.\n         * //    For more information, see\n         * //\n         * https://developers.google.com/identity/protocols/application-default-credentials\n         * // 3. Install the Node.js client library by running\n         * //    `npm install googleapis --save`\n         *\n         * var google = require('googleapis');\n         * var dataproc = google.dataproc('v1');\n         *\n         * authorize(function(authClient) {\n         *   var request = {\n         *     // Required. The ID of the Google Cloud Platform project that the\n         * job belongs to. projectId: 'my-project-id',  // TODO: Update\n         * placeholder value.\n         *\n         *     // Required. The Cloud Dataproc region in which to handle the\n         * request. region: 'my-region',  // TODO: Update placeholder value.\n         *\n         *     // Required. The job ID.\n         *     jobId: 'my-job-id',  // TODO: Update placeholder value.\n         *\n         *     resource: {\n         *       // TODO: Add desired properties to the request body.\n         *     },\n         *\n         *     auth: authClient,\n         *   };\n         *\n         *   dataproc.projects.regions.jobs.cancel(request, function(err,\n         * response) { if (err) { console.error(err); return;\n         *     }\n         *\n         *     // TODO: Change code below to process the `response` object:\n         *     console.log(JSON.stringify(response, null, 2));\n         *   });\n         * });\n         *\n         * function authorize(callback) {\n         *   google.auth.getApplicationDefault(function(err, authClient) {\n         *     if (err) {\n         *       console.error('authentication failed: ', err);\n         *       return;\n         *     }\n         *     if (authClient.createScopedRequired &&\n         * authClient.createScopedRequired()) { var scopes =\n         * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n         * authClient.createScoped(scopes);\n         *     }\n         *     callback(authClient);\n         *   });\n         * }\n         * @alias dataproc.projects.regions.jobs.cancel\n         * @memberOf! dataproc(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.jobId Required. The job ID.\n         * @param {string} params.projectId Required. The ID of the Google Cloud Platform project that the job belongs to.\n         * @param {string} params.region Required. The Cloud Dataproc region in which to handle the request.\n         * @param {dataproc(v1).CancelJobRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        cancel: function cancel(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dataproc.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/regions/{region}/jobs/{jobId}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region', 'jobId'],\n            pathParams: ['jobId', 'projectId', 'region'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dataproc.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/regions/{region}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region', 'jobId'],\n            pathParams: ['jobId', 'projectId', 'region'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dataproc.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/regions/{region}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region', 'jobId'],\n            pathParams: ['jobId', 'projectId', 'region'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dataproc.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/regions/{region}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region'],\n            pathParams: ['projectId', 'region'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        patch: function patch(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dataproc.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/regions/{region}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region', 'jobId'],\n            pathParams: ['jobId', 'projectId', 'region'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        submit: function submit(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dataproc.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/regions/{region}/jobs:submit').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region'],\n            pathParams: ['projectId', 'region'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      operations: {\n        /**\n         * dataproc.projects.regions.operations.cancel\n         * @desc Starts asynchronous cancellation on a long-running operation.\n         * The server makes a best effort to cancel the operation, but success\n         * is not guaranteed. If the server doesn't support this method, it\n         * returns google.rpc.Code.UNIMPLEMENTED. Clients can use\n         * Operations.GetOperation or other methods to check whether the\n         * cancellation succeeded or whether the operation completed despite\n         * cancellation. On successful cancellation, the operation is not\n         * deleted; instead, it becomes an operation with an Operation.error\n         * value with a google.rpc.Status.code of 1, corresponding to\n         * Code.CANCELLED.\n         * @example\n         * // BEFORE RUNNING:\n         * // ---------------\n         * // 1. If not already done, enable the Google Cloud Dataproc API\n         * //    and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/dataproc\n         * // 2. This sample uses Application Default Credentials for\n         * authentication.\n         * //    If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk and run\n         * //    `gcloud beta auth application-default login`.\n         * //    For more information, see\n         * //\n         * https://developers.google.com/identity/protocols/application-default-credentials\n         * // 3. Install the Node.js client library by running\n         * //    `npm install googleapis --save`\n         *\n         * var google = require('googleapis');\n         * var dataproc = google.dataproc('v1');\n         *\n         * authorize(function(authClient) {\n         *   var request = {\n         *     // The name of the operation resource to be cancelled.\n         *     name:\n         * 'projects/my-project/regions/my-region/operations/my-operation',  //\n         * TODO: Update placeholder value.\n         *\n         *     auth: authClient,\n         *   };\n         *\n         *   dataproc.projects.regions.operations.cancel(request, function(err)\n         * { if (err) { console.error(err); return;\n         *     }\n         *   });\n         * });\n         *\n         * function authorize(callback) {\n         *   google.auth.getApplicationDefault(function(err, authClient) {\n         *     if (err) {\n         *       console.error('authentication failed: ', err);\n         *       return;\n         *     }\n         *     if (authClient.createScopedRequired &&\n         * authClient.createScopedRequired()) { var scopes =\n         * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n         * authClient.createScoped(scopes);\n         *     }\n         *     callback(authClient);\n         *   });\n         * }\n         * @alias dataproc.projects.regions.operations.cancel\n         * @memberOf! dataproc(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.name The name of the operation resource to be cancelled.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        cancel: function cancel(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dataproc.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dataproc.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dataproc.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dataproc.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = Dataproc;","map":null,"metadata":{},"sourceType":"script"}