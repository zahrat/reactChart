{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Tag Manager API\n *\n * Accesses Tag Manager accounts and containers.\n *\n * @example\n * const google = require('googleapis');\n * const tagmanager = google.tagmanager('v2');\n *\n * @namespace tagmanager\n * @type {Function}\n * @version v2\n * @variation v2\n * @param {object=} options Options for Tagmanager\n */\n\n\nfunction Tagmanager(options) {\n  var self = this;\n  self._options = options || {};\n  self.accounts = {\n    /**\n     * tagmanager.accounts.get\n     * @desc Gets a GTM Account.\n     * @alias tagmanager.accounts.get\n     * @memberOf! tagmanager(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.path GTM Accounts's API relative path. Example: accounts/{account_id}\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['path'],\n        pathParams: ['path'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/tagmanager/v2/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    update: function update(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['path'],\n        pathParams: ['path'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    containers: {\n      /**\n       * tagmanager.accounts.containers.create\n       * @desc Creates a Container.\n       * @alias tagmanager.accounts.containers.create\n       * @memberOf! tagmanager(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.parent GTM Account's API relative path. Example: accounts/{account_id}.\n       * @param {tagmanager(v2).Container} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v2/{parent}/containers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['path'],\n          pathParams: ['path'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['path'],\n          pathParams: ['path'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v2/{parent}/containers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      update: function update(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['path'],\n          pathParams: ['path'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      environments: {\n        /**\n         * tagmanager.accounts.containers.environments.create\n         * @desc Creates a GTM Environment.\n         * @alias tagmanager.accounts.containers.environments.create\n         * @memberOf! tagmanager(v2)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.parent GTM Container's API relative path. Example: accounts/{account_id}/containers/{container_id}\n         * @param {tagmanager(v2).Environment} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{parent}/environments').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{parent}/environments').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        patch: function patch(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        reauthorize: function reauthorize(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}:reauthorize').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      versions: {\n        /**\n         * tagmanager.accounts.containers.versions.delete\n         * @desc Deletes a Container Version.\n         * @alias tagmanager.accounts.containers.versions.delete\n         * @memberOf! tagmanager(v2)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.path GTM ContainerVersion's API relative path. Example: accounts/{account_id}/containers/{container_id}/versions/{version_id}\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        live: function live(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{parent}/versions:live').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        publish: function publish(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}:publish').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        set_latest: function set_latest(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}:set_latest').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        undelete: function undelete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}:undelete').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      version_headers: {\n        /**\n         * tagmanager.accounts.containers.version_headers.latest\n         * @desc Gets the latest container version header\n         * @alias tagmanager.accounts.containers.version_headers.latest\n         * @memberOf! tagmanager(v2)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.parent GTM Container's API relative path. Example: accounts/{account_id}/containers/{container_id}\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        latest: function latest(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{parent}/version_headers:latest').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{parent}/version_headers').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      workspaces: {\n        /**\n         * tagmanager.accounts.containers.workspaces.create\n         * @desc Creates a Workspace.\n         * @alias tagmanager.accounts.containers.workspaces.create\n         * @memberOf! tagmanager(v2)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.parent GTM parent Container's API relative path. Example: accounts/{account_id}/containers/{container_id}\n         * @param {tagmanager(v2).Workspace} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{parent}/workspaces').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        create_version: function create_version(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}:create_version').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        getProposal: function getProposal(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        getStatus: function getStatus(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}/status').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{parent}/workspaces').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        quick_preview: function quick_preview(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}:quick_preview').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        resolve_conflict: function resolve_conflict(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}:resolve_conflict').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        sync: function sync(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}:sync').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        updateProposal: function updateProposal(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['path'],\n            pathParams: ['path'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        built_in_variables: {\n          /**\n           * tagmanager.accounts.containers.workspaces.built_in_variables.create\n           * @desc Creates one or more GTM Built-In Variables.\n           * @alias\n           * tagmanager.accounts.containers.workspaces.built_in_variables.create\n           * @memberOf! tagmanager(v2)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.parent GTM Workspace's API relative path. Example: accounts/{account_id}/containers/{container_id}/workspaces/{workspace_id}\n           * @param {string=} params.type The types of built-in variables to enable.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          create: function create(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{parent}/built_in_variables').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          delete: function _delete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{parent}/built_in_variables').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          revert: function revert(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}/built_in_variables:revert').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        },\n        folders: {\n          /**\n           * tagmanager.accounts.containers.workspaces.folders.create\n           * @desc Creates a GTM Folder.\n           * @alias\n           * tagmanager.accounts.containers.workspaces.folders.create\n           * @memberOf! tagmanager(v2)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.parent GTM Workspace's API relative path. Example: accounts/{account_id}/containers/{container_id}/workspaces/{workspace_id}\n           * @param {tagmanager(v2).Folder} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          create: function create(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{parent}/folders').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          delete: function _delete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          entities: function entities(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}:entities').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          get: function get(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{parent}/folders').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          move_entities_to_folder: function move_entities_to_folder(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}:move_entities_to_folder').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          revert: function revert(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}:revert').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          update: function update(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'PUT'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        },\n        proposal: {\n          /**\n           * tagmanager.accounts.containers.workspaces.proposal.create\n           * @desc Creates a GTM Workspace Proposal.\n           * @alias\n           * tagmanager.accounts.containers.workspaces.proposal.create\n           * @memberOf! tagmanager(v2)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.parent GTM Workspace's API relative path. Example: accounts/{aid}/containers/{cid}/workspace/{wid}\n           * @param {tagmanager(v2).CreateWorkspaceProposalRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          create: function create(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{parent}/proposal').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          delete: function _delete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        },\n        tags: {\n          /**\n           * tagmanager.accounts.containers.workspaces.tags.create\n           * @desc Creates a GTM Tag.\n           * @alias\n           * tagmanager.accounts.containers.workspaces.tags.create\n           * @memberOf! tagmanager(v2)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.parent GTM Workspace's API relative path. Example: accounts/{account_id}/containers/{container_id}/workspaces/{workspace_id}\n           * @param {tagmanager(v2).Tag} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          create: function create(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{parent}/tags').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          delete: function _delete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          get: function get(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{parent}/tags').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          revert: function revert(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}:revert').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          update: function update(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'PUT'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        },\n        triggers: {\n          /**\n           * tagmanager.accounts.containers.workspaces.triggers.create\n           * @desc Creates a GTM Trigger.\n           * @alias\n           * tagmanager.accounts.containers.workspaces.triggers.create\n           * @memberOf! tagmanager(v2)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.parent GTM Workspaces's API relative path. Example: accounts/{account_id}/containers/{container_id}/workspaces/{workspace_id}\n           * @param {tagmanager(v2).Trigger} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          create: function create(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{parent}/triggers').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          delete: function _delete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          get: function get(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{parent}/triggers').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          revert: function revert(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}:revert').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          update: function update(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'PUT'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        },\n        variables: {\n          /**\n           * tagmanager.accounts.containers.workspaces.variables.create\n           * @desc Creates a GTM Variable.\n           * @alias\n           * tagmanager.accounts.containers.workspaces.variables.create\n           * @memberOf! tagmanager(v2)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.parent GTM Workspace's API relative path. Example: accounts/{account_id}/containers/{container_id}/workspaces/{workspace_id}\n           * @param {tagmanager(v2).Variable} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          create: function create(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{parent}/variables').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          delete: function _delete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          get: function get(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{parent}/variables').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          revert: function revert(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}:revert').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          update: function update(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'PUT'\n              }, options),\n              params: params,\n              requiredParams: ['path'],\n              pathParams: ['path'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        }\n      }\n    },\n    user_permissions: {\n      /**\n       * tagmanager.accounts.user_permissions.create\n       * @desc Creates a user's Account & Container access.\n       * @alias tagmanager.accounts.user_permissions.create\n       * @memberOf! tagmanager(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.parent GTM Account's API relative path. Example: accounts/{account_id}\n       * @param {tagmanager(v2).UserPermission} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v2/{parent}/user_permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['path'],\n          pathParams: ['path'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['path'],\n          pathParams: ['path'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v2/{parent}/user_permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      update: function update(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/tagmanager/v2/{path}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['path'],\n          pathParams: ['path'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\nmodule.exports = Tagmanager;","map":null,"metadata":{},"sourceType":"script"}