{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * CustomSearch API\n *\n * Searches over a website or collection of websites\n *\n * @example\n * const google = require('googleapis');\n * const customsearch = google.customsearch('v1');\n *\n * @namespace customsearch\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Customsearch\n */\n\n\nfunction Customsearch(options) {\n  var self = this;\n  self._options = options || {};\n  self.cse = {\n    /**\n     * search.cse.list\n     * @desc Returns metadata about the search performed, metadata about the\n     * custom search engine used for the search, and the search results.\n     * @alias search.cse.list\n     * @memberOf! customsearch(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.c2coff Turns off the translation between zh-CN and zh-TW.\n     * @param {string=} params.cr Country restrict(s).\n     * @param {string=} params.cx The custom search engine ID to scope this search query\n     * @param {string=} params.dateRestrict Specifies all search results are from a time period\n     * @param {string=} params.exactTerms Identifies a phrase that all documents in the search results must contain\n     * @param {string=} params.excludeTerms Identifies a word or phrase that should not appear in any documents in the search results\n     * @param {string=} params.fileType Returns images of a specified type. Some of the allowed values are: bmp, gif, png, jpg, svg, pdf, ...\n     * @param {string=} params.filter Controls turning on or off the duplicate content filter.\n     * @param {string=} params.gl Geolocation of end user.\n     * @param {string=} params.googlehost The local Google domain to use to perform the search.\n     * @param {string=} params.highRange Creates a range in form as_nlo value..as_nhi value and attempts to append it to query\n     * @param {string=} params.hl Sets the user interface language.\n     * @param {string=} params.hq Appends the extra query terms to the query.\n     * @param {string=} params.imgColorType Returns black and white, grayscale, or color images: mono, gray, and color.\n     * @param {string=} params.imgDominantColor Returns images of a specific dominant color: yellow, green, teal, blue, purple, pink, white, gray, black and brown.\n     * @param {string=} params.imgSize Returns images of a specified size, where size can be one of: icon, small, medium, large, xlarge, xxlarge, and huge.\n     * @param {string=} params.imgType Returns images of a type, which can be one of: clipart, face, lineart, news, and photo.\n     * @param {string=} params.linkSite Specifies that all search results should contain a link to a particular URL\n     * @param {string=} params.lowRange Creates a range in form as_nlo value..as_nhi value and attempts to append it to query\n     * @param {string=} params.lr The language restriction for the search results\n     * @param {integer=} params.num Number of search results to return\n     * @param {string=} params.orTerms Provides additional search terms to check for in a document, where each document in the search results must contain at least one of the additional search terms\n     * @param {string} params.q Query\n     * @param {string=} params.relatedSite Specifies that all search results should be pages that are related to the specified URL\n     * @param {string=} params.rights Filters based on licensing. Supported values include: cc_publicdomain, cc_attribute, cc_sharealike, cc_noncommercial, cc_nonderived and combinations of these.\n     * @param {string=} params.safe Search safety level\n     * @param {string=} params.searchType Specifies the search type: image.\n     * @param {string=} params.siteSearch Specifies all search results should be pages from a given site\n     * @param {string=} params.siteSearchFilter Controls whether to include or exclude results from the site named in the as_sitesearch parameter\n     * @param {string=} params.sort The sort expression to apply to the results\n     * @param {integer=} params.start The index of the first result to return\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/customsearch/v1').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['q'],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    siterestrict: {\n      /**\n       * search.cse.siterestrict.list\n       * @desc (Closed Beta API) Returns metadata about the search performed,\n       * metadata about the custom search engine used for the search, and the\n       * search results only for site-restrict cses.\n       * @alias search.cse.siterestrict.list\n       * @memberOf! customsearch(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.c2coff Turns off the translation between zh-CN and zh-TW.\n       * @param {string=} params.cr Country restrict(s).\n       * @param {string=} params.cx The custom search engine ID to scope this search query\n       * @param {string=} params.dateRestrict Specifies all search results are from a time period\n       * @param {string=} params.exactTerms Identifies a phrase that all documents in the search results must contain\n       * @param {string=} params.excludeTerms Identifies a word or phrase that should not appear in any documents in the search results\n       * @param {string=} params.fileType Returns images of a specified type. Some of the allowed values are: bmp, gif, png, jpg, svg, pdf, ...\n       * @param {string=} params.filter Controls turning on or off the duplicate content filter.\n       * @param {string=} params.gl Geolocation of end user.\n       * @param {string=} params.googlehost The local Google domain to use to perform the search.\n       * @param {string=} params.highRange Creates a range in form as_nlo value..as_nhi value and attempts to append it to query\n       * @param {string=} params.hl Sets the user interface language.\n       * @param {string=} params.hq Appends the extra query terms to the query.\n       * @param {string=} params.imgColorType Returns black and white, grayscale, or color images: mono, gray, and color.\n       * @param {string=} params.imgDominantColor Returns images of a specific dominant color: yellow, green, teal, blue, purple, pink, white, gray, black and brown.\n       * @param {string=} params.imgSize Returns images of a specified size, where size can be one of: icon, small, medium, large, xlarge, xxlarge, and huge.\n       * @param {string=} params.imgType Returns images of a type, which can be one of: clipart, face, lineart, news, and photo.\n       * @param {string=} params.linkSite Specifies that all search results should contain a link to a particular URL\n       * @param {string=} params.lowRange Creates a range in form as_nlo value..as_nhi value and attempts to append it to query\n       * @param {string=} params.lr The language restriction for the search results\n       * @param {integer=} params.num Number of search results to return\n       * @param {string=} params.orTerms Provides additional search terms to check for in a document, where each document in the search results must contain at least one of the additional search terms\n       * @param {string} params.q Query\n       * @param {string=} params.relatedSite Specifies that all search results should be pages that are related to the specified URL\n       * @param {string=} params.rights Filters based on licensing. Supported values include: cc_publicdomain, cc_attribute, cc_sharealike, cc_noncommercial, cc_nonderived and combinations of these.\n       * @param {string=} params.safe Search safety level\n       * @param {string=} params.searchType Specifies the search type: image.\n       * @param {string=} params.siteSearch Specifies all search results should be pages from a given site\n       * @param {string=} params.siteSearchFilter Controls whether to include or exclude results from the site named in the as_sitesearch parameter\n       * @param {string=} params.sort The sort expression to apply to the results\n       * @param {integer=} params.start The index of the first result to return\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/customsearch/v1/siterestrict').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['q'],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\nmodule.exports = Customsearch;","map":null,"metadata":{},"sourceType":"script"}