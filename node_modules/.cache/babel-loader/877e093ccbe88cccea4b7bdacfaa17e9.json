{"ast":null,"code":"/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar Auth2Client = require('./oauth2client.js');\n\nvar gToken = require('gtoken');\n\nvar JWTAccess = require('./jwtaccess.js');\n\nvar noop = require('lodash.noop');\n\nvar util = require('util');\n/**\n * JWT service account credentials.\n *\n * Retrieve access token using gtoken.\n *\n * @param {string=} email service account email address.\n * @param {string=} keyFile path to private key file.\n * @param {string=} key value of key\n * @param {(string|array)=} scopes list of requested scopes or a single scope.\n * @param {string=} subject impersonated account's email address.\n * @constructor\n */\n\n\nfunction JWT(email, keyFile, key, scopes, subject) {\n  JWT.super_.call(this);\n  this.email = email;\n  this.keyFile = keyFile;\n  this.key = key;\n  this.scopes = scopes;\n  this.subject = subject;\n  this.gToken = gToken;\n  this.credentials = {\n    refresh_token: 'jwt-placeholder',\n    expiry_date: 1\n  };\n}\n/**\n * Inherit from Auth2Client.\n */\n\n\nutil.inherits(JWT, Auth2Client);\n/**\n * Creates a copy of the credential with the specified scopes.\n * @param {(string|array)=} scopes List of requested scopes or a single scope.\n * @return {object} The cloned instance.\n */\n\nJWT.prototype.createScoped = function (scopes) {\n  return new JWT(this.email, this.keyFile, this.key, scopes, this.subject);\n};\n/**\n * Obtains the metadata to be sent with the request.\n *\n * @param {string} opt_uri the URI being authorized.\n * @param {function} metadataCb\n */\n\n\nJWT.prototype.getRequestMetadata = function (opt_uri, metadataCb) {\n  if (this.createScopedRequired() && opt_uri) {\n    // no scopes have been set, but a uri has been provided.  Use JWTAccess credentials.\n    var alt = new JWTAccess(this.email, this.key);\n    return alt.getRequestMetadata(opt_uri, metadataCb);\n  } else {\n    return JWT.super_.prototype.getRequestMetadata.call(this, opt_uri, metadataCb);\n  }\n};\n/**\n * Indicates whether the credential requires scopes to be created by calling createdScoped before\n * use.\n * @return {boolean} false if createScoped does not need to be called.\n */\n\n\nJWT.prototype.createScopedRequired = function () {\n  // If scopes is null, always return true.\n  if (this.scopes) {\n    // For arrays, check the array length.\n    if (this.scopes instanceof Array) {\n      return this.scopes.length === 0;\n    } // For others, convert to a string and check the length.\n\n\n    return String(this.scopes).length === 0;\n  }\n\n  return true;\n};\n/**\n * Get the initial access token using gToken.\n * @param {function=} opt_callback Optional callback.\n */\n\n\nJWT.prototype.authorize = function (opt_callback) {\n  var that = this;\n  var done = opt_callback || noop;\n  that.refreshToken_(null, function (err, result) {\n    if (!err) {\n      that.credentials = result;\n      that.credentials.refresh_token = 'jwt-placeholder';\n      that.key = that.gtoken.key;\n      that.email = that.gtoken.iss;\n    }\n\n    done(err, result);\n  });\n};\n/**\n * Refreshes the access token.\n * @param {object=} ignored_\n * @param {function=} opt_callback Optional callback.\n * @private\n */\n\n\nJWT.prototype.refreshToken_ = function (ignored_, opt_callback) {\n  var done = opt_callback || noop;\n  return this._createGToken(function (err, gToken) {\n    if (err) {\n      return done(err);\n    } else {\n      return gToken.getToken(function (err, token) {\n        return done(err, {\n          access_token: token,\n          token_type: 'Bearer',\n          expiry_date: gToken.expires_at\n        });\n      });\n    }\n  });\n};\n/**\n * Create a JWT credentials instance using the given input options.\n * @param {object=} json The input object.\n * @param {function=} opt_callback Optional callback.\n */\n\n\nJWT.prototype.fromJSON = function (json, opt_callback) {\n  var that = this;\n  var done = opt_callback || noop;\n\n  if (!json) {\n    done(new Error('Must pass in a JSON object containing the service account auth settings.'));\n    return;\n  }\n\n  if (!json.client_email) {\n    done(new Error('The incoming JSON object does not contain a client_email field'));\n    return;\n  }\n\n  if (!json.private_key) {\n    done(new Error('The incoming JSON object does not contain a private_key field'));\n    return;\n  } // Extract the relevant information from the json key file.\n\n\n  that.email = json.client_email;\n  that.key = json.private_key;\n  that.projectId = json.project_id;\n  done();\n};\n/**\n * Create a JWT credentials instance using the given input stream.\n * @param {object=} stream The input stream.\n * @param {function=} opt_callback Optional callback.\n */\n\n\nJWT.prototype.fromStream = function (stream, opt_callback) {\n  var that = this;\n  var done = opt_callback || noop;\n\n  if (!stream) {\n    process.nextTick(function () {\n      done(new Error('Must pass in a stream containing the service account auth settings.'));\n    });\n    return;\n  }\n\n  var s = '';\n  stream.setEncoding('utf8');\n  stream.on('data', function (chunk) {\n    s += chunk;\n  });\n  stream.on('end', function () {\n    try {\n      var data = JSON.parse(s);\n      that.fromJSON(data, opt_callback);\n    } catch (err) {\n      done(err);\n    }\n  });\n};\n/**\n * Creates the gToken instance if it has not been created already.\n * @param {function=} callback Callback.\n * @private\n */\n\n\nJWT.prototype._createGToken = function (callback) {\n  if (this.gtoken) {\n    return callback(null, this.gtoken);\n  } else {\n    this.gtoken = this.gToken({\n      iss: this.email,\n      sub: this.subject,\n      scope: this.scopes,\n      keyFile: this.keyFile,\n      key: this.key\n    });\n    return callback(null, this.gtoken);\n  }\n};\n/**\n * Export JWT.\n */\n\n\nmodule.exports = JWT;","map":null,"metadata":{},"sourceType":"script"}