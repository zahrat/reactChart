{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google Service Control API\n *\n * Google Service Control provides control plane functionality to managed\n * services, such as logging, monitoring, and status checks.\n *\n * @example\n * const google = require('googleapis');\n * const servicecontrol = google.servicecontrol('v1');\n *\n * @namespace servicecontrol\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Servicecontrol\n */\n\n\nfunction Servicecontrol(options) {\n  var self = this;\n  self._options = options || {};\n  self.services = {\n    /**\n     * servicecontrol.services.allocateQuota\n     * @desc Attempts to allocate quota for the specified consumer. It should be\n     * called before the operation is executed.  This method requires the\n     * `servicemanagement.services.quota` permission on the specified service.\n     * For more information, see [Cloud IAM](https://cloud.google.com/iam).\n     * **NOTE:** The client **must** fail-open on server errors `INTERNAL`,\n     * `UNKNOWN`, `DEADLINE_EXCEEDED`, and `UNAVAILABLE`. To ensure system\n     * reliability, the server may inject these errors to prohibit any hard\n     * dependency on the quota functionality.\n     * @alias servicecontrol.services.allocateQuota\n     * @memberOf! servicecontrol(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.serviceName Name of the service as specified in the service configuration. For example, `\"pubsub.googleapis.com\"`.  See google.api.Service for the definition of a service name.\n     * @param {servicecontrol(v1).AllocateQuotaRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    allocateQuota: function allocateQuota(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://servicecontrol.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/services/{serviceName}:allocateQuota').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['serviceName'],\n        pathParams: ['serviceName'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    check: function check(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://servicecontrol.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/services/{serviceName}:check').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['serviceName'],\n        pathParams: ['serviceName'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    endReconciliation: function endReconciliation(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://servicecontrol.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/services/{serviceName}:endReconciliation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['serviceName'],\n        pathParams: ['serviceName'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    releaseQuota: function releaseQuota(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://servicecontrol.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/services/{serviceName}:releaseQuota').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['serviceName'],\n        pathParams: ['serviceName'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    report: function report(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://servicecontrol.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/services/{serviceName}:report').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['serviceName'],\n        pathParams: ['serviceName'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    startReconciliation: function startReconciliation(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://servicecontrol.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/services/{serviceName}:startReconciliation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['serviceName'],\n        pathParams: ['serviceName'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Servicecontrol;","map":null,"metadata":{},"sourceType":"script"}