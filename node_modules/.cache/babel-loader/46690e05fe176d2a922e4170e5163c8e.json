{"ast":null,"code":"\"use strict\"; // Copyright 2018, Google, LLC.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar generator_utils_1 = require(\"../scripts/generator_utils\");\n\nvar apirequest_1 = require(\"./apirequest\");\n\nvar Endpoint =\n/** @class */\nfunction () {\n  function Endpoint(options) {\n    this._options = options || {};\n  }\n  /**\n   * Given a schema, add methods and resources to a target.\n   *\n   * @param {object} target The target to which to apply the schema.\n   * @param {object} rootSchema The top-level schema, so we don't lose track of it\n   * during recursion.\n   * @param {object} schema The current schema from which to extract methods and\n   * resources.\n   * @param {object} context The context to add to each method.\n   */\n\n\n  Endpoint.prototype.applySchema = function (target, rootSchema, schema, context) {\n    this.applyMethodsFromSchema(target, rootSchema, schema, context);\n\n    if (schema.resources) {\n      for (var resourceName in schema.resources) {\n        if (schema.resources.hasOwnProperty(resourceName)) {\n          var resource = schema.resources[resourceName];\n\n          if (!target[resourceName]) {\n            target[resourceName] = {};\n          }\n\n          this.applySchema(target[resourceName], rootSchema, resource, context);\n        }\n      }\n    }\n  };\n  /**\n   * Given a schema, add methods to a target.\n   *\n   * @param {object} target The target to which to apply the methods.\n   * @param {object} rootSchema The top-level schema, so we don't lose track of it\n   * during recursion.\n   * @param {object} schema The current schema from which to extract methods.\n   * @param {object} context The context to add to each method.\n   */\n\n\n  Endpoint.prototype.applyMethodsFromSchema = function (target, rootSchema, schema, context) {\n    if (schema.methods) {\n      for (var name in schema.methods) {\n        if (schema.methods.hasOwnProperty(name)) {\n          var method = schema.methods[name];\n          target[name] = this.makeMethod(rootSchema, method, context);\n        }\n      }\n    }\n  };\n  /**\n   * Given a method schema, add a method to a target.\n   *\n   * @param target The target to which to add the method.\n   * @param schema The top-level schema that contains the rootUrl, etc.\n   * @param method The method schema from which to generate the method.\n   * @param context The context to add to the method.\n   */\n\n\n  Endpoint.prototype.makeMethod = function (schema, method, context) {\n    var _this = this;\n\n    return function (params, callback) {\n      var schemaUrl = generator_utils_1.buildurl(schema.rootUrl + schema.servicePath + method.path);\n      var parameters = {\n        options: {\n          url: schemaUrl.substring(1, schemaUrl.length - 1),\n          method: method.httpMethod\n        },\n        params: params,\n        requiredParams: method.parameterOrder || [],\n        pathParams: _this.getPathParams(method.parameters),\n        context: context\n      };\n\n      if (method.mediaUpload && method.mediaUpload.protocols && method.mediaUpload.protocols.simple && method.mediaUpload.protocols.simple.path) {\n        var mediaUrl = generator_utils_1.buildurl(schema.rootUrl + method.mediaUpload.protocols.simple.path);\n        parameters.mediaUrl = mediaUrl.substring(1, mediaUrl.length - 1);\n      }\n\n      return apirequest_1.createAPIRequest(parameters, callback);\n    };\n  };\n\n  Endpoint.prototype.getPathParams = function (params) {\n    var pathParams = new Array();\n\n    if (typeof params !== 'object') {\n      params = {};\n    }\n\n    Object.keys(params).forEach(function (key) {\n      if (params[key].location === 'path') {\n        pathParams.push(key);\n      }\n    });\n    return pathParams;\n  };\n\n  return Endpoint;\n}();\n\nexports.Endpoint = Endpoint;","map":null,"metadata":{},"sourceType":"script"}