{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Cloud SQL Administration API\n *\n * Creates and configures Cloud SQL instances, which provide fully-managed MySQL\n * databases.\n *\n * @example\n * const google = require('googleapis');\n * const sqladmin = google.sqladmin('v1beta3');\n *\n * @namespace sqladmin\n * @type {Function}\n * @version v1beta3\n * @variation v1beta3\n * @param {object=} options Options for Sqladmin\n */\n\n\nfunction Sqladmin(options) {\n  var self = this;\n  self._options = options || {};\n  self.backupRuns = {\n    /**\n     * sql.backupRuns.get\n     * @desc Retrieves information about a specified backup run for a Cloud SQL\n     * instance.\n     * @alias sql.backupRuns.get\n     * @memberOf! sqladmin(v1beta3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.backupConfiguration Identifier for the backup configuration. This gets generated automatically when a backup configuration is created.\n     * @param {string} params.dueTime The start time of the four-hour backup window. The backup can occur any time in the window. The time is in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.\n     * @param {string} params.instance Cloud SQL instance ID. This does not include the project ID.\n     * @param {string} params.project Project ID of the project that contains the instance.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}/backupRuns/{backupConfiguration}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance', 'backupConfiguration', 'dueTime'],\n        pathParams: ['backupConfiguration', 'instance', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}/backupRuns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance', 'backupConfiguration'],\n        pathParams: ['instance', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.flags = {\n    /**\n     * sql.flags.list\n     * @desc Lists all database flags that can be set for Google Cloud SQL\n     * instances.\n     * @alias sql.flags.list\n     * @memberOf! sqladmin(v1beta3)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/flags').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.instances = {\n    /**\n     * sql.instances.clone\n     * @desc Creates a Cloud SQL instance as a clone of a source instance.\n     * @alias sql.instances.clone\n     * @memberOf! sqladmin(v1beta3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID of the source as well as the clone Cloud SQL instance.\n     * @param {sqladmin(v1beta3).InstancesCloneRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    clone: function clone(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/clone').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    export: function _export(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}/export').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    import: function _import(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}/import').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    insert: function insert(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    patch: function patch(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    promoteReplica: function promoteReplica(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}/promoteReplica').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    resetSslConfig: function resetSslConfig(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}/resetSslConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    restart: function restart(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}/restart').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    restoreBackup: function restoreBackup(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}/restoreBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance', 'backupConfiguration', 'dueTime'],\n        pathParams: ['instance', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    setRootPassword: function setRootPassword(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}/setRootPassword').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    update: function update(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.operations = {\n    /**\n     * sql.operations.get\n     * @desc Retrieves information about a specific operation that was performed\n     * on a Cloud SQL instance.\n     * @alias sql.operations.get\n     * @memberOf! sqladmin(v1beta3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.instance Cloud SQL instance ID. This does not include the project ID.\n     * @param {string} params.operation Instance operation ID.\n     * @param {string} params.project Project ID of the project that contains the instance.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance', 'operation'],\n        pathParams: ['instance', 'operation', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.sslCerts = {\n    /**\n     * sql.sslCerts.delete\n     * @desc Deletes an SSL certificate from a Cloud SQL instance.\n     * @alias sql.sslCerts.delete\n     * @memberOf! sqladmin(v1beta3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.instance Cloud SQL instance ID. This does not include the project ID.\n     * @param {string} params.project Project ID of the project that contains the instance to be deleted.\n     * @param {string} params.sha1Fingerprint Sha1 FingerPrint.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance', 'sha1Fingerprint'],\n        pathParams: ['instance', 'project', 'sha1Fingerprint'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance', 'sha1Fingerprint'],\n        pathParams: ['instance', 'project', 'sha1Fingerprint'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    insert: function insert(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}/sslCerts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/instances/{instance}/sslCerts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.tiers = {\n    /**\n     * sql.tiers.list\n     * @desc Lists service tiers that can be used to create Google Cloud SQL\n     * instances.\n     * @alias sql.tiers.list\n     * @memberOf! sqladmin(v1beta3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID of the project for which to list tiers.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta3/projects/{project}/tiers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Sqladmin;","map":null,"metadata":{},"sourceType":"script"}