{"ast":null,"code":"var forge = require('node-forge');\n\nvar fs = require('fs');\n/**\n * Convert a .p12 file to .pem string.\n * This is the constructor so it can also be used to\n * create an object that can be reused to get different keys.\n *\n * @param  {string}    filename The .p12 key filename.\n * @param  {Function=} callback The callback function.\n */\n\n\nfunction GoogleP12toPem(filename, callback) {\n  if (!(this instanceof GoogleP12toPem)) {\n    var gp12 = new GoogleP12toPem();\n    return gp12.getPem(filename, callback);\n  }\n\n  this.pem = null;\n}\n/**\n * Convert a .p12 file to .pem string\n * @param  {string}    filename The .p12 key filename.\n * @param  {Function=} callback The callback function.\n * @return {string=}            The .pem private key if no callback provided.\n */\n\n\nGoogleP12toPem.prototype.getPem = function (filename, callback) {\n  var self = this;\n\n  if (typeof callback === 'function') {\n    fs.readFile(filename, {\n      encoding: 'base64'\n    }, function (err, keyp12) {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      try {\n        this.pem = _convertToPem(keyp12);\n      } catch (e) {\n        callback(e, null);\n        return;\n      }\n\n      callback(null, this.pem);\n    });\n  } else {\n    var keyp12 = fs.readFileSync(filename, {\n      encoding: 'base64'\n    });\n    this.pem = _convertToPem(keyp12);\n    return this.pem;\n  }\n\n  function _convertToPem(p12base64) {\n    var p12Der = forge.util.decode64(p12base64);\n    var p12Asn1 = forge.asn1.fromDer(p12Der);\n    var p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, 'notasecret');\n    var privateKey = p12.getBagsByFriendlyName('privatekey')[0].key;\n    var pem = forge.pki.privateKeyToPem(privateKey);\n    return pem.replace(/\\r\\n/g, '\\n');\n  }\n};\n\nmodule.exports = GoogleP12toPem;","map":null,"metadata":{},"sourceType":"script"}