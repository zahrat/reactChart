{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google Sheets API\n *\n * Reads and writes Google Sheets.\n *\n * @example\n * const google = require('googleapis');\n * const sheets = google.sheets('v4');\n *\n * @namespace sheets\n * @type {Function}\n * @version v4\n * @variation v4\n * @param {object=} options Options for Sheets\n */\n\n\nfunction Sheets(options) {\n  var self = this;\n  self._options = options || {};\n  self.spreadsheets = {\n    /**\n     * sheets.spreadsheets.batchUpdate\n     * @desc Applies one or more updates to the spreadsheet.  Each request is\n     * validated before being applied. If any request is not valid then the\n     * entire request will fail and nothing will be applied.  Some requests have\n     * replies to give you some information about how they are applied. The\n     * replies will mirror the requests.  For example, if you applied 4 updates\n     * and the 3rd one had a reply, then the response will have 2 empty replies,\n     * the actual reply, and another empty reply, in that order.  Due to the\n     * collaborative nature of spreadsheets, it is not guaranteed that the\n     * spreadsheet will reflect exactly your changes after this completes,\n     * however it is guaranteed that the updates in the request will be applied\n     * together atomically. Your changes may be altered with respect to\n     * collaborator changes. If there are no collaborators, the spreadsheet\n     * should reflect your changes.\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Google Sheets API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/sheets\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var sheets = google.sheets('v4');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The spreadsheet to apply the updates to.\n     *     spreadsheetId: 'my-spreadsheet-id',  // TODO: Update placeholder\n     * value.\n     *\n     *     resource: {\n     *       // A list of updates to apply to the spreadsheet.\n     *       // Requests will be applied in the order they are specified.\n     *       // If any request is not valid, no requests will be applied.\n     *       requests: [],  // TODO: Update placeholder value.\n     *\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient,\n     *   };\n     *\n     *   sheets.spreadsheets.batchUpdate(request, function(err, response) {\n     *     if (err) {\n     *       console.error(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication\n     * credentials. See\n     *   //\n     * https://developers.google.com/sheets/quickstart/nodejs#step_3_set_up_the_sample\n     *   //\n     *   // Authorize using one of the following scopes:\n     *   //   'https://www.googleapis.com/auth/drive'\n     *   //   'https://www.googleapis.com/auth/drive.file'\n     *   //   'https://www.googleapis.com/auth/spreadsheets'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     * @alias sheets.spreadsheets.batchUpdate\n     * @memberOf! sheets(v4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.spreadsheetId The spreadsheet to apply the updates to.\n     * @param {sheets(v4).BatchUpdateSpreadsheetRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    batchUpdate: function batchUpdate(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['spreadsheetId'],\n        pathParams: ['spreadsheetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['spreadsheetId'],\n        pathParams: ['spreadsheetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    getByDataFilter: function getByDataFilter(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}:getByDataFilter').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['spreadsheetId'],\n        pathParams: ['spreadsheetId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    developerMetadata: {\n      /**\n       * sheets.spreadsheets.developerMetadata.get\n       * @desc Returns the developer metadata with the specified ID. The caller\n       * must specify the spreadsheet ID and the developer metadata's unique\n       * metadataId.\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the Google Sheets API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/sheets\n       * // 2. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var sheets = google.sheets('v4');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // The ID of the spreadsheet to retrieve metadata from.\n       *     spreadsheetId: 'my-spreadsheet-id',  // TODO: Update placeholder\n       * value.\n       *\n       *     // The ID of the developer metadata to retrieve.\n       *     metadataId: 0,  // TODO: Update placeholder value.\n       *\n       *     auth: authClient,\n       *   };\n       *\n       *   sheets.spreadsheets.developerMetadata.get(request, function(err,\n       * response) { if (err) { console.error(err); return;\n       *     }\n       *\n       *     // TODO: Change code below to process the `response` object:\n       *     console.log(JSON.stringify(response, null, 2));\n       *   });\n       * });\n       *\n       * function authorize(callback) {\n       *   // TODO: Change placeholder below to generate authentication\n       * credentials. See\n       *   //\n       * https://developers.google.com/sheets/quickstart/nodejs#step_3_set_up_the_sample\n       *   //\n       *   // Authorize using one of the following scopes:\n       *   //   'https://www.googleapis.com/auth/drive'\n       *   //   'https://www.googleapis.com/auth/drive.file'\n       *   //   'https://www.googleapis.com/auth/spreadsheets'\n       *   var authClient = null;\n       *\n       *   if (authClient == null) {\n       *     console.log('authentication failed');\n       *     return;\n       *   }\n       *   callback(authClient);\n       * }\n       * @alias sheets.spreadsheets.developerMetadata.get\n       * @memberOf! sheets(v4)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer} params.metadataId The ID of the developer metadata to retrieve.\n       * @param {string} params.spreadsheetId The ID of the spreadsheet to retrieve metadata from.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['spreadsheetId', 'metadataId'],\n          pathParams: ['metadataId', 'spreadsheetId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      search: function search(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/developerMetadata:search').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['spreadsheetId'],\n          pathParams: ['spreadsheetId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    sheets: {\n      /**\n       * sheets.spreadsheets.sheets.copyTo\n       * @desc Copies a single sheet from a spreadsheet to another spreadsheet.\n       * Returns the properties of the newly created sheet.\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the Google Sheets API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/sheets\n       * // 2. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var sheets = google.sheets('v4');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // The ID of the spreadsheet containing the sheet to copy.\n       *     spreadsheetId: 'my-spreadsheet-id',  // TODO: Update placeholder\n       * value.\n       *\n       *     // The ID of the sheet to copy.\n       *     sheetId: 0,  // TODO: Update placeholder value.\n       *\n       *     resource: {\n       *       // The ID of the spreadsheet to copy the sheet to.\n       *       destinationSpreadsheetId: '',  // TODO: Update placeholder value.\n       *\n       *       // TODO: Add desired properties to the request body.\n       *     },\n       *\n       *     auth: authClient,\n       *   };\n       *\n       *   sheets.spreadsheets.sheets.copyTo(request, function(err, response) {\n       *     if (err) {\n       *       console.error(err);\n       *       return;\n       *     }\n       *\n       *     // TODO: Change code below to process the `response` object:\n       *     console.log(JSON.stringify(response, null, 2));\n       *   });\n       * });\n       *\n       * function authorize(callback) {\n       *   // TODO: Change placeholder below to generate authentication\n       * credentials. See\n       *   //\n       * https://developers.google.com/sheets/quickstart/nodejs#step_3_set_up_the_sample\n       *   //\n       *   // Authorize using one of the following scopes:\n       *   //   'https://www.googleapis.com/auth/drive'\n       *   //   'https://www.googleapis.com/auth/drive.file'\n       *   //   'https://www.googleapis.com/auth/spreadsheets'\n       *   var authClient = null;\n       *\n       *   if (authClient == null) {\n       *     console.log('authentication failed');\n       *     return;\n       *   }\n       *   callback(authClient);\n       * }\n       * @alias sheets.spreadsheets.sheets.copyTo\n       * @memberOf! sheets(v4)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer} params.sheetId The ID of the sheet to copy.\n       * @param {string} params.spreadsheetId The ID of the spreadsheet containing the sheet to copy.\n       * @param {sheets(v4).CopySheetToAnotherSpreadsheetRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      copyTo: function copyTo(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['spreadsheetId', 'sheetId'],\n          pathParams: ['sheetId', 'spreadsheetId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    values: {\n      /**\n       * sheets.spreadsheets.values.append\n       * @desc Appends values to a spreadsheet. The input range is used to\n       * search for existing data and find a \"table\" within that range. Values\n       * will be appended to the next row of the table, starting with the first\n       * column of the table. See the\n       * [guide](/sheets/api/guides/values#appending_values) and [sample\n       * code](/sheets/api/samples/writing#append_values) for specific details\n       * of how tables are detected and data is appended.  The caller must\n       * specify the spreadsheet ID, range, and a valueInputOption.  The\n       * `valueInputOption` only controls how the input data will be added to\n       * the sheet (column-wise or row-wise), it does not influence what cell\n       * the data starts being written to.\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the Google Sheets API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/sheets\n       * // 2. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var sheets = google.sheets('v4');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // The ID of the spreadsheet to update.\n       *     spreadsheetId: 'my-spreadsheet-id',  // TODO: Update placeholder\n       * value.\n       *\n       *     // The A1 notation of a range to search for a logical table of\n       * data.\n       *     // Values will be appended after the last row of the table.\n       *     range: 'my-range',  // TODO: Update placeholder value.\n       *\n       *     // How the input data should be interpreted.\n       *     valueInputOption: '',  // TODO: Update placeholder value.\n       *\n       *     // How the input data should be inserted.\n       *     insertDataOption: '',  // TODO: Update placeholder value.\n       *\n       *     resource: {\n       *       // TODO: Add desired properties to the request body.\n       *     },\n       *\n       *     auth: authClient,\n       *   };\n       *\n       *   sheets.spreadsheets.values.append(request, function(err, response) {\n       *     if (err) {\n       *       console.error(err);\n       *       return;\n       *     }\n       *\n       *     // TODO: Change code below to process the `response` object:\n       *     console.log(JSON.stringify(response, null, 2));\n       *   });\n       * });\n       *\n       * function authorize(callback) {\n       *   // TODO: Change placeholder below to generate authentication\n       * credentials. See\n       *   //\n       * https://developers.google.com/sheets/quickstart/nodejs#step_3_set_up_the_sample\n       *   //\n       *   // Authorize using one of the following scopes:\n       *   //   'https://www.googleapis.com/auth/drive'\n       *   //   'https://www.googleapis.com/auth/drive.file'\n       *   //   'https://www.googleapis.com/auth/spreadsheets'\n       *   var authClient = null;\n       *\n       *   if (authClient == null) {\n       *     console.log('authentication failed');\n       *     return;\n       *   }\n       *   callback(authClient);\n       * }\n       * @alias sheets.spreadsheets.values.append\n       * @memberOf! sheets(v4)\n       *\n       * @param {object} params Parameters for request\n       * @param {boolean=} params.includeValuesInResponse Determines if the update response should include the values of the cells that were appended. By default, responses do not include the updated values.\n       * @param {string=} params.insertDataOption How the input data should be inserted.\n       * @param {string} params.range The A1 notation of a range to search for a logical table of data. Values will be appended after the last row of the table.\n       * @param {string=} params.responseDateTimeRenderOption Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].\n       * @param {string=} params.responseValueRenderOption Determines how values in the response should be rendered. The default render option is ValueRenderOption.FORMATTED_VALUE.\n       * @param {string} params.spreadsheetId The ID of the spreadsheet to update.\n       * @param {string=} params.valueInputOption How the input data should be interpreted.\n       * @param {sheets(v4).ValueRange} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      append: function append(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values/{range}:append').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['spreadsheetId', 'range'],\n          pathParams: ['range', 'spreadsheetId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      batchClear: function batchClear(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchClear').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['spreadsheetId'],\n          pathParams: ['spreadsheetId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      batchClearByDataFilter: function batchClearByDataFilter(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['spreadsheetId'],\n          pathParams: ['spreadsheetId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      batchGet: function batchGet(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchGet').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['spreadsheetId'],\n          pathParams: ['spreadsheetId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      batchGetByDataFilter: function batchGetByDataFilter(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['spreadsheetId'],\n          pathParams: ['spreadsheetId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      batchUpdate: function batchUpdate(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['spreadsheetId'],\n          pathParams: ['spreadsheetId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      batchUpdateByDataFilter: function batchUpdateByDataFilter(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['spreadsheetId'],\n          pathParams: ['spreadsheetId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      clear: function clear(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values/{range}:clear').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['spreadsheetId', 'range'],\n          pathParams: ['range', 'spreadsheetId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values/{range}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['spreadsheetId', 'range'],\n          pathParams: ['range', 'spreadsheetId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      update: function update(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values/{range}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['spreadsheetId', 'range'],\n          pathParams: ['range', 'spreadsheetId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\nmodule.exports = Sheets;","map":null,"metadata":{},"sourceType":"script"}