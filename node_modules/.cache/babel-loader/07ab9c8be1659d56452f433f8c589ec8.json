{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google Kubernetes Engine API\n *\n * The Google Kubernetes Engine API is used for building and managing container\n * based applications, powered by the open source Kubernetes technology.\n *\n * @example\n * const google = require('googleapis');\n * const container = google.container('v1');\n *\n * @namespace container\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Container\n */\n\n\nfunction Container(options) {\n  var self = this;\n  self._options = options || {};\n  self.projects = {\n    zones: {\n      /**\n       * container.projects.zones.getServerconfig\n       * @desc Returns configuration info about the Kubernetes Engine\n       * service.\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the Google Container Engine API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/container\n       * // 2. This sample uses Application Default Credentials for\n       * authentication.\n       * //    If not already done, install the gcloud CLI from\n       * //    https://cloud.google.com/sdk and run\n       * //    `gcloud beta auth application-default login`.\n       * //    For more information, see\n       * //\n       * https://developers.google.com/identity/protocols/application-default-credentials\n       * // 3. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var container = google.container('v1');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // The Google Developers Console [project ID or project\n       *     // number](https://support.google.com/cloud/answer/6158840).\n       *     projectId: 'my-project-id',  // TODO: Update placeholder value.\n       *\n       *     // The name of the Google Compute Engine\n       * [zone](/compute/docs/zones#available)\n       *     // to return operations for.\n       *     zone: 'my-zone',  // TODO: Update placeholder value.\n       *\n       *     auth: authClient,\n       *   };\n       *\n       *   container.projects.zones.getServerconfig(request, function(err,\n       * response) { if (err) { console.error(err); return;\n       *     }\n       *\n       *     // TODO: Change code below to process the `response` object:\n       *     console.log(JSON.stringify(response, null, 2));\n       *   });\n       * });\n       *\n       * function authorize(callback) {\n       *   google.auth.getApplicationDefault(function(err, authClient) {\n       *     if (err) {\n       *       console.error('authentication failed: ', err);\n       *       return;\n       *     }\n       *     if (authClient.createScopedRequired &&\n       * authClient.createScopedRequired()) { var scopes =\n       * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n       * authClient.createScoped(scopes);\n       *     }\n       *     callback(authClient);\n       *   });\n       * }\n       * @alias container.projects.zones.getServerconfig\n       * @memberOf! container(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.projectId The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840).\n       * @param {string} params.zone The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      getServerconfig: function getServerconfig(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/serverconfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'zone'],\n          pathParams: ['projectId', 'zone'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      clusters: {\n        /**\n         * container.projects.zones.clusters.addons\n         * @desc Sets the addons of a specific cluster.\n         * @example\n         * // BEFORE RUNNING:\n         * // ---------------\n         * // 1. If not already done, enable the Google Container Engine\n         * API\n         * //    and check the quota for your project at\n         * // https://console.developers.google.com/apis/api/container\n         * // 2. This sample uses Application Default Credentials for\n         * authentication.\n         * //    If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk and run\n         * //    `gcloud beta auth application-default login`.\n         * //    For more information, see\n         * //\n         * https://developers.google.com/identity/protocols/application-default-credentials\n         * // 3. Install the Node.js client library by running\n         * //    `npm install googleapis --save`\n         *\n         * var google = require('googleapis');\n         * var container = google.container('v1');\n         *\n         * authorize(function(authClient) {\n         *   var request = {\n         *     // The Google Developers Console [project ID or project\n         *     //\n         * number](https://support.google.com/cloud/answer/6158840).\n         *     projectId: 'my-project-id',  // TODO: Update placeholder\n         * value.\n         *\n         *     // The name of the Google Compute Engine\n         *     // [zone](/compute/docs/zones#available) in which the\n         * cluster\n         *     // resides.\n         *     zone: 'my-zone',  // TODO: Update placeholder value.\n         *\n         *     // The name of the cluster to upgrade.\n         *     clusterId: 'my-cluster-id',  // TODO: Update placeholder\n         * value.\n         *\n         *     resource: {\n         *       // TODO: Add desired properties to the request body.\n         *     },\n         *\n         *     auth: authClient,\n         *   };\n         *\n         *   container.projects.zones.clusters.addons(request,\n         * function(err, response) { if (err) { console.error(err);\n         *       return;\n         *     }\n         *\n         *     // TODO: Change code below to process the `response`\n         * object: console.log(JSON.stringify(response, null, 2));\n         *   });\n         * });\n         *\n         * function authorize(callback) {\n         *   google.auth.getApplicationDefault(function(err, authClient)\n         * { if (err) { console.error('authentication failed: ', err);\n         *       return;\n         *     }\n         *     if (authClient.createScopedRequired &&\n         * authClient.createScopedRequired()) { var scopes =\n         * ['https://www.googleapis.com/auth/cloud-platform'];\n         *       authClient = authClient.createScoped(scopes);\n         *     }\n         *     callback(authClient);\n         *   });\n         * }\n         * @alias container.projects.zones.clusters.addons\n         * @memberOf! container(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.clusterId The name of the cluster to upgrade.\n         * @param {string} params.projectId The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840).\n         * @param {string} params.zone The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.\n         * @param {container(v1).SetAddonsConfigRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        addons: function addons(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/addons').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        completeIpRotation: function completeIpRotation(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:completeIpRotation').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone'],\n            pathParams: ['projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        legacyAbac: function legacyAbac(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/legacyAbac').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone'],\n            pathParams: ['projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        locations: function locations(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        logging: function logging(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/logging').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        master: function master(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/master').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        monitoring: function monitoring(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/monitoring').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        resourceLabels: function resourceLabels(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/resourceLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setMaintenancePolicy: function setMaintenancePolicy(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setMaintenancePolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setMasterAuth: function setMasterAuth(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setMasterAuth').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setNetworkPolicy: function setNetworkPolicy(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setNetworkPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        startIpRotation: function startIpRotation(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:startIpRotation').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'clusterId'],\n            pathParams: ['clusterId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        nodePools: {\n          /**\n           * container.projects.zones.clusters.nodePools.autoscaling\n           * @desc Sets the autoscaling settings of a specific node\n           * pool.\n           * @example\n           * // BEFORE RUNNING:\n           * // ---------------\n           * // 1. If not already done, enable the Google Container\n           * Engine API\n           * //    and check the quota for your project at\n           * //\n           * https://console.developers.google.com/apis/api/container\n           * // 2. This sample uses Application Default Credentials\n           * for authentication.\n           * //    If not already done, install the gcloud CLI from\n           * //    https://cloud.google.com/sdk and run\n           * //    `gcloud beta auth application-default login`.\n           * //    For more information, see\n           * //\n           * https://developers.google.com/identity/protocols/application-default-credentials\n           * // 3. Install the Node.js client library by running\n           * //    `npm install googleapis --save`\n           *\n           * var google = require('googleapis');\n           * var container = google.container('v1');\n           *\n           * authorize(function(authClient) {\n           *   var request = {\n           *     // The Google Developers Console [project ID or\n           * project\n           *     //\n           * number](https://support.google.com/cloud/answer/6158840).\n           *     projectId: 'my-project-id',  // TODO: Update\n           * placeholder value.\n           *\n           *     // The name of the Google Compute Engine\n           *     // [zone](/compute/docs/zones#available) in which\n           * the cluster\n           *     // resides.\n           *     zone: 'my-zone',  // TODO: Update placeholder\n           * value.\n           *\n           *     // The name of the cluster to upgrade.\n           *     clusterId: 'my-cluster-id',  // TODO: Update\n           * placeholder value.\n           *\n           *     // The name of the node pool to upgrade.\n           *     nodePoolId: 'my-node-pool-id',  // TODO: Update\n           * placeholder value.\n           *\n           *     resource: {\n           *       // TODO: Add desired properties to the request\n           * body.\n           *     },\n           *\n           *     auth: authClient,\n           *   };\n           *\n           *   container.projects.zones.clusters.nodePools.autoscaling(request,\n           * function(err, response) { if (err) {\n           *       console.error(err);\n           *       return;\n           *     }\n           *\n           *     // TODO: Change code below to process the\n           * `response` object: console.log(JSON.stringify(response,\n           * null, 2));\n           *   });\n           * });\n           *\n           * function authorize(callback) {\n           *   google.auth.getApplicationDefault(function(err,\n           * authClient) { if (err) { console.error('authentication\n           * failed: ', err); return;\n           *     }\n           *     if (authClient.createScopedRequired &&\n           * authClient.createScopedRequired()) { var scopes =\n           * ['https://www.googleapis.com/auth/cloud-platform'];\n           *       authClient = authClient.createScoped(scopes);\n           *     }\n           *     callback(authClient);\n           *   });\n           * }\n           * @alias\n           * container.projects.zones.clusters.nodePools.autoscaling\n           * @memberOf! container(v1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.clusterId The name of the cluster to upgrade.\n           * @param {string} params.nodePoolId The name of the node pool to upgrade.\n           * @param {string} params.projectId The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840).\n           * @param {string} params.zone The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.\n           * @param {container(v1).SetNodePoolAutoscalingRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          autoscaling: function autoscaling(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/autoscaling').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],\n              pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          create: function create(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId'],\n              pathParams: ['clusterId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          delete: function _delete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],\n              pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          get: function get(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],\n              pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId'],\n              pathParams: ['clusterId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          rollback: function rollback(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}:rollback').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],\n              pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          setManagement: function setManagement(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/setManagement').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],\n              pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          setSize: function setSize(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/setSize').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],\n              pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          update: function update(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/update').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'zone', 'clusterId', 'nodePoolId'],\n              pathParams: ['clusterId', 'nodePoolId', 'projectId', 'zone'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        }\n      },\n      operations: {\n        /**\n         * container.projects.zones.operations.cancel\n         * @desc Cancels the specified operation.\n         * @example\n         * // BEFORE RUNNING:\n         * // ---------------\n         * // 1. If not already done, enable the Google Container Engine API\n         * //    and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/container\n         * // 2. This sample uses Application Default Credentials for\n         * authentication.\n         * //    If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk and run\n         * //    `gcloud beta auth application-default login`.\n         * //    For more information, see\n         * //\n         * https://developers.google.com/identity/protocols/application-default-credentials\n         * // 3. Install the Node.js client library by running\n         * //    `npm install googleapis --save`\n         *\n         * var google = require('googleapis');\n         * var container = google.container('v1');\n         *\n         * authorize(function(authClient) {\n         *   var request = {\n         *     // The Google Developers Console [project ID or project\n         *     // number](https://support.google.com/cloud/answer/6158840).\n         *     projectId: 'my-project-id',  // TODO: Update placeholder\n         * value.\n         *\n         *     // The name of the Google Compute Engine\n         *     // [zone](/compute/docs/zones#available) in which the\n         * operation resides. zone: 'my-zone',  // TODO: Update placeholder\n         * value.\n         *\n         *     // The server-assigned `name` of the operation.\n         *     operationId: 'my-operation-id',  // TODO: Update placeholder\n         * value.\n         *\n         *     resource: {\n         *       // TODO: Add desired properties to the request body.\n         *     },\n         *\n         *     auth: authClient,\n         *   };\n         *\n         *   container.projects.zones.operations.cancel(request,\n         * function(err) { if (err) { console.error(err); return;\n         *     }\n         *   });\n         * });\n         *\n         * function authorize(callback) {\n         *   google.auth.getApplicationDefault(function(err, authClient) {\n         *     if (err) {\n         *       console.error('authentication failed: ', err);\n         *       return;\n         *     }\n         *     if (authClient.createScopedRequired &&\n         * authClient.createScopedRequired()) { var scopes =\n         * ['https://www.googleapis.com/auth/cloud-platform']; authClient =\n         * authClient.createScoped(scopes);\n         *     }\n         *     callback(authClient);\n         *   });\n         * }\n         * @alias container.projects.zones.operations.cancel\n         * @memberOf! container(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.operationId The server-assigned `name` of the operation.\n         * @param {string} params.projectId The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840).\n         * @param {string} params.zone The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the operation resides.\n         * @param {container(v1).CancelOperationRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        cancel: function cancel(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/operations/{operationId}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'operationId'],\n            pathParams: ['operationId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/operations/{operationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone', 'operationId'],\n            pathParams: ['operationId', 'projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://container.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/projects/{projectId}/zones/{zone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'zone'],\n            pathParams: ['projectId', 'zone'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = Container;","map":null,"metadata":{},"sourceType":"script"}