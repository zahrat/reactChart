{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google Classroom API\n *\n * Manages classes, rosters, and invitations in Google Classroom.\n *\n * @example\n * const google = require('googleapis');\n * const classroom = google.classroom('v1');\n *\n * @namespace classroom\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Classroom\n */\n\n\nfunction Classroom(options) {\n  var self = this;\n  self._options = options || {};\n  self.courses = {\n    /**\n     * classroom.courses.create\n     * @desc Creates a course.  The user specified in `ownerId` is the owner\n     * of the created course and added as a teacher.  This method returns\n     * the following error codes:  * `PERMISSION_DENIED` if the requesting\n     * user is not permitted to create courses or for access errors. *\n     * `NOT_FOUND` if the primary teacher is not a valid user. *\n     * `FAILED_PRECONDITION` if the course owner's account is disabled or\n     * for the following request errors:     *\n     * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if an alias was\n     * specified in the `id` and already exists.\n     * @alias classroom.courses.create\n     * @memberOf! classroom(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {classroom(v1).Course} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    patch: function patch(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    update: function update(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    aliases: {\n      /**\n       * classroom.courses.aliases.create\n       * @desc Creates an alias for a course.  This method returns the\n       * following error codes:  * `PERMISSION_DENIED` if the requesting\n       * user is not permitted to create the alias or for access errors. *\n       * `NOT_FOUND` if the course does not exist. * `ALREADY_EXISTS` if the\n       * alias already exists. * `FAILED_PRECONDITION` if the alias\n       * requested does not make sense for the   requesting user or course\n       * (for example, if a user not in a domain   attempts to access a\n       * domain-scoped alias).\n       * @alias classroom.courses.aliases.create\n       * @memberOf! classroom(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.courseId Identifier of the course to alias. This identifier can be either the Classroom-assigned identifier or an alias.\n       * @param {classroom(v1).CourseAlias} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['courseId'],\n          pathParams: ['courseId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['courseId', 'alias'],\n          pathParams: ['alias', 'courseId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['courseId'],\n          pathParams: ['courseId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    announcements: {\n      /**\n       * classroom.courses.announcements.create\n       * @desc Creates an announcement.  This method returns the following\n       * error codes:  * `PERMISSION_DENIED` if the requesting user is not\n       * permitted to access the requested course, create announcements in\n       * the requested course, share a Drive attachment, or for access\n       * errors. * `INVALID_ARGUMENT` if the request is malformed. *\n       * `NOT_FOUND` if the requested course does not exist. *\n       * `FAILED_PRECONDITION` for the following request error:     *\n       * AttachmentNotVisible\n       * @alias classroom.courses.announcements.create\n       * @memberOf! classroom(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.courseId Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.\n       * @param {classroom(v1).Announcement} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/announcements').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['courseId'],\n          pathParams: ['courseId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/announcements/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['courseId', 'id'],\n          pathParams: ['courseId', 'id'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/announcements/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['courseId', 'id'],\n          pathParams: ['courseId', 'id'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/announcements').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['courseId'],\n          pathParams: ['courseId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      modifyAssignees: function modifyAssignees(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/announcements/{id}:modifyAssignees').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['courseId', 'id'],\n          pathParams: ['courseId', 'id'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      patch: function patch(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/announcements/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['courseId', 'id'],\n          pathParams: ['courseId', 'id'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    courseWork: {\n      /**\n       * classroom.courses.courseWork.create\n       * @desc Creates course work.  The resulting course work (and\n       * corresponding student submissions) are associated with the\n       * Developer Console project of the [OAuth client\n       * ID](https://support.google.com/cloud/answer/6158849) used to make\n       * the request. Classroom API requests to modify course work and\n       * student submissions must be made with an OAuth client ID from the\n       * associated Developer Console project.  This method returns the\n       * following error codes:  * `PERMISSION_DENIED` if the requesting\n       * user is not permitted to access the requested course, create course\n       * work in the requested course, share a Drive attachment, or for\n       * access errors. * `INVALID_ARGUMENT` if the request is malformed. *\n       * `NOT_FOUND` if the requested course does not exist. *\n       * `FAILED_PRECONDITION` for the following request error:     *\n       * AttachmentNotVisible\n       * @alias classroom.courses.courseWork.create\n       * @memberOf! classroom(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.courseId Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.\n       * @param {classroom(v1).CourseWork} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/courseWork').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['courseId'],\n          pathParams: ['courseId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/courseWork/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['courseId', 'id'],\n          pathParams: ['courseId', 'id'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/courseWork/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['courseId', 'id'],\n          pathParams: ['courseId', 'id'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/courseWork').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['courseId'],\n          pathParams: ['courseId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      modifyAssignees: function modifyAssignees(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/courseWork/{id}:modifyAssignees').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['courseId', 'id'],\n          pathParams: ['courseId', 'id'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      patch: function patch(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/courseWork/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['courseId', 'id'],\n          pathParams: ['courseId', 'id'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      studentSubmissions: {\n        /**\n         * classroom.courses.courseWork.studentSubmissions.get\n         * @desc Returns a student submission.  * `PERMISSION_DENIED` if\n         * the requesting user is not permitted to access the requested\n         * course, course work, or student submission or for access\n         * errors. * `INVALID_ARGUMENT` if the request is malformed. *\n         * `NOT_FOUND` if the requested course, course work, or student\n         * submission does not exist.\n         * @alias classroom.courses.courseWork.studentSubmissions.get\n         * @memberOf! classroom(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.courseId Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.\n         * @param {string} params.courseWorkId Identifier of the course work.\n         * @param {string} params.id Identifier of the student submission.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['courseId', 'courseWorkId', 'id'],\n            pathParams: ['courseId', 'courseWorkId', 'id'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['courseId', 'courseWorkId'],\n            pathParams: ['courseId', 'courseWorkId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        modifyAttachments: function modifyAttachments(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:modifyAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['courseId', 'courseWorkId', 'id'],\n            pathParams: ['courseId', 'courseWorkId', 'id'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        patch: function patch(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['courseId', 'courseWorkId', 'id'],\n            pathParams: ['courseId', 'courseWorkId', 'id'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        reclaim: function reclaim(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:reclaim').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['courseId', 'courseWorkId', 'id'],\n            pathParams: ['courseId', 'courseWorkId', 'id'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        return: function _return(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:return').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['courseId', 'courseWorkId', 'id'],\n            pathParams: ['courseId', 'courseWorkId', 'id'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        turnIn: function turnIn(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:turnIn').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['courseId', 'courseWorkId', 'id'],\n            pathParams: ['courseId', 'courseWorkId', 'id'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    },\n    students: {\n      /**\n       * classroom.courses.students.create\n       * @desc Adds a user as a student of a course.  This method returns\n       * the following error codes:  * `PERMISSION_DENIED` if the requesting\n       * user is not permitted to create students in this course or for\n       * access errors. * `NOT_FOUND` if the requested course ID does not\n       * exist. * `FAILED_PRECONDITION` if the requested user's account is\n       * disabled, for the following request errors:     *\n       * CourseMemberLimitReached     * CourseNotModifiable     *\n       * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if the user is\n       * already a student or teacher in the course.\n       * @alias classroom.courses.students.create\n       * @memberOf! classroom(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.courseId Identifier of the course to create the student in. This identifier can be either the Classroom-assigned identifier or an alias.\n       * @param {string=} params.enrollmentCode Enrollment code of the course to create the student in. This code is required if userId corresponds to the requesting user; it may be omitted if the requesting user has administrative permissions to create students for any user.\n       * @param {classroom(v1).Student} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/students').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['courseId'],\n          pathParams: ['courseId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/students/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['courseId', 'userId'],\n          pathParams: ['courseId', 'userId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/students/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['courseId', 'userId'],\n          pathParams: ['courseId', 'userId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/students').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['courseId'],\n          pathParams: ['courseId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    teachers: {\n      /**\n       * classroom.courses.teachers.create\n       * @desc Creates a teacher of a course.  This method returns the\n       * following error codes:  * `PERMISSION_DENIED` if the requesting\n       * user is not  permitted to create teachers in this course or for\n       * access errors. * `NOT_FOUND` if the requested course ID does not\n       * exist. * `FAILED_PRECONDITION` if the requested user's account is\n       * disabled, for the following request errors:     *\n       * CourseMemberLimitReached     * CourseNotModifiable     *\n       * CourseTeacherLimitReached     * UserGroupsMembershipLimitReached *\n       * `ALREADY_EXISTS` if the user is already a teacher or student in the\n       * course.\n       * @alias classroom.courses.teachers.create\n       * @memberOf! classroom(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.courseId Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.\n       * @param {classroom(v1).Teacher} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/teachers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['courseId'],\n          pathParams: ['courseId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/teachers/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['courseId', 'userId'],\n          pathParams: ['courseId', 'userId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/teachers/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['courseId', 'userId'],\n          pathParams: ['courseId', 'userId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/teachers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['courseId'],\n          pathParams: ['courseId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    topics: {\n      /**\n       * classroom.courses.topics.get\n       * @desc Returns a topic.  This method returns the following error\n       * codes:  * `PERMISSION_DENIED` if the requesting user is not\n       * permitted to access the requested course or topic, or for access\n       * errors. * `INVALID_ARGUMENT` if the request is malformed. *\n       * `NOT_FOUND` if the requested course or topic does not exist.\n       * @alias classroom.courses.topics.get\n       * @memberOf! classroom(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.courseId Identifier of the course.\n       * @param {string} params.id Identifier of the topic.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/topics/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['courseId', 'id'],\n          pathParams: ['courseId', 'id'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/courses/{courseId}/topics').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['courseId'],\n          pathParams: ['courseId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.invitations = {\n    /**\n     * classroom.invitations.accept\n     * @desc Accepts an invitation, removing it and adding the invited user to\n     * the teachers or students (as appropriate) of the specified course. Only\n     * the invited user may accept an invitation.  This method returns the\n     * following error codes:  * `PERMISSION_DENIED` if the requesting user is\n     * not permitted to accept the requested invitation or for access errors. *\n     * `FAILED_PRECONDITION` for the following request errors:     *\n     * CourseMemberLimitReached     * CourseNotModifiable     *\n     * CourseTeacherLimitReached     * UserGroupsMembershipLimitReached *\n     * `NOT_FOUND` if no invitation exists with the requested ID.\n     * @alias classroom.invitations.accept\n     * @memberOf! classroom(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Identifier of the invitation to accept.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    accept: function accept(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/invitations/{id}:accept').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/invitations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/invitations/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/invitations/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/invitations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.registrations = {\n    /**\n     * classroom.registrations.create\n     * @desc Creates a `Registration`, causing Classroom to start sending\n     * notifications from the provided `feed` to the provided `destination`.\n     * Returns the created `Registration`. Currently, this will be the same as\n     * the argument, but with server-assigned fields such as `expiry_time` and\n     * `id` filled in.  Note that any value specified for the `expiry_time` or\n     * `id` fields will be ignored.  While Classroom may validate the\n     * `destination` and return errors on a best effort basis, it is the\n     * caller's responsibility to ensure that it exists and that Classroom has\n     * permission to publish to it.  This method may return the following error\n     * codes:  * `PERMISSION_DENIED` if:     * the authenticated user does not\n     * have permission to receive       notifications from the requested field;\n     * or     * the credential provided does not include the appropriate scope\n     * for the       requested feed.     * another access error is encountered.\n     * * `INVALID_ARGUMENT` if:     * no `destination` is specified, or the\n     * specified `destination` is not       valid; or     * no `feed` is\n     * specified, or the specified `feed` is not valid. * `NOT_FOUND` if:     *\n     * the specified `feed` cannot be located, or the requesting user does not\n     * have permission to determine whether or not it exists; or     * the\n     * specified `destination` cannot be located, or Classroom has not\n     * been granted permission to publish to it.\n     * @alias classroom.registrations.create\n     * @memberOf! classroom(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {classroom(v1).Registration} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function create(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/registrations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/registrations/{registrationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['registrationId'],\n        pathParams: ['registrationId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.userProfiles = {\n    /**\n     * classroom.userProfiles.get\n     * @desc Returns a user profile.  This method returns the following error\n     * codes:  * `PERMISSION_DENIED` if the requesting user is not permitted to\n     * access this user profile, if no profile exists with the requested ID, or\n     * for access errors.\n     * @alias classroom.userProfiles.get\n     * @memberOf! classroom(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.userId Identifier of the profile to return. The identifier can be one of the following:  * the numeric identifier for the user * the email address of the user * the string literal `\"me\"`, indicating the requesting user\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/userProfiles/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    guardianInvitations: {\n      /**\n       * classroom.userProfiles.guardianInvitations.create\n       * @desc Creates a guardian invitation, and sends an email to the guardian\n       * asking them to confirm that they are the student's guardian.  Once the\n       * guardian accepts the invitation, their `state` will change to\n       * `COMPLETED` and they will start receiving guardian notifications. A\n       * `Guardian` resource will also be created to represent the active\n       * guardian.  The request object must have the `student_id` and\n       * `invited_email_address` fields set. Failing to set these fields, or\n       * setting any other fields in the request, will result in an error.  This\n       * method returns the following error codes:  * `PERMISSION_DENIED` if the\n       * current user does not have permission to   manage guardians, if the\n       * guardian in question has already rejected   too many requests for that\n       * student, if guardians are not enabled for the   domain in question, or\n       * for other access errors. * `RESOURCE_EXHAUSTED` if the student or\n       * guardian has exceeded the guardian   link limit. * `INVALID_ARGUMENT`\n       * if the guardian email address is not valid (for   example, if it is too\n       * long), or if the format of the student ID provided   cannot be\n       * recognized (it is not an email address, nor a `user_id` from   this\n       * API). This error will also be returned if read-only fields are set,\n       * or if the `state` field is set to to a value other than `PENDING`. *\n       * `NOT_FOUND` if the student ID provided is a valid student ID, but\n       * Classroom has no record of that student. * `ALREADY_EXISTS` if there is\n       * already a pending guardian invitation for   the student and\n       * `invited_email_address` provided, or if the provided\n       * `invited_email_address` matches the Google account of an existing\n       * `Guardian` for this user.\n       * @alias classroom.userProfiles.guardianInvitations.create\n       * @memberOf! classroom(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.studentId ID of the student (in standard format)\n       * @param {classroom(v1).GuardianInvitation} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/userProfiles/{studentId}/guardianInvitations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['studentId'],\n          pathParams: ['studentId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/userProfiles/{studentId}/guardianInvitations/{invitationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['studentId', 'invitationId'],\n          pathParams: ['invitationId', 'studentId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/userProfiles/{studentId}/guardianInvitations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['studentId'],\n          pathParams: ['studentId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      patch: function patch(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/userProfiles/{studentId}/guardianInvitations/{invitationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['studentId', 'invitationId'],\n          pathParams: ['invitationId', 'studentId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    guardians: {\n      /**\n       * classroom.userProfiles.guardians.delete\n       * @desc Deletes a guardian.  The guardian will no longer receive guardian\n       * notifications and the guardian will no longer be accessible via the\n       * API.  This method returns the following error codes:  *\n       * `PERMISSION_DENIED` if no user that matches the provided `student_id`\n       * is visible to the requesting user, if the requesting user is not\n       * permitted to manage guardians for the student identified by the\n       * `student_id`, if guardians are not enabled for the domain in question,\n       * or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is\n       * specified, but its format cannot   be recognized (it is not an email\n       * address, nor a `student_id` from the   API). * `NOT_FOUND` if the\n       * requesting user is permitted to modify guardians for   the requested\n       * `student_id`, but no `Guardian` record exists for that   student with\n       * the provided `guardian_id`.\n       * @alias classroom.userProfiles.guardians.delete\n       * @memberOf! classroom(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.guardianId The `id` field from a `Guardian`.\n       * @param {string} params.studentId The student whose guardian is to be deleted. One of the following:  * the numeric identifier for the user * the email address of the user * the string literal `\"me\"`, indicating the requesting user\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/userProfiles/{studentId}/guardians/{guardianId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['studentId', 'guardianId'],\n          pathParams: ['guardianId', 'studentId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/userProfiles/{studentId}/guardians/{guardianId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['studentId', 'guardianId'],\n          pathParams: ['guardianId', 'studentId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/userProfiles/{studentId}/guardians').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['studentId'],\n          pathParams: ['studentId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\nmodule.exports = Classroom;","map":null,"metadata":{},"sourceType":"script"}