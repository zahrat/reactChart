{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * AdSense Management API\n *\n * Accesses AdSense publishers&#39; inventory and generates performance reports.\n *\n * @example\n * const google = require('googleapis');\n * const adsense = google.adsense('v1.4');\n *\n * @namespace adsense\n * @type {Function}\n * @version v1.4\n * @variation v1.4\n * @param {object=} options Options for Adsense\n */\n\n\nfunction Adsense(options) {\n  var self = this;\n  self._options = options || {};\n  self.accounts = {\n    /**\n     * adsense.accounts.get\n     * @desc Get information about the selected AdSense account.\n     * @alias adsense.accounts.get\n     * @memberOf! adsense(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId Account to get information about.\n     * @param {boolean=} params.tree Whether the tree of sub accounts should be returned.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    adclients: {\n      /**\n       * adsense.accounts.adclients.list\n       * @desc List all ad clients in the specified account.\n       * @alias adsense.accounts.adclients.list\n       * @memberOf! adsense(v1.4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account for which to list ad clients.\n       * @param {integer=} params.maxResults The maximum number of ad clients to include in the response, used for paging.\n       * @param {string=} params.pageToken A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    adunits: {\n      /**\n       * adsense.accounts.adunits.get\n       * @desc Gets the specified ad unit in the specified ad client for the\n       * specified account.\n       * @alias adsense.accounts.adunits.get\n       * @memberOf! adsense(v1.4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account to which the ad client belongs.\n       * @param {string} params.adClientId Ad client for which to get the ad unit.\n       * @param {string} params.adUnitId Ad unit to retrieve.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n          pathParams: ['accountId', 'adClientId', 'adUnitId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      getAdCode: function getAdCode(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n          pathParams: ['accountId', 'adClientId', 'adUnitId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId'],\n          pathParams: ['accountId', 'adClientId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      customchannels: {\n        /**\n         * adsense.accounts.adunits.customchannels.list\n         * @desc List all custom channels which the specified ad unit belongs\n         * to.\n         * @alias adsense.accounts.adunits.customchannels.list\n         * @memberOf! adsense(v1.4)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId Account to which the ad client belongs.\n         * @param {string} params.adClientId Ad client which contains the ad unit.\n         * @param {string} params.adUnitId Ad unit for which to list custom channels.\n         * @param {integer=} params.maxResults The maximum number of custom channels to include in the response, used for paging.\n         * @param {string=} params.pageToken A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n            pathParams: ['accountId', 'adClientId', 'adUnitId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    },\n    alerts: {\n      /**\n       * adsense.accounts.alerts.delete\n       * @desc Dismiss (delete) the specified alert from the specified publisher\n       * AdSense account.\n       * @alias adsense.accounts.alerts.delete\n       * @memberOf! adsense(v1.4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account which contains the ad unit.\n       * @param {string} params.alertId Alert to delete.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/alerts/{alertId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'alertId'],\n          pathParams: ['accountId', 'alertId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/alerts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    customchannels: {\n      /**\n       * adsense.accounts.customchannels.get\n       * @desc Get the specified custom channel from the specified ad client for\n       * the specified account.\n       * @alias adsense.accounts.customchannels.get\n       * @memberOf! adsense(v1.4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account to which the ad client belongs.\n       * @param {string} params.adClientId Ad client which contains the custom channel.\n       * @param {string} params.customChannelId Custom channel to retrieve.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId', 'customChannelId'],\n          pathParams: ['accountId', 'adClientId', 'customChannelId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId'],\n          pathParams: ['accountId', 'adClientId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      adunits: {\n        /**\n         * adsense.accounts.customchannels.adunits.list\n         * @desc List all ad units in the specified custom channel.\n         * @alias adsense.accounts.customchannels.adunits.list\n         * @memberOf! adsense(v1.4)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId Account to which the ad client belongs.\n         * @param {string} params.adClientId Ad client which contains the custom channel.\n         * @param {string} params.customChannelId Custom channel for which to list ad units.\n         * @param {boolean=} params.includeInactive Whether to include inactive ad units. Default: true.\n         * @param {integer=} params.maxResults The maximum number of ad units to include in the response, used for paging.\n         * @param {string=} params.pageToken A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'adClientId', 'customChannelId'],\n            pathParams: ['accountId', 'adClientId', 'customChannelId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    },\n    payments: {\n      /**\n       * adsense.accounts.payments.list\n       * @desc List the payments for the specified AdSense account.\n       * @alias adsense.accounts.payments.list\n       * @memberOf! adsense(v1.4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account for which to retrieve the payments.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/payments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    reports: {\n      /**\n       * adsense.accounts.reports.generate\n       * @desc Generate an AdSense report based on the report request sent in\n       * the query parameters. Returns the result as JSON; to retrieve output in\n       * CSV format specify \"alt=csv\" as a query parameter.\n       * @alias adsense.accounts.reports.generate\n       * @memberOf! adsense(v1.4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account upon which to report.\n       * @param {string=} params.currency Optional currency to use when reporting on monetary metrics. Defaults to the account's currency if not set.\n       * @param {string=} params.dimension Dimensions to base the report on.\n       * @param {string} params.endDate End of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n       * @param {string=} params.filter Filters to be run on the report.\n       * @param {string=} params.locale Optional locale to use for translating report output to a local language. Defaults to \"en_US\" if not specified.\n       * @param {integer=} params.maxResults The maximum number of rows of report data to return.\n       * @param {string=} params.metric Numeric columns to include in the report.\n       * @param {string=} params.sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \"+\" to sort ascending or \"-\" to sort descending. If no prefix is specified, the column is sorted ascending.\n       * @param {string} params.startDate Start of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n       * @param {integer=} params.startIndex Index of the first row of report data to return.\n       * @param {boolean=} params.useTimezoneReporting Whether the report should be generated in the AdSense account's local timezone. If false default PST/PDT timezone will be used.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      generate: function generate(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/reports').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'startDate', 'endDate'],\n          pathParams: ['accountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      saved: {\n        /**\n         * adsense.accounts.reports.saved.generate\n         * @desc Generate an AdSense report based on the saved report ID sent in\n         * the query parameters.\n         * @alias adsense.accounts.reports.saved.generate\n         * @memberOf! adsense(v1.4)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId Account to which the saved reports belong.\n         * @param {string=} params.locale Optional locale to use for translating report output to a local language. Defaults to \"en_US\" if not specified.\n         * @param {integer=} params.maxResults The maximum number of rows of report data to return.\n         * @param {string} params.savedReportId The saved report to retrieve.\n         * @param {integer=} params.startIndex Index of the first row of report data to return.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        generate: function generate(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/reports/{savedReportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'savedReportId'],\n            pathParams: ['accountId', 'savedReportId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/reports/saved').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId'],\n            pathParams: ['accountId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    },\n    savedadstyles: {\n      /**\n       * adsense.accounts.savedadstyles.get\n       * @desc List a specific saved ad style for the specified account.\n       * @alias adsense.accounts.savedadstyles.get\n       * @memberOf! adsense(v1.4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account for which to get the saved ad style.\n       * @param {string} params.savedAdStyleId Saved ad style to retrieve.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/savedadstyles/{savedAdStyleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'savedAdStyleId'],\n          pathParams: ['accountId', 'savedAdStyleId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/savedadstyles').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    urlchannels: {\n      /**\n       * adsense.accounts.urlchannels.list\n       * @desc List all URL channels in the specified ad client for the\n       * specified account.\n       * @alias adsense.accounts.urlchannels.list\n       * @memberOf! adsense(v1.4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account to which the ad client belongs.\n       * @param {string} params.adClientId Ad client for which to list URL channels.\n       * @param {integer=} params.maxResults The maximum number of URL channels to include in the response, used for paging.\n       * @param {string=} params.pageToken A continuation token, used to page through URL channels. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/urlchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId'],\n          pathParams: ['accountId', 'adClientId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.adclients = {\n    /**\n     * adsense.adclients.list\n     * @desc List all ad clients in this AdSense account.\n     * @alias adsense.adclients.list\n     * @memberOf! adsense(v1.4)\n     *\n     * @param {object=} params Parameters for request\n     * @param {integer=} params.maxResults The maximum number of ad clients to include in the response, used for paging.\n     * @param {string=} params.pageToken A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/adclients').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.adunits = {\n    /**\n     * adsense.adunits.get\n     * @desc Gets the specified ad unit in the specified ad client.\n     * @alias adsense.adunits.get\n     * @memberOf! adsense(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client for which to get the ad unit.\n     * @param {string} params.adUnitId Ad unit to retrieve.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/adunits/{adUnitId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId', 'adUnitId'],\n        pathParams: ['adClientId', 'adUnitId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    getAdCode: function getAdCode(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/adunits/{adUnitId}/adcode').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId', 'adUnitId'],\n        pathParams: ['adClientId', 'adUnitId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    customchannels: {\n      /**\n       * adsense.adunits.customchannels.list\n       * @desc List all custom channels which the specified ad unit belongs to.\n       * @alias adsense.adunits.customchannels.list\n       * @memberOf! adsense(v1.4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.adClientId Ad client which contains the ad unit.\n       * @param {string} params.adUnitId Ad unit for which to list custom channels.\n       * @param {integer=} params.maxResults The maximum number of custom channels to include in the response, used for paging.\n       * @param {string=} params.pageToken A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/adunits/{adUnitId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['adClientId', 'adUnitId'],\n          pathParams: ['adClientId', 'adUnitId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.alerts = {\n    /**\n     * adsense.alerts.delete\n     * @desc Dismiss (delete) the specified alert from the publisher's AdSense\n     * account.\n     * @alias adsense.alerts.delete\n     * @memberOf! adsense(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.alertId Alert to delete.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/alerts/{alertId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['alertId'],\n        pathParams: ['alertId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/alerts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.customchannels = {\n    /**\n     * adsense.customchannels.get\n     * @desc Get the specified custom channel from the specified ad client.\n     * @alias adsense.customchannels.get\n     * @memberOf! adsense(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client which contains the custom channel.\n     * @param {string} params.customChannelId Custom channel to retrieve.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/customchannels/{customChannelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId', 'customChannelId'],\n        pathParams: ['adClientId', 'customChannelId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    adunits: {\n      /**\n       * adsense.customchannels.adunits.list\n       * @desc List all ad units in the specified custom channel.\n       * @alias adsense.customchannels.adunits.list\n       * @memberOf! adsense(v1.4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.adClientId Ad client which contains the custom channel.\n       * @param {string} params.customChannelId Custom channel for which to list ad units.\n       * @param {boolean=} params.includeInactive Whether to include inactive ad units. Default: true.\n       * @param {integer=} params.maxResults The maximum number of ad units to include in the response, used for paging.\n       * @param {string=} params.pageToken A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/customchannels/{customChannelId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['adClientId', 'customChannelId'],\n          pathParams: ['adClientId', 'customChannelId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.metadata = {\n    dimensions: {\n      /**\n       * adsense.metadata.dimensions.list\n       * @desc List the metadata for the dimensions available to this AdSense\n       * account.\n       * @alias adsense.metadata.dimensions.list\n       * @memberOf! adsense(v1.4)\n       *\n       * @param {object=} params Parameters for request\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/metadata/dimensions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    metrics: {\n      /**\n       * adsense.metadata.metrics.list\n       * @desc List the metadata for the metrics available to this AdSense\n       * account.\n       * @alias adsense.metadata.metrics.list\n       * @memberOf! adsense(v1.4)\n       *\n       * @param {object=} params Parameters for request\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/metadata/metrics').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.payments = {\n    /**\n     * adsense.payments.list\n     * @desc List the payments for this AdSense account.\n     * @alias adsense.payments.list\n     * @memberOf! adsense(v1.4)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/payments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.reports = {\n    /**\n     * adsense.reports.generate\n     * @desc Generate an AdSense report based on the report request sent in the\n     * query parameters. Returns the result as JSON; to retrieve output in CSV\n     * format specify \"alt=csv\" as a query parameter.\n     * @alias adsense.reports.generate\n     * @memberOf! adsense(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.accountId Accounts upon which to report.\n     * @param {string=} params.currency Optional currency to use when reporting on monetary metrics. Defaults to the account's currency if not set.\n     * @param {string=} params.dimension Dimensions to base the report on.\n     * @param {string} params.endDate End of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n     * @param {string=} params.filter Filters to be run on the report.\n     * @param {string=} params.locale Optional locale to use for translating report output to a local language. Defaults to \"en_US\" if not specified.\n     * @param {integer=} params.maxResults The maximum number of rows of report data to return.\n     * @param {string=} params.metric Numeric columns to include in the report.\n     * @param {string=} params.sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \"+\" to sort ascending or \"-\" to sort descending. If no prefix is specified, the column is sorted ascending.\n     * @param {string} params.startDate Start of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n     * @param {integer=} params.startIndex Index of the first row of report data to return.\n     * @param {boolean=} params.useTimezoneReporting Whether the report should be generated in the AdSense account's local timezone. If false default PST/PDT timezone will be used.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    generate: function generate(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/reports').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['startDate', 'endDate'],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    saved: {\n      /**\n       * adsense.reports.saved.generate\n       * @desc Generate an AdSense report based on the saved report ID sent in\n       * the query parameters.\n       * @alias adsense.reports.saved.generate\n       * @memberOf! adsense(v1.4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.locale Optional locale to use for translating report output to a local language. Defaults to \"en_US\" if not specified.\n       * @param {integer=} params.maxResults The maximum number of rows of report data to return.\n       * @param {string} params.savedReportId The saved report to retrieve.\n       * @param {integer=} params.startIndex Index of the first row of report data to return.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      generate: function generate(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/reports/{savedReportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['savedReportId'],\n          pathParams: ['savedReportId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/adsense/v1.4/reports/saved').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.savedadstyles = {\n    /**\n     * adsense.savedadstyles.get\n     * @desc Get a specific saved ad style from the user's account.\n     * @alias adsense.savedadstyles.get\n     * @memberOf! adsense(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.savedAdStyleId Saved ad style to retrieve.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/savedadstyles/{savedAdStyleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['savedAdStyleId'],\n        pathParams: ['savedAdStyleId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/savedadstyles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.urlchannels = {\n    /**\n     * adsense.urlchannels.list\n     * @desc List all URL channels in the specified ad client for this AdSense\n     * account.\n     * @alias adsense.urlchannels.list\n     * @memberOf! adsense(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client for which to list URL channels.\n     * @param {integer=} params.maxResults The maximum number of URL channels to include in the response, used for paging.\n     * @param {string=} params.pageToken A continuation token, used to page through URL channels. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/urlchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Adsense;","map":null,"metadata":{},"sourceType":"script"}