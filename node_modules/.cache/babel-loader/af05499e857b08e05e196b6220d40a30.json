{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Cloud Tool Results API\n *\n * Reads and publishes results from Firebase Test Lab.\n *\n * @example\n * const google = require('googleapis');\n * const toolresults = google.toolresults('v1beta3');\n *\n * @namespace toolresults\n * @type {Function}\n * @version v1beta3\n * @variation v1beta3\n * @param {object=} options Options for Toolresults\n */\n\n\nfunction Toolresults(options) {\n  var self = this;\n  self._options = options || {};\n  self.projects = {\n    /**\n     * toolresults.projects.getSettings\n     * @desc Gets the Tool Results settings for a project.  May return any of\n     * the following canonical error codes:  - PERMISSION_DENIED - if the user\n     * is not authorized to read from project\n     * @alias toolresults.projects.getSettings\n     * @memberOf! toolresults(v1beta3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.projectId A Project id.  Required.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getSettings: function getSettings(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/settings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    initializeSettings: function initializeSettings(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}:initializeSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    histories: {\n      /**\n       * toolresults.projects.histories.create\n       * @desc Creates a History.  The returned History will have the id set.\n       * May return any of the following canonical error codes:  -\n       * PERMISSION_DENIED - if the user is not authorized to write to project -\n       * INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the\n       * containing project does not exist\n       * @alias toolresults.projects.histories.create\n       * @memberOf! toolresults(v1beta3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.projectId A Project id.  Required.\n       * @param {string=} params.requestId A unique request ID for server to detect duplicated requests. For example, a UUID.  Optional, but strongly recommended.\n       * @param {toolresults(v1beta3).History} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId'],\n          pathParams: ['historyId', 'projectId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      executions: {\n        /**\n         * toolresults.projects.histories.executions.create\n         * @desc Creates an Execution.  The returned Execution will have the id\n         * set.  May return any of the following canonical error codes:  -\n         * PERMISSION_DENIED - if the user is not authorized to write to project\n         * - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the\n         * containing History does not exist\n         * @alias toolresults.projects.histories.executions.create\n         * @memberOf! toolresults(v1beta3)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.historyId A History id.  Required.\n         * @param {string} params.projectId A Project id.  Required.\n         * @param {string=} params.requestId A unique request ID for server to detect duplicated requests. For example, a UUID.  Optional, but strongly recommended.\n         * @param {toolresults(v1beta3).Execution} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'historyId'],\n            pathParams: ['historyId', 'projectId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'historyId', 'executionId'],\n            pathParams: ['executionId', 'historyId', 'projectId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'historyId'],\n            pathParams: ['historyId', 'projectId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        patch: function patch(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'historyId', 'executionId'],\n            pathParams: ['executionId', 'historyId', 'projectId'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        clusters: {\n          /**\n           * toolresults.projects.histories.executions.clusters.get\n           * @desc Retrieves a single screenshot cluster by its ID\n           * @alias toolresults.projects.histories.executions.clusters.get\n           * @memberOf! toolresults(v1beta3)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.clusterId A Cluster id  Required.\n           * @param {string} params.executionId An Execution id.  Required.\n           * @param {string} params.historyId A History id.  Required.\n           * @param {string} params.projectId A Project id.  Required.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          get: function get(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'historyId', 'executionId', 'clusterId'],\n              pathParams: ['clusterId', 'executionId', 'historyId', 'projectId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'historyId', 'executionId'],\n              pathParams: ['executionId', 'historyId', 'projectId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        },\n        steps: {\n          /**\n           * toolresults.projects.histories.executions.steps.create\n           * @desc Creates a Step.  The returned Step will have the id set.  May\n           * return any of the following canonical error codes:  -\n           * PERMISSION_DENIED - if the user is not authorized to write to\n           * project - INVALID_ARGUMENT - if the request is malformed -\n           * FAILED_PRECONDITION - if the step is too large (more than 10Mib) -\n           * NOT_FOUND - if the containing Execution does not exist\n           * @alias toolresults.projects.histories.executions.steps.create\n           * @memberOf! toolresults(v1beta3)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.executionId A Execution id.  Required.\n           * @param {string} params.historyId A History id.  Required.\n           * @param {string} params.projectId A Project id.  Required.\n           * @param {string=} params.requestId A unique request ID for server to detect duplicated requests. For example, a UUID.  Optional, but strongly recommended.\n           * @param {toolresults(v1beta3).Step} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          create: function create(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'historyId', 'executionId'],\n              pathParams: ['executionId', 'historyId', 'projectId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          get: function get(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n              pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          getPerfMetricsSummary: function getPerfMetricsSummary(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n              pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'historyId', 'executionId'],\n              pathParams: ['executionId', 'historyId', 'projectId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          patch: function patch(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'PATCH'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n              pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          publishXunitXmlFiles: function publishXunitXmlFiles(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}:publishXunitXmlFiles').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n              pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          perfMetricsSummary: {\n            /**\n             * toolresults.projects.histories.executions.steps.perfMetricsSummary.create\n             * @desc Creates a PerfMetricsSummary resource. Returns the existing\n             * one if it has already been created.  May return any of the\n             * following error code(s): - NOT_FOUND - The containing Step does\n             * not exist\n             * @alias\n             * toolresults.projects.histories.executions.steps.perfMetricsSummary.create\n             * @memberOf! toolresults(v1beta3)\n             *\n             * @param {object} params Parameters for request\n             * @param {string} params.executionId A tool results execution ID.\n             * @param {string} params.historyId A tool results history ID.\n             * @param {string} params.projectId The cloud project\n             * @param {string} params.stepId A tool results step ID.\n             * @param {toolresults(v1beta3).PerfMetricsSummary} params.resource Request body data\n             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n             * @param {callback} callback The callback that handles the response.\n             * @return {object} Request object\n             */\n            create: function create(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'POST'\n                }, options),\n                params: params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            }\n          },\n          perfSampleSeries: {\n            /**\n             * toolresults.projects.histories.executions.steps.perfSampleSeries.create\n             * @desc Creates a PerfSampleSeries.  May return any of the\n             * following error code(s): - ALREADY_EXISTS - PerfMetricSummary\n             * already exists for the given Step - NOT_FOUND - The containing\n             * Step does not exist\n             * @alias\n             * toolresults.projects.histories.executions.steps.perfSampleSeries.create\n             * @memberOf! toolresults(v1beta3)\n             *\n             * @param {object} params Parameters for request\n             * @param {string} params.executionId A tool results execution ID.\n             * @param {string} params.historyId A tool results history ID.\n             * @param {string} params.projectId The cloud project\n             * @param {string} params.stepId A tool results step ID.\n             * @param {toolresults(v1beta3).PerfSampleSeries} params.resource Request body data\n             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n             * @param {callback} callback The callback that handles the response.\n             * @return {object} Request object\n             */\n            create: function create(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'POST'\n                }, options),\n                params: params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            },\n            get: function get(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'GET'\n                }, options),\n                params: params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId', 'sampleSeriesId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'sampleSeriesId', 'stepId'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            },\n            list: function list(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'GET'\n                }, options),\n                params: params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            },\n            samples: {\n              /**\n               * toolresults.projects.histories.executions.steps.perfSampleSeries.samples.batchCreate\n               * @desc Creates a batch of PerfSamples - a client can submit\n               * multiple batches of Perf Samples through repeated calls to\n               * this method in order to split up a large request payload -\n               * duplicates and existing timestamp entries will be ignored.\n               * - the batch operation may partially succeed - the set of\n               * elements successfully inserted is returned in the response\n               * (omits items which already existed in the database).  May\n               * return any of the following canonical error codes: -\n               * NOT_FOUND - The containing PerfSampleSeries does not exist\n               * @alias\n               * toolresults.projects.histories.executions.steps.perfSampleSeries.samples.batchCreate\n               * @memberOf! toolresults(v1beta3)\n               *\n               * @param {object} params Parameters for request\n               * @param {string} params.executionId A tool results execution ID.\n               * @param {string} params.historyId A tool results history ID.\n               * @param {string} params.projectId The cloud project\n               * @param {string} params.sampleSeriesId A sample series id\n               * @param {string} params.stepId A tool results step ID.\n               * @param {toolresults(v1beta3).BatchCreatePerfSamplesRequest} params.resource Request body data\n               * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n               * @param {callback} callback The callback that handles the response.\n               * @return {object} Request object\n               */\n              batchCreate: function batchCreate(params, options, callback) {\n                if (typeof options === 'function') {\n                  callback = options;\n                  options = {};\n                }\n\n                options = options || {};\n                var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n                var parameters = {\n                  options: Object.assign({\n                    url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples:batchCreate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                  }, options),\n                  params: params,\n                  requiredParams: ['projectId', 'historyId', 'executionId', 'stepId', 'sampleSeriesId'],\n                  pathParams: ['executionId', 'historyId', 'projectId', 'sampleSeriesId', 'stepId'],\n                  context: self\n                };\n                return apirequest_1.createAPIRequest(parameters, callback);\n              },\n              list: function list(params, options, callback) {\n                if (typeof options === 'function') {\n                  callback = options;\n                  options = {};\n                }\n\n                options = options || {};\n                var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n                var parameters = {\n                  options: Object.assign({\n                    url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                  }, options),\n                  params: params,\n                  requiredParams: ['projectId', 'historyId', 'executionId', 'stepId', 'sampleSeriesId'],\n                  pathParams: ['executionId', 'historyId', 'projectId', 'sampleSeriesId', 'stepId'],\n                  context: self\n                };\n                return apirequest_1.createAPIRequest(parameters, callback);\n              }\n            }\n          },\n          thumbnails: {\n            /**\n             * toolresults.projects.histories.executions.steps.thumbnails.list\n             * @desc Lists thumbnails of images attached to a step.  May return\n             * any of the following canonical error codes: - PERMISSION_DENIED -\n             * if the user is not authorized to read from the project, or from\n             * any of the images - INVALID_ARGUMENT - if the request is\n             * malformed - NOT_FOUND - if the step does not exist, or if any of\n             * the images do not exist\n             * @alias\n             * toolresults.projects.histories.executions.steps.thumbnails.list\n             * @memberOf! toolresults(v1beta3)\n             *\n             * @param {object} params Parameters for request\n             * @param {string} params.executionId An Execution id.  Required.\n             * @param {string} params.historyId A History id.  Required.\n             * @param {integer=} params.pageSize The maximum number of thumbnails to fetch.  Default value: 50. The server will use this default if the field is not set or has a value of 0.  Optional.\n             * @param {string=} params.pageToken A continuation token to resume the query at the next item.  Optional.\n             * @param {string} params.projectId A Project id.  Required.\n             * @param {string} params.stepId A Step id.  Required.\n             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n             * @param {callback} callback The callback that handles the response.\n             * @return {object} Request object\n             */\n            list: function list(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/thumbnails').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'GET'\n                }, options),\n                params: params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            }\n          }\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = Toolresults;","map":null,"metadata":{},"sourceType":"script"}