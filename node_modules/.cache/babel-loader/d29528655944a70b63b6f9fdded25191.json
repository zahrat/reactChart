{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google Play Developer API\n *\n * Lets Android application developers access their Google Play accounts.\n *\n * @example\n * const google = require('googleapis');\n * const androidpublisher = google.androidpublisher('v1.1');\n *\n * @namespace androidpublisher\n * @type {Function}\n * @version v1.1\n * @variation v1.1\n * @param {object=} options Options for Androidpublisher\n */\n\n\nfunction Androidpublisher(options) {\n  var self = this;\n  self._options = options || {};\n  self.inapppurchases = {\n    /**\n     * androidpublisher.inapppurchases.get\n     * @desc Checks the purchase and consumption status of an inapp item.\n     * @alias androidpublisher.inapppurchases.get\n     * @memberOf! androidpublisher(v1.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.packageName The package name of the application the inapp product was sold in (for example, 'com.some.thing').\n     * @param {string} params.productId The inapp product SKU (for example, 'com.some.thing.inapp1').\n     * @param {string} params.token The token provided to the user's device when the inapp product was purchased.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v1.1/applications/{packageName}/inapp/{productId}/purchases/{token}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['packageName', 'productId', 'token'],\n        pathParams: ['packageName', 'productId', 'token'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.purchases = {\n    /**\n     * androidpublisher.purchases.cancel\n     * @desc Cancels a user's subscription purchase. The subscription remains\n     * valid until its expiration time.\n     * @alias androidpublisher.purchases.cancel\n     * @memberOf! androidpublisher(v1.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.packageName The package name of the application for which this subscription was purchased (for example, 'com.some.thing').\n     * @param {string} params.subscriptionId The purchased subscription ID (for example, 'monthly001').\n     * @param {string} params.token The token provided to the user's device when the subscription was purchased.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    cancel: function cancel(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v1.1/applications/{packageName}/subscriptions/{subscriptionId}/purchases/{token}/cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v1.1/applications/{packageName}/subscriptions/{subscriptionId}/purchases/{token}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Androidpublisher;","map":null,"metadata":{},"sourceType":"script"}