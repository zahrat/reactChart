{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Dialogflow API\n *\n * An end-to-end development suite for conversational interfaces (e.g.,\n * chatbots, voice-powered apps and devices).\n *\n * @example\n * const google = require('googleapis');\n * const dialogflow = google.dialogflow('v2beta1');\n *\n * @namespace dialogflow\n * @type {Function}\n * @version v2beta1\n * @variation v2beta1\n * @param {object=} options Options for Dialogflow\n */\n\n\nfunction Dialogflow(options) {\n  var self = this;\n  self._options = options || {};\n  self.projects = {\n    /**\n     * dialogflow.projects.getAgent\n     * @desc Retrieves the specified agent.\n     * @alias dialogflow.projects.getAgent\n     * @memberOf! dialogflow(v2beta1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.parent Required. The project that the agent to fetch is associated with. Format: `projects/<Project ID>`.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getAgent: function getAgent(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{parent}/agent').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    agent: {\n      /**\n       * dialogflow.projects.agent.export\n       * @desc Exports the specified agent to a ZIP file.   Operation\n       * <response: ExportAgentResponse,            metadata:\n       * google.protobuf.Struct>\n       * @alias dialogflow.projects.agent.export\n       * @memberOf! dialogflow(v2beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.parent Required. The project that the agent to export is associated with. Format: `projects/<Project ID>`.\n       * @param {dialogflow(v2beta1).GoogleCloudDialogflowV2beta1ExportAgentRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      export: function _export(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/{parent}/agent:export').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      import: function _import(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/{parent}/agent:import').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      restore: function restore(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/{parent}/agent:restore').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      search: function search(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/{parent}/agent:search').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      train: function train(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/{parent}/agent:train').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      entityTypes: {\n        /**\n         * dialogflow.projects.agent.entityTypes.batchDelete\n         * @desc Deletes entity types in the specified agent.  Operation\n         * <response: google.protobuf.Empty,            metadata:\n         * google.protobuf.Struct>\n         * @alias dialogflow.projects.agent.entityTypes.batchDelete\n         * @memberOf! dialogflow(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.parent Required. The name of the agent to delete all entities types for. Format: `projects/<Project ID>/agent`.\n         * @param {dialogflow(v2beta1).GoogleCloudDialogflowV2beta1BatchDeleteEntityTypesRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        batchDelete: function batchDelete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{parent}/entityTypes:batchDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        batchUpdate: function batchUpdate(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{parent}/entityTypes:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{parent}/entityTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{parent}/entityTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        patch: function patch(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        entities: {\n          /**\n           * dialogflow.projects.agent.entityTypes.entities.batchCreate\n           * @desc Creates multiple new entities in the specified entity\n           * type (extends the existing collection of entries).  Operation\n           * <response: google.protobuf.Empty>\n           * @alias\n           * dialogflow.projects.agent.entityTypes.entities.batchCreate\n           * @memberOf! dialogflow(v2beta1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.parent Required. The name of the entity type to create entities in. Format: `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`.\n           * @param {dialogflow(v2beta1).GoogleCloudDialogflowV2beta1BatchCreateEntitiesRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          batchCreate: function batchCreate(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{parent}/entities:batchCreate').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          batchDelete: function batchDelete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{parent}/entities:batchDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          batchUpdate: function batchUpdate(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{parent}/entities:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        }\n      },\n      intents: {\n        /**\n         * dialogflow.projects.agent.intents.batchDelete\n         * @desc Deletes intents in the specified agent.  Operation\n         * <response: google.protobuf.Empty>\n         * @alias dialogflow.projects.agent.intents.batchDelete\n         * @memberOf! dialogflow(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.parent Required. The name of the agent to delete all entities types for. Format: `projects/<Project ID>/agent`.\n         * @param {dialogflow(v2beta1).GoogleCloudDialogflowV2beta1BatchDeleteIntentsRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        batchDelete: function batchDelete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{parent}/intents:batchDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        batchUpdate: function batchUpdate(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{parent}/intents:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{parent}/intents').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{parent}/intents').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        patch: function patch(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      runtimes: {\n        sessions: {\n          /**\n           * dialogflow.projects.agent.runtimes.sessions.deleteContexts\n           * @desc Deletes all active contexts in the specified session.\n           * @alias\n           * dialogflow.projects.agent.runtimes.sessions.deleteContexts\n           * @memberOf! dialogflow(v2beta1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.parent Required. The name of the session to delete all contexts from. Format: `projects/<Project ID>/agent/sessions/<Session ID>` or `projects/<Project ID>/agent/runtimes/<Runtime ID>/sessions/<Session ID>`. Note: Runtimes are under construction and will be available soon. If <Runtime ID> is not specified we assume default 'sandbox' runtime.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          deleteContexts: function deleteContexts(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{parent}/contexts').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          detectIntent: function detectIntent(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{session}:detectIntent').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['session'],\n              pathParams: ['session'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          contexts: {\n            /**\n             * dialogflow.projects.agent.runtimes.sessions.contexts.create\n             * @desc Creates a context.\n             * @alias\n             * dialogflow.projects.agent.runtimes.sessions.contexts.create\n             * @memberOf! dialogflow(v2beta1)\n             *\n             * @param {object} params Parameters for request\n             * @param {string} params.parent Required. The session to create a context for. Format: `projects/<Project ID>/agent/sessions/<Session ID>` or `projects/<Project ID>/agent/runtimes/<Runtime ID>/sessions/<Session ID>`. Note: Runtimes are under construction and will be available soon. If <Runtime ID> is not specified, we assume default 'sandbox' runtime.\n             * @param {dialogflow(v2beta1).GoogleCloudDialogflowV2beta1Context} params.resource Request body data\n             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n             * @param {callback} callback The callback that handles the response.\n             * @return {object} Request object\n             */\n            create: function create(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/v2beta1/{parent}/contexts').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'POST'\n                }, options),\n                params: params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            },\n            delete: function _delete(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'DELETE'\n                }, options),\n                params: params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            },\n            get: function get(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'GET'\n                }, options),\n                params: params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            },\n            list: function list(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/v2beta1/{parent}/contexts').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'GET'\n                }, options),\n                params: params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            },\n            patch: function patch(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'PATCH'\n                }, options),\n                params: params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            }\n          },\n          entityTypes: {\n            /**\n             * dialogflow.projects.agent.runtimes.sessions.entityTypes.create\n             * @desc Creates a session entity type.\n             * @alias\n             * dialogflow.projects.agent.runtimes.sessions.entityTypes.create\n             * @memberOf! dialogflow(v2beta1)\n             *\n             * @param {object} params Parameters for request\n             * @param {string} params.parent Required. The session to create a session entity type for. Format: `projects/<Project ID>/agent/sessions/<Session ID>` or `projects/<Project ID>/agent/runtimes/<Runtime ID>/sessions/<Session ID>`. Note: Runtimes are under construction and will be available soon. If <Runtime ID> is not specified, we assume default 'sandbox' runtime.\n             * @param {dialogflow(v2beta1).GoogleCloudDialogflowV2beta1SessionEntityType} params.resource Request body data\n             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n             * @param {callback} callback The callback that handles the response.\n             * @return {object} Request object\n             */\n            create: function create(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/v2beta1/{parent}/entityTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'POST'\n                }, options),\n                params: params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            },\n            delete: function _delete(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'DELETE'\n                }, options),\n                params: params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            },\n            get: function get(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'GET'\n                }, options),\n                params: params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            },\n            list: function list(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/v2beta1/{parent}/entityTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'GET'\n                }, options),\n                params: params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            },\n            patch: function patch(params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              options = options || {};\n              var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n              var parameters = {\n                options: Object.assign({\n                  url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                  method: 'PATCH'\n                }, options),\n                params: params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: self\n              };\n              return apirequest_1.createAPIRequest(parameters, callback);\n            }\n          }\n        }\n      },\n      sessions: {\n        /**\n         * dialogflow.projects.agent.sessions.deleteContexts\n         * @desc Deletes all active contexts in the specified session.\n         * @alias dialogflow.projects.agent.sessions.deleteContexts\n         * @memberOf! dialogflow(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.parent Required. The name of the session to delete all contexts from. Format: `projects/<Project ID>/agent/sessions/<Session ID>` or `projects/<Project ID>/agent/runtimes/<Runtime ID>/sessions/<Session ID>`. Note: Runtimes are under construction and will be available soon. If <Runtime ID> is not specified we assume default 'sandbox' runtime.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        deleteContexts: function deleteContexts(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{parent}/contexts').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        detectIntent: function detectIntent(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v2beta1/{session}:detectIntent').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['session'],\n            pathParams: ['session'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        contexts: {\n          /**\n           * dialogflow.projects.agent.sessions.contexts.create\n           * @desc Creates a context.\n           * @alias dialogflow.projects.agent.sessions.contexts.create\n           * @memberOf! dialogflow(v2beta1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.parent Required. The session to create a context for. Format: `projects/<Project ID>/agent/sessions/<Session ID>` or `projects/<Project ID>/agent/runtimes/<Runtime ID>/sessions/<Session ID>`. Note: Runtimes are under construction and will be available soon. If <Runtime ID> is not specified, we assume default 'sandbox' runtime.\n           * @param {dialogflow(v2beta1).GoogleCloudDialogflowV2beta1Context} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          create: function create(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{parent}/contexts').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          delete: function _delete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          get: function get(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{parent}/contexts').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          patch: function patch(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'PATCH'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        },\n        entityTypes: {\n          /**\n           * dialogflow.projects.agent.sessions.entityTypes.create\n           * @desc Creates a session entity type.\n           * @alias dialogflow.projects.agent.sessions.entityTypes.create\n           * @memberOf! dialogflow(v2beta1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.parent Required. The session to create a session entity type for. Format: `projects/<Project ID>/agent/sessions/<Session ID>` or `projects/<Project ID>/agent/runtimes/<Runtime ID>/sessions/<Session ID>`. Note: Runtimes are under construction and will be available soon. If <Runtime ID> is not specified, we assume default 'sandbox' runtime.\n           * @param {dialogflow(v2beta1).GoogleCloudDialogflowV2beta1SessionEntityType} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          create: function create(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{parent}/entityTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          delete: function _delete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          get: function get(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{parent}/entityTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['parent'],\n              pathParams: ['parent'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          patch: function patch(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'PATCH'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        }\n      }\n    },\n    operations: {\n      /**\n       * dialogflow.projects.operations.get\n       * @desc Gets the latest state of a long-running operation.  Clients can\n       * use this method to poll the operation result at intervals as\n       * recommended by the API service.\n       * @alias dialogflow.projects.operations.get\n       * @memberOf! dialogflow(v2beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.name The name of the operation resource.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\nmodule.exports = Dialogflow;","map":null,"metadata":{},"sourceType":"script"}