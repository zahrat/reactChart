{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Google Cloud Runtime Configuration API\n *\n * The Runtime Configurator allows you to dynamically configure and expose\n * variables through Google Cloud Platform. In addition, you can also set\n * Watchers and Waiters that will watch for changes to your data and return\n * based on certain conditions.\n *\n * @example\n * const google = require('googleapis');\n * const runtimeconfig = google.runtimeconfig('v1beta1');\n *\n * @namespace runtimeconfig\n * @type {Function}\n * @version v1beta1\n * @variation v1beta1\n * @param {object=} options Options for Runtimeconfig\n */\n\n\nfunction Runtimeconfig(options) {\n  var self = this;\n  self._options = options || {};\n  self.projects = {\n    configs: {\n      /**\n       * runtimeconfig.projects.configs.create\n       * @desc Creates a new RuntimeConfig resource. The configuration name must\n       * be unique within project.\n       * @alias runtimeconfig.projects.configs.create\n       * @memberOf! runtimeconfig(v1beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.parent The [project ID](https://support.google.com/cloud/answer/6158840?hl=en&ref_topic=6158848) for this request, in the format `projects/[PROJECT_ID]`.\n       * @param {string=} params.requestId An optional but recommended unique `request_id`. If the server receives two `create()` requests  with the same `request_id`, then the second request will be ignored and the first resource created and stored in the backend is returned. Empty `request_id` fields are ignored.  It is responsibility of the client to ensure uniqueness of the `request_id` strings.  `request_id` strings are limited to 64 characters.\n       * @param {runtimeconfig(v1beta1).RuntimeConfig} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{parent}/configs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      getIamPolicy: function getIamPolicy(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{parent}/configs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      setIamPolicy: function setIamPolicy(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      testIamPermissions: function testIamPermissions(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      update: function update(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      operations: {\n        /**\n         * runtimeconfig.projects.configs.operations.get\n         * @desc Gets the latest state of a long-running operation.  Clients can\n         * use this method to poll the operation result at intervals as\n         * recommended by the API service.\n         * @alias runtimeconfig.projects.configs.operations.get\n         * @memberOf! runtimeconfig(v1beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.name The name of the operation resource.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        testIamPermissions: function testIamPermissions(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['resource'],\n            pathParams: ['resource'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      variables: {\n        /**\n         * runtimeconfig.projects.configs.variables.create\n         * @desc Creates a variable within the given configuration. You cannot\n         * create a variable with a name that is a prefix of an existing\n         * variable name, or a name that has an existing variable name as a\n         * prefix.  To learn more about creating a variable, read the [Setting\n         * and Getting\n         * Data](/deployment-manager/runtime-configurator/set-and-get-variables)\n         * documentation.\n         * @alias runtimeconfig.projects.configs.variables.create\n         * @memberOf! runtimeconfig(v1beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.parent The path to the RutimeConfig resource that this variable should belong to. The configuration must exist beforehand; the path must be in the format:  `projects/[PROJECT_ID]/configs/[CONFIG_NAME]`\n         * @param {string=} params.requestId An optional but recommended unique `request_id`. If the server receives two `create()` requests  with the same `request_id`, then the second request will be ignored and the first resource created and stored in the backend is returned. Empty `request_id` fields are ignored.  It is responsibility of the client to ensure uniqueness of the `request_id` strings.  `request_id` strings are limited to 64 characters.\n         * @param {runtimeconfig(v1beta1).Variable} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{parent}/variables').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{parent}/variables').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        testIamPermissions: function testIamPermissions(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['resource'],\n            pathParams: ['resource'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        update: function update(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        watch: function watch(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}:watch').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      },\n      waiters: {\n        /**\n         * runtimeconfig.projects.configs.waiters.create\n         * @desc Creates a Waiter resource. This operation returns a\n         * long-running Operation resource which can be polled for completion.\n         * However, a waiter with the given name will exist (and can be\n         * retrieved) prior to the operation completing. If the operation fails,\n         * the failed Waiter resource will still exist and must be deleted prior\n         * to subsequent creation attempts.\n         * @alias runtimeconfig.projects.configs.waiters.create\n         * @memberOf! runtimeconfig(v1beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.parent The path to the configuration that will own the waiter. The configuration must exist beforehand; the path must be in the format:  `projects/[PROJECT_ID]/configs/[CONFIG_NAME]`.\n         * @param {string=} params.requestId An optional but recommended unique `request_id`. If the server receives two `create()` requests  with the same `request_id`, then the second request will be ignored and the first resource created and stored in the backend is returned. Empty `request_id` fields are ignored.  It is responsibility of the client to ensure uniqueness of the `request_id` strings.  `request_id` strings are limited to 64 characters.\n         * @param {runtimeconfig(v1beta1).Waiter} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{parent}/waiters').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{parent}/waiters').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        testIamPermissions: function testIamPermissions(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://runtimeconfig.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1beta1/{resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['resource'],\n            pathParams: ['resource'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = Runtimeconfig;","map":null,"metadata":{},"sourceType":"script"}