{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Cloud Spanner API\n *\n * Cloud Spanner is a managed, mission-critical, globally consistent and\n * scalable relational database service.\n *\n * @example\n * const google = require('googleapis');\n * const spanner = google.spanner('v1');\n *\n * @namespace spanner\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Spanner\n */\n\n\nfunction Spanner(options) {\n  var self = this;\n  self._options = options || {};\n  self.projects = {\n    instanceConfigs: {\n      /**\n       * spanner.projects.instanceConfigs.get\n       * @desc Gets information about a particular instance configuration.\n       * @alias spanner.projects.instanceConfigs.get\n       * @memberOf! spanner(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.name Required. The name of the requested instance configuration. Values are of the form `projects/<project>/instanceConfigs/<config>`.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{parent}/instanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    instances: {\n      /**\n       * spanner.projects.instances.create\n       * @desc Creates an instance and begins preparing it to begin\n       * serving. The returned long-running operation can be used to\n       * track the progress of preparing the new instance. The instance\n       * name is assigned by the caller. If the named instance already\n       * exists, `CreateInstance` returns `ALREADY_EXISTS`.  Immediately\n       * upon completion of this request:    * The instance is readable\n       * via the API, with all requested attributes     but no allocated\n       * resources. Its state is `CREATING`.  Until completion of the\n       * returned operation:    * Cancelling the operation renders the\n       * instance immediately unreadable     via the API.   * The\n       * instance can be deleted.   * All other attempts to modify the\n       * instance are rejected.  Upon completion of the returned\n       * operation:    * Billing for all successfully-allocated\n       * resources begins (some types     may have lower than the\n       * requested levels).   * Databases can be created in the\n       * instance.   * The instance's allocated resource levels are\n       * readable via the API.   * The instance's state becomes `READY`.\n       * The returned long-running operation will have a name of the\n       * format `<instance_name>/operations/<operation_id>` and can be\n       * used to track creation of the instance.  The metadata field\n       * type is CreateInstanceMetadata. The response field type is\n       * Instance, if successful.\n       * @alias spanner.projects.instances.create\n       * @memberOf! spanner(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.parent Required. The name of the project in which to create the instance. Values are of the form `projects/<project>`.\n       * @param {spanner(v1).CreateInstanceRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function create(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{parent}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      getIamPolicy: function getIamPolicy(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{parent}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      patch: function patch(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      setIamPolicy: function setIamPolicy(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      testIamPermissions: function testIamPermissions(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      databases: {\n        /**\n         * spanner.projects.instances.databases.create\n         * @desc Creates a new Cloud Spanner database and starts to\n         * prepare it for serving. The returned long-running\n         * operation will have a name of the format\n         * `<database_name>/operations/<operation_id>` and can be\n         * used to track preparation of the database. The metadata\n         * field type is CreateDatabaseMetadata. The response field\n         * type is Database, if successful.\n         * @alias spanner.projects.instances.databases.create\n         * @memberOf! spanner(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.parent Required. The name of the instance that will serve the new database. Values are of the form `projects/<project>/instances/<instance>`.\n         * @param {spanner(v1).CreateDatabaseRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function create(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{parent}/databases').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        dropDatabase: function dropDatabase(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['database'],\n            pathParams: ['database'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        getDdl: function getDdl(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{database}/ddl').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['database'],\n            pathParams: ['database'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        getIamPolicy: function getIamPolicy(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['resource'],\n            pathParams: ['resource'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{parent}/databases').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['parent'],\n            pathParams: ['parent'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        setIamPolicy: function setIamPolicy(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['resource'],\n            pathParams: ['resource'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        testIamPermissions: function testIamPermissions(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['resource'],\n            pathParams: ['resource'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        updateDdl: function updateDdl(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{database}/ddl').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['database'],\n            pathParams: ['database'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        operations: {\n          /**\n           * spanner.projects.instances.databases.operations.cancel\n           * @desc Starts asynchronous cancellation on a\n           * long-running operation.  The server makes a best effort\n           * to cancel the operation, but success is not guaranteed.\n           * If the server doesn't support this method, it returns\n           * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n           * Operations.GetOperation or other methods to check\n           * whether the cancellation succeeded or whether the\n           * operation completed despite cancellation. On successful\n           * cancellation, the operation is not deleted; instead, it\n           * becomes an operation with an Operation.error value with\n           * a google.rpc.Status.code of 1, corresponding to\n           * `Code.CANCELLED`.\n           * @alias\n           * spanner.projects.instances.databases.operations.cancel\n           * @memberOf! spanner(v1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.name The name of the operation resource to be cancelled.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          cancel: function cancel(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          delete: function _delete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          get: function get(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        },\n        sessions: {\n          /**\n           * spanner.projects.instances.databases.sessions.beginTransaction\n           * @desc Begins a new transaction. This step can often be\n           * skipped: Read, ExecuteSql and Commit can begin a new\n           * transaction as a side-effect.\n           * @alias\n           * spanner.projects.instances.databases.sessions.beginTransaction\n           * @memberOf! spanner(v1)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.session Required. The session in which the transaction runs.\n           * @param {spanner(v1).BeginTransactionRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          beginTransaction: function beginTransaction(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{session}:beginTransaction').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['session'],\n              pathParams: ['session'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          commit: function commit(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{session}:commit').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['session'],\n              pathParams: ['session'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          create: function create(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{database}/sessions').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['database'],\n              pathParams: ['database'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          delete: function _delete(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          executeSql: function executeSql(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{session}:executeSql').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['session'],\n              pathParams: ['session'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          executeStreamingSql: function executeStreamingSql(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{session}:executeStreamingSql').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['session'],\n              pathParams: ['session'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          get: function get(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['name'],\n              pathParams: ['name'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          list: function list(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{database}/sessions').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['database'],\n              pathParams: ['database'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          partitionQuery: function partitionQuery(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{session}:partitionQuery').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['session'],\n              pathParams: ['session'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          partitionRead: function partitionRead(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{session}:partitionRead').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['session'],\n              pathParams: ['session'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          read: function read(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{session}:read').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['session'],\n              pathParams: ['session'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          rollback: function rollback(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{session}:rollback').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['session'],\n              pathParams: ['session'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          },\n          streamingRead: function streamingRead(params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n\n            options = options || {};\n            var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n            var parameters = {\n              options: Object.assign({\n                url: (rootUrl + '/v1/{session}:streamingRead').replace(/([^:]\\/)\\/+/g, '$1'),\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['session'],\n              pathParams: ['session'],\n              context: self\n            };\n            return apirequest_1.createAPIRequest(parameters, callback);\n          }\n        }\n      },\n      operations: {\n        /**\n         * spanner.projects.instances.operations.cancel\n         * @desc Starts asynchronous cancellation on a long-running\n         * operation.  The server makes a best effort to cancel the\n         * operation, but success is not guaranteed.  If the server\n         * doesn't support this method, it returns\n         * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n         * Operations.GetOperation or other methods to check whether the\n         * cancellation succeeded or whether the operation completed\n         * despite cancellation. On successful cancellation, the\n         * operation is not deleted; instead, it becomes an operation\n         * with an Operation.error value with a google.rpc.Status.code\n         * of 1, corresponding to `Code.CANCELLED`.\n         * @alias spanner.projects.instances.operations.cancel\n         * @memberOf! spanner(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.name The name of the operation resource to be cancelled.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        cancel: function cancel(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        delete: function _delete(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        get: function get(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        },\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://spanner.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/v1/{name}').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = Spanner;","map":null,"metadata":{},"sourceType":"script"}