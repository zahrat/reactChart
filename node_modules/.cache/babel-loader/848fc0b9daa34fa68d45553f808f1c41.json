{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Search Console API\n *\n * View Google Search Console data for your verified sites.\n *\n * @example\n * const google = require('googleapis');\n * const webmasters = google.webmasters('v3');\n *\n * @namespace webmasters\n * @type {Function}\n * @version v3\n * @variation v3\n * @param {object=} options Options for Webmasters\n */\n\n\nfunction Webmasters(options) {\n  var self = this;\n  self._options = options || {};\n  self.searchanalytics = {\n    /**\n     * webmasters.searchanalytics.query\n     * @desc Query your data with filters and parameters that you define.\n     * Returns zero or more rows grouped by the row keys that you define. You\n     * must define a date range of one or more days.  When date is one of the\n     * group by values, any days without data are omitted from the result list.\n     * If you need to know which days have data, issue a broad date range query\n     * grouped by date for any metric, and see which day rows are returned.\n     * @alias webmasters.searchanalytics.query\n     * @memberOf! webmasters(v3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.siteUrl The site's URL, including protocol. For example: http://www.example.com/\n     * @param {webmasters(v3).SearchAnalyticsQueryRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    query: function query(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/webmasters/v3/sites/{siteUrl}/searchAnalytics/query').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['siteUrl'],\n        pathParams: ['siteUrl'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.sitemaps = {\n    /**\n     * webmasters.sitemaps.delete\n     * @desc Deletes a sitemap from this site.\n     * @alias webmasters.sitemaps.delete\n     * @memberOf! webmasters(v3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.feedpath The URL of the actual sitemap. For example: http://www.example.com/sitemap.xml\n     * @param {string} params.siteUrl The site's URL, including protocol. For example: http://www.example.com/\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/webmasters/v3/sites/{siteUrl}/sitemaps/{feedpath}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['siteUrl', 'feedpath'],\n        pathParams: ['feedpath', 'siteUrl'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/webmasters/v3/sites/{siteUrl}/sitemaps/{feedpath}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['siteUrl', 'feedpath'],\n        pathParams: ['feedpath', 'siteUrl'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/webmasters/v3/sites/{siteUrl}/sitemaps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['siteUrl'],\n        pathParams: ['siteUrl'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    submit: function submit(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/webmasters/v3/sites/{siteUrl}/sitemaps/{feedpath}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['siteUrl', 'feedpath'],\n        pathParams: ['feedpath', 'siteUrl'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.sites = {\n    /**\n     * webmasters.sites.add\n     * @desc Adds a site to the set of the user's sites in Search Console.\n     * @alias webmasters.sites.add\n     * @memberOf! webmasters(v3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.siteUrl The URL of the site to add.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    add: function add(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/webmasters/v3/sites/{siteUrl}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['siteUrl'],\n        pathParams: ['siteUrl'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    delete: function _delete(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/webmasters/v3/sites/{siteUrl}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['siteUrl'],\n        pathParams: ['siteUrl'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/webmasters/v3/sites/{siteUrl}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['siteUrl'],\n        pathParams: ['siteUrl'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/webmasters/v3/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.urlcrawlerrorscounts = {\n    /**\n     * webmasters.urlcrawlerrorscounts.query\n     * @desc Retrieves a time series of the number of URL crawl errors per error\n     * category and platform.\n     * @alias webmasters.urlcrawlerrorscounts.query\n     * @memberOf! webmasters(v3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.category The crawl error category. For example: serverError. If not specified, returns results for all categories.\n     * @param {boolean=} params.latestCountsOnly If true, returns only the latest crawl error counts.\n     * @param {string=} params.platform The user agent type (platform) that made the request. For example: web. If not specified, returns results for all platforms.\n     * @param {string} params.siteUrl The site's URL, including protocol. For example: http://www.example.com/\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    query: function query(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/webmasters/v3/sites/{siteUrl}/urlCrawlErrorsCounts/query').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['siteUrl'],\n        pathParams: ['siteUrl'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.urlcrawlerrorssamples = {\n    /**\n     * webmasters.urlcrawlerrorssamples.get\n     * @desc Retrieves details about crawl errors for a site's sample URL.\n     * @alias webmasters.urlcrawlerrorssamples.get\n     * @memberOf! webmasters(v3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.category The crawl error category. For example: authPermissions\n     * @param {string} params.platform The user agent type (platform) that made the request. For example: web\n     * @param {string} params.siteUrl The site's URL, including protocol. For example: http://www.example.com/\n     * @param {string} params.url The relative path (without the site) of the sample URL. It must be one of the URLs returned by list(). For example, for the URL https://www.example.com/pagename on the site https://www.example.com/, the url value is pagename\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/webmasters/v3/sites/{siteUrl}/urlCrawlErrorsSamples/{url}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['siteUrl', 'url', 'category', 'platform'],\n        pathParams: ['siteUrl', 'url'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/webmasters/v3/sites/{siteUrl}/urlCrawlErrorsSamples').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['siteUrl', 'category', 'platform'],\n        pathParams: ['siteUrl'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    markAsFixed: function markAsFixed(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/webmasters/v3/sites/{siteUrl}/urlCrawlErrorsSamples/{url}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['siteUrl', 'url', 'category', 'platform'],\n        pathParams: ['siteUrl', 'url'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n}\n\nmodule.exports = Webmasters;","map":null,"metadata":{},"sourceType":"script"}