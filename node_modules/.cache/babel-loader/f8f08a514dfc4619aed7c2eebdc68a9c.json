{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar apirequest_1 = require(\"../../lib/apirequest\");\n/**\n * Books API\n *\n * Searches for books and manages your Google Books library.\n *\n * @example\n * const google = require('googleapis');\n * const books = google.books('v1');\n *\n * @namespace books\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Books\n */\n\n\nfunction Books(options) {\n  var self = this;\n  self._options = options || {};\n  self.bookshelves = {\n    /**\n     * books.bookshelves.get\n     * @desc Retrieves metadata for a specific bookshelf for the specified user.\n     * @alias books.bookshelves.get\n     * @memberOf! books(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.shelf ID of bookshelf to retrieve.\n     * @param {string=} params.source String to identify the originator of this request.\n     * @param {string} params.userId ID of user for whom to retrieve bookshelves.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['userId', 'shelf'],\n        pathParams: ['shelf', 'userId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/users/{userId}/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    volumes: {\n      /**\n       * books.bookshelves.volumes.list\n       * @desc Retrieves volumes in a specific bookshelf for the specified user.\n       * @alias books.bookshelves.volumes.list\n       * @memberOf! books(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer=} params.maxResults Maximum number of results to return\n       * @param {string} params.shelf ID of bookshelf to retrieve volumes.\n       * @param {boolean=} params.showPreorders Set to true to show pre-ordered books. Defaults to false.\n       * @param {string=} params.source String to identify the originator of this request.\n       * @param {integer=} params.startIndex Index of the first element to return (starts at 0)\n       * @param {string} params.userId ID of user for whom to retrieve bookshelf volumes.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userId', 'shelf'],\n          pathParams: ['shelf', 'userId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.cloudloading = {\n    /**\n     * books.cloudloading.addBook\n     * @alias books.cloudloading.addBook\n     * @memberOf! books(v1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {string=} params.drive_document_id A drive document id. The upload_client_token must not be set.\n     * @param {string=} params.mime_type The document MIME type. It can be set only if the drive_document_id is set.\n     * @param {string=} params.name The document name. It can be set only if the drive_document_id is set.\n     * @param {string=} params.upload_client_token\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    addBook: function addBook(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/cloudloading/addBook').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    deleteBook: function deleteBook(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/cloudloading/deleteBook').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['volumeId'],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    updateBook: function updateBook(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/cloudloading/updateBook').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.dictionary = {\n    /**\n     * books.dictionary.listOfflineMetadata\n     * @desc Returns a list of offline dictionary metadata available\n     * @alias books.dictionary.listOfflineMetadata\n     * @memberOf! books(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.cpksver The device/version ID from which to request the data.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    listOfflineMetadata: function listOfflineMetadata(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/dictionary/listOfflineMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['cpksver'],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.familysharing = {\n    /**\n     * books.familysharing.getFamilyInfo\n     * @desc Gets information regarding the family that the user is part of.\n     * @alias books.familysharing.getFamilyInfo\n     * @memberOf! books(v1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {string=} params.source String to identify the originator of this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getFamilyInfo: function getFamilyInfo(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/familysharing/getFamilyInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    share: function share(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/familysharing/share').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    unshare: function unshare(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/familysharing/unshare').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.layers = {\n    /**\n     * books.layers.get\n     * @desc Gets the layer summary for a volume.\n     * @alias books.layers.get\n     * @memberOf! books(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.contentVersion The content version for the requested volume.\n     * @param {string=} params.source String to identify the originator of this request.\n     * @param {string} params.summaryId The ID for the layer to get the summary for.\n     * @param {string} params.volumeId The volume to retrieve layers for.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary/{summaryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['volumeId', 'summaryId'],\n        pathParams: ['summaryId', 'volumeId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['volumeId'],\n        pathParams: ['volumeId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    annotationData: {\n      /**\n       * books.layers.annotationData.get\n       * @desc Gets the annotation data.\n       * @alias books.layers.annotationData.get\n       * @memberOf! books(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {boolean=} params.allowWebDefinitions For the dictionary layer. Whether or not to allow web definitions.\n       * @param {string} params.annotationDataId The ID of the annotation data to retrieve.\n       * @param {string} params.contentVersion The content version for the volume you are trying to retrieve.\n       * @param {integer=} params.h The requested pixel height for any images. If height is provided width must also be provided.\n       * @param {string} params.layerId The ID for the layer to get the annotations.\n       * @param {string=} params.locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: 'en_US'.\n       * @param {integer=} params.scale The requested scale for the image.\n       * @param {string=} params.source String to identify the originator of this request.\n       * @param {string} params.volumeId The volume to retrieve annotations for.\n       * @param {integer=} params.w The requested pixel width for any images. If width is provided height must also be provided.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data/{annotationDataId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId', 'layerId', 'annotationDataId', 'contentVersion'],\n          pathParams: ['annotationDataId', 'layerId', 'volumeId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n          pathParams: ['layerId', 'volumeId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    volumeAnnotations: {\n      /**\n       * books.layers.volumeAnnotations.get\n       * @desc Gets the volume annotation.\n       * @alias books.layers.volumeAnnotations.get\n       * @memberOf! books(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.annotationId The ID of the volume annotation to retrieve.\n       * @param {string} params.layerId The ID for the layer to get the annotations.\n       * @param {string=} params.locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: 'en_US'.\n       * @param {string=} params.source String to identify the originator of this request.\n       * @param {string} params.volumeId The volume to retrieve annotations for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId', 'layerId', 'annotationId'],\n          pathParams: ['annotationId', 'layerId', 'volumeId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n          pathParams: ['layerId', 'volumeId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.myconfig = {\n    /**\n     * books.myconfig.getUserSettings\n     * @desc Gets the current settings for the user.\n     * @alias books.myconfig.getUserSettings\n     * @memberOf! books(v1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getUserSettings: function getUserSettings(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/getUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    releaseDownloadAccess: function releaseDownloadAccess(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/releaseDownloadAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['volumeIds', 'cpksver'],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    requestAccess: function requestAccess(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/requestAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['source', 'volumeId', 'nonce', 'cpksver'],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    syncVolumeLicenses: function syncVolumeLicenses(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/syncVolumeLicenses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['source', 'nonce', 'cpksver'],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    updateUserSettings: function updateUserSettings(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/updateUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.mylibrary = {\n    annotations: {\n      /**\n       * books.mylibrary.annotations.delete\n       * @desc Deletes an annotation.\n       * @alias books.mylibrary.annotations.delete\n       * @memberOf! books(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.annotationId The ID for the annotation to delete.\n       * @param {string=} params.source String to identify the originator of this request.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function _delete(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['annotationId'],\n          pathParams: ['annotationId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      insert: function insert(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      summary: function summary(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/annotations/summary').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['layerIds', 'volumeId'],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      update: function update(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['annotationId'],\n          pathParams: ['annotationId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    bookshelves: {\n      /**\n       * books.mylibrary.bookshelves.addVolume\n       * @desc Adds a volume to a bookshelf.\n       * @alias books.mylibrary.bookshelves.addVolume\n       * @memberOf! books(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.reason The reason for which the book is added to the library.\n       * @param {string} params.shelf ID of bookshelf to which to add a volume.\n       * @param {string=} params.source String to identify the originator of this request.\n       * @param {string} params.volumeId ID of volume to add.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      addVolume: function addVolume(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/addVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['shelf', 'volumeId'],\n          pathParams: ['shelf'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      clearVolumes: function clearVolumes(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/clearVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['shelf'],\n          pathParams: ['shelf'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['shelf'],\n          pathParams: ['shelf'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      moveVolume: function moveVolume(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/moveVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['shelf', 'volumeId', 'volumePosition'],\n          pathParams: ['shelf'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      removeVolume: function removeVolume(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/removeVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['shelf', 'volumeId'],\n          pathParams: ['shelf'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      volumes: {\n        /**\n         * books.mylibrary.bookshelves.volumes.list\n         * @desc Gets volume information for volumes on a bookshelf.\n         * @alias books.mylibrary.bookshelves.volumes.list\n         * @memberOf! books(v1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string=} params.country ISO-3166-1 code to override the IP-based location.\n         * @param {integer=} params.maxResults Maximum number of results to return\n         * @param {string=} params.projection Restrict information returned to a set of selected fields.\n         * @param {string=} params.q Full-text search query string in this bookshelf.\n         * @param {string} params.shelf The bookshelf ID or name retrieve volumes for.\n         * @param {boolean=} params.showPreorders Set to true to show pre-ordered books. Defaults to false.\n         * @param {string=} params.source String to identify the originator of this request.\n         * @param {integer=} params.startIndex Index of the first element to return (starts at 0)\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function list(params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          options = options || {};\n          var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n          var parameters = {\n            options: Object.assign({\n              url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['shelf'],\n            pathParams: ['shelf'],\n            context: self\n          };\n          return apirequest_1.createAPIRequest(parameters, callback);\n        }\n      }\n    },\n    readingpositions: {\n      /**\n       * books.mylibrary.readingpositions.get\n       * @desc Retrieves my reading position information for a volume.\n       * @alias books.mylibrary.readingpositions.get\n       * @memberOf! books(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.contentVersion Volume content version for which this reading position is requested.\n       * @param {string=} params.source String to identify the originator of this request.\n       * @param {string} params.volumeId ID of volume for which to retrieve a reading position.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId'],\n          pathParams: ['volumeId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      setPosition: function setPosition(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}/setPosition').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId', 'timestamp', 'position'],\n          pathParams: ['volumeId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.notification = {\n    /**\n     * books.notification.get\n     * @desc Returns notification details for a given notification id.\n     * @alias books.notification.get\n     * @memberOf! books(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.locale ISO-639-1 language and ISO-3166-1 country code. Ex: 'en_US'. Used for generating notification title and body.\n     * @param {string} params.notification_id String to identify the notification.\n     * @param {string=} params.source String to identify the originator of this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/notification/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['notification_id'],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.onboarding = {\n    /**\n     * books.onboarding.listCategories\n     * @desc List categories for onboarding experience.\n     * @alias books.onboarding.listCategories\n     * @memberOf! books(v1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {string=} params.locale ISO-639-1 language and ISO-3166-1 country code. Default is en-US if unset.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    listCategories: function listCategories(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/onboarding/listCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    listCategoryVolumes: function listCategoryVolumes(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/onboarding/listCategoryVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.personalizedstream = {\n    /**\n     * books.personalizedstream.get\n     * @desc Returns a stream of personalized book clusters\n     * @alias books.personalizedstream.get\n     * @memberOf! books(v1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {string=} params.locale ISO-639-1 language and ISO-3166-1 country code. Ex: 'en_US'. Used for generating recommendations.\n     * @param {string=} params.maxAllowedMaturityRating The maximum allowed maturity rating of returned recommendations. Books with a higher maturity rating are filtered out.\n     * @param {string=} params.source String to identify the originator of this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/personalizedstream/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.promooffer = {\n    /**\n     * books.promooffer.accept\n     * @alias books.promooffer.accept\n     * @memberOf! books(v1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {string=} params.androidId device android_id\n     * @param {string=} params.device device device\n     * @param {string=} params.manufacturer device manufacturer\n     * @param {string=} params.model device model\n     * @param {string=} params.offerId\n     * @param {string=} params.product device product\n     * @param {string=} params.serial device serial\n     * @param {string=} params.volumeId Volume id to exercise the offer\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    accept: function accept(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/promooffer/accept').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    dismiss: function dismiss(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/promooffer/dismiss').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/promooffer/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    }\n  };\n  self.series = {\n    /**\n     * books.series.get\n     * @desc Returns Series metadata for the given series ids.\n     * @alias books.series.get\n     * @memberOf! books(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.series_id String that identifies the series\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/series/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['series_id'],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    membership: {\n      /**\n       * books.series.membership.get\n       * @desc Returns Series membership data given the series id.\n       * @alias books.series.membership.get\n       * @memberOf! books(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer=} params.page_size Number of maximum results per page to be included in the response.\n       * @param {string=} params.page_token The value of the nextToken from the previous page.\n       * @param {string} params.series_id String that identifies the series\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function get(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/series/membership/get').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['series_id'],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n  self.volumes = {\n    /**\n     * books.volumes.get\n     * @desc Gets volume information for a single volume.\n     * @alias books.volumes.get\n     * @memberOf! books(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.country ISO-3166-1 code to override the IP-based location.\n     * @param {boolean=} params.includeNonComicsSeries Set to true to include non-comics series. Defaults to false.\n     * @param {string=} params.partner Brand results for partner ID.\n     * @param {string=} params.projection Restrict information returned to a set of selected fields.\n     * @param {string=} params.source String to identify the originator of this request.\n     * @param {boolean=} params.user_library_consistent_read\n     * @param {string} params.volumeId ID of volume to retrieve.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function get(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['volumeId'],\n        pathParams: ['volumeId'],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    list: function list(params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      var parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['q'],\n        pathParams: [],\n        context: self\n      };\n      return apirequest_1.createAPIRequest(parameters, callback);\n    },\n    associated: {\n      /**\n       * books.volumes.associated.list\n       * @desc Return a list of associated books.\n       * @alias books.volumes.associated.list\n       * @memberOf! books(v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.association Association type.\n       * @param {string=} params.locale ISO-639-1 language and ISO-3166-1 country code. Ex: 'en_US'. Used for generating recommendations.\n       * @param {string=} params.maxAllowedMaturityRating The maximum allowed maturity rating of returned recommendations. Books with a higher maturity rating are filtered out.\n       * @param {string=} params.source String to identify the originator of this request.\n       * @param {string} params.volumeId ID of the source volume.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/associated').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId'],\n          pathParams: ['volumeId'],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    mybooks: {\n      /**\n       * books.volumes.mybooks.list\n       * @desc Return a list of books in My Library.\n       * @alias books.volumes.mybooks.list\n       * @memberOf! books(v1)\n       *\n       * @param {object=} params Parameters for request\n       * @param {string=} params.acquireMethod How the book was acquired\n       * @param {string=} params.country ISO-3166-1 code to override the IP-based location.\n       * @param {string=} params.locale ISO-639-1 language and ISO-3166-1 country code. Ex:'en_US'. Used for generating recommendations.\n       * @param {integer=} params.maxResults Maximum number of results to return.\n       * @param {string=} params.processingState The processing state of the user uploaded volumes to be returned. Applicable only if the UPLOADED is specified in the acquireMethod.\n       * @param {string=} params.source String to identify the originator of this request.\n       * @param {integer=} params.startIndex Index of the first result to return (starts at 0)\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/mybooks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    recommended: {\n      /**\n       * books.volumes.recommended.list\n       * @desc Return a list of recommended books for the current user.\n       * @alias books.volumes.recommended.list\n       * @memberOf! books(v1)\n       *\n       * @param {object=} params Parameters for request\n       * @param {string=} params.locale ISO-639-1 language and ISO-3166-1 country code. Ex: 'en_US'. Used for generating recommendations.\n       * @param {string=} params.maxAllowedMaturityRating The maximum allowed maturity rating of returned recommendations. Books with a higher maturity rating are filtered out.\n       * @param {string=} params.source String to identify the originator of this request.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/recommended').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      },\n      rate: function rate(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/recommended/rate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['rating', 'volumeId'],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    },\n    useruploaded: {\n      /**\n       * books.volumes.useruploaded.list\n       * @desc Return a list of books uploaded by the current user.\n       * @alias books.volumes.useruploaded.list\n       * @memberOf! books(v1)\n       *\n       * @param {object=} params Parameters for request\n       * @param {string=} params.locale ISO-639-1 language and ISO-3166-1 country code. Ex: 'en_US'. Used for generating recommendations.\n       * @param {integer=} params.maxResults Maximum number of results to return.\n       * @param {string=} params.processingState The processing state of the user uploaded volumes to be returned.\n       * @param {string=} params.source String to identify the originator of this request.\n       * @param {integer=} params.startIndex Index of the first result to return (starts at 0)\n       * @param {string=} params.volumeId The ids of the volumes to be returned. If not specified all that match the processingState are returned.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function list(params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n\n        options = options || {};\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/useruploaded').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n        return apirequest_1.createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\nmodule.exports = Books;","map":null,"metadata":{},"sourceType":"script"}